// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
};
vec4 _oPosition1;
out_vertex _ret_0;
vec4 _r0009;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _tex;
    _r0009 = VertexCoord.x*MVPMatrix[0];
    _r0009 = _r0009 + VertexCoord.y*MVPMatrix[1];
    _r0009 = _r0009 + VertexCoord.z*MVPMatrix[2];
    _r0009 = _r0009 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0009;
    _tex = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _ret_0._texCoord = _tex;
    gl_Position = _r0009;
    TEX0.xy = _tex;
    return;
    TEX0.xy = _ret_0._texCoord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
};
float _TMP4;
float _TMP3;
float _TMP2;
vec3 _TMP5;
float _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec3 _r0024;
vec3 _TMP33;
vec3 _r0040;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _c;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP2 = pow(_TMP0.x, 2.20000005E+00);
    _TMP3 = pow(_TMP0.y, 2.20000005E+00);
    _TMP4 = pow(_TMP0.z, 2.20000005E+00);
    _c = vec3(_TMP2, _TMP3, _TMP4);
    _r0024.x = dot(vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01), _c);
    _r0024.y = dot(vec3( 5.95716000E-01, -2.74453014E-01, -3.21262985E-01), _c);
    _r0024.z = dot(vec3( 2.11456001E-01, -5.22590995E-01, 3.11134994E-01), _c);
    _TMP1 = pow(_r0024.x, 1.10000002E+00);
    _c = vec3(_TMP1, _r0024.y*1.10000002E+00, _r0024.z*1.10000002E+00);
    _TMP5 = min(vec3( 1.00000000E+00, 5.95716000E-01, 5.22590995E-01), _c);
    _TMP33 = max(vec3( 0.00000000E+00, -5.95716000E-01, -5.22590995E-01), _TMP5);
    _r0040.x = dot(vec3( 1.00000000E+00, 9.56295729E-01, 6.21024430E-01), _TMP33);
    _r0040.y = dot(vec3( 1.00000000E+00, -2.72122115E-01, -6.47380590E-01), _TMP33);
    _r0040.z = dot(vec3( 1.00000000E+00, -1.10698903E+00, 1.70461500E+00), _TMP33);
    _TMP2 = pow(_r0040.x, 4.54545438E-01);
    _TMP3 = pow(_r0040.y, 4.54545438E-01);
    _TMP4 = pow(_r0040.z, 4.54545438E-01);
    _c = vec3(_TMP2, _TMP3, _TMP4);
    FragColor.xyz = _c;
    return;
} 
#endif
