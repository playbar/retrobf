// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP251;
float _TMP249;
float _TMP247;
float _TMP245;
float _TMP243;
float _TMP241;
float _TMP239;
float _TMP237;
float _TMP235;
float _TMP233;
float _TMP231;
float _TMP229;
float _TMP227;
float _TMP225;
float _TMP223;
float _TMP221;
float _TMP219;
float _TMP217;
float _TMP215;
float _TMP213;
float _TMP211;
float _TMP209;
float _TMP207;
float _TMP205;
float _TMP204;
float _TMP203;
float _TMP202;
float _TMP199;
float _TMP200;
float _TMP201;
float _TMP196;
float _TMP197;
float _TMP198;
float _TMP194;
float _TMP195;
float _TMP191;
float _TMP192;
float _TMP193;
float _TMP188;
float _TMP189;
float _TMP190;
float _TMP187;
float _TMP186;
float _TMP182;
float _TMP183;
float _TMP185;
float _TMP184;
float _TMP181;
vec3 _TMP178;
float _TMP254;
bool _TMP177;
bool _TMP176;
bool _TMP175;
bool _TMP174;
bool _TMP173;
bool _TMP172;
bool _TMP171;
float _TMP170;
float _TMP169;
float _TMP168;
float _TMP165;
float _TMP166;
float _TMP167;
float _TMP162;
float _TMP163;
float _TMP164;
float _TMP160;
float _TMP161;
float _TMP157;
float _TMP158;
float _TMP159;
float _TMP154;
float _TMP155;
float _TMP156;
float _TMP153;
float _TMP152;
float _TMP148;
float _TMP149;
float _TMP151;
float _TMP150;
float _TMP147;
vec3 _TMP144;
bool _TMP143;
bool _TMP142;
bool _TMP141;
bool _TMP140;
bool _TMP139;
bool _TMP138;
bool _TMP137;
float _TMP136;
float _TMP135;
float _TMP134;
float _TMP131;
float _TMP132;
float _TMP133;
float _TMP128;
float _TMP129;
float _TMP130;
float _TMP126;
float _TMP127;
float _TMP123;
float _TMP124;
float _TMP125;
float _TMP120;
float _TMP121;
float _TMP122;
float _TMP119;
float _TMP118;
float _TMP114;
float _TMP115;
float _TMP117;
float _TMP116;
float _TMP113;
vec3 _TMP110;
bool _TMP109;
bool _TMP108;
bool _TMP107;
bool _TMP106;
bool _TMP105;
bool _TMP104;
bool _TMP103;
float _TMP102;
float _TMP101;
float _TMP100;
float _TMP97;
float _TMP98;
float _TMP99;
float _TMP94;
float _TMP95;
float _TMP96;
float _TMP92;
float _TMP93;
float _TMP89;
float _TMP90;
float _TMP91;
float _TMP86;
float _TMP87;
float _TMP88;
float _TMP85;
float _TMP84;
float _TMP80;
float _TMP81;
float _TMP83;
float _TMP82;
float _TMP79;
vec3 _TMP76;
bool _TMP75;
bool _TMP74;
bool _TMP73;
bool _TMP72;
bool _TMP71;
bool _TMP70;
bool _TMP69;
bvec4 _TMP252;
int _TMP67;
int _TMP68;
int _TMP55;
int _TMP56;
int _TMP43;
int _TMP44;
int _TMP31;
int _TMP32;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0260;
float _TMP303;
float _TMP307;
float _TMP311;
float _TMP315;
float _TMP319;
float _TMP323;
float _TMP327;
float _TMP331;
float _TMP335;
float _TMP339;
vec3 _diff0340;
float _Y0340;
float _Cb0340;
float _Cr0340;
float _a0344;
float _TMP347;
vec3 _diff0348;
float _Y0348;
float _Cb0348;
float _Cr0348;
float _a0352;
float _TMP355;
vec3 _diff0356;
float _Y0356;
float _Cb0356;
float _Cr0356;
float _a0360;
float _TMP363;
vec3 _diff0364;
float _Y0364;
float _Cb0364;
float _Cr0364;
float _a0368;
float _TMP371;
vec3 _diff0372;
float _Y0372;
float _Cb0372;
float _Cr0372;
float _a0376;
float _TMP379;
vec3 _diff0380;
float _Y0380;
float _Cb0380;
float _Cr0380;
float _a0384;
float _TMP387;
vec3 _diff0388;
float _Y0388;
float _Cb0388;
float _Cr0388;
float _a0392;
float _TMP395;
vec3 _diff0396;
float _Y0396;
float _Cb0396;
float _Cr0396;
float _a0400;
float _TMP403;
vec3 _diff0404;
float _Y0404;
float _Cb0404;
float _Cr0404;
float _a0408;
float _TMP411;
vec3 _diff0412;
float _Y0412;
float _Cb0412;
float _Cr0412;
float _a0416;
float _TMP419;
vec3 _diff0420;
float _Y0420;
float _Cb0420;
float _Cr0420;
float _a0424;
float _TMP427;
vec3 _diff0428;
float _Y0428;
float _Cb0428;
float _Cr0428;
float _a0432;
float _TMP435;
vec3 _diff0436;
float _Y0436;
float _Cb0436;
float _Cr0436;
float _a0440;
float _TMP443;
vec3 _diff0444;
float _Y0444;
float _Cb0444;
float _Cr0444;
float _a0448;
float _TMP451;
vec3 _diff0452;
float _Y0452;
float _Cb0452;
float _Cr0452;
float _a0456;
float _TMP459;
vec3 _diff0460;
float _Y0460;
float _Cb0460;
float _Cr0460;
float _a0464;
float _TMP467;
vec3 _diff0468;
float _Y0468;
float _Cb0468;
float _Cr0468;
float _a0472;
float _TMP475;
vec3 _diff0476;
float _Y0476;
float _Cb0476;
float _Cr0476;
float _a0480;
float _TMP483;
vec3 _diff0484;
float _Y0484;
float _Cb0484;
float _Cr0484;
float _a0488;
float _TMP491;
vec3 _diff0492;
float _Y0492;
float _Cb0492;
float _Cr0492;
float _a0496;
float _TMP499;
vec3 _diff0500;
float _Y0500;
float _Cb0500;
float _Cr0500;
float _a0504;
float _TMP507;
vec3 _diff0508;
float _Y0508;
float _Cb0508;
float _Cr0508;
float _a0512;
float _TMP515;
vec3 _diff0516;
float _Y0516;
float _Cb0516;
float _Cr0516;
float _a0520;
float _TMP523;
vec3 _diff0524;
float _Y0524;
float _Cb0524;
float _Cr0524;
float _a0528;
float _TMP531;
vec3 _diff0532;
float _Y0532;
float _Cb0532;
float _Cr0532;
float _a0536;
float _TMP539;
vec3 _diff0540;
float _Y0540;
float _Cb0540;
float _Cr0540;
float _a0544;
float _TMP547;
vec3 _diff0548;
float _Y0548;
float _Cb0548;
float _Cr0548;
float _a0552;
float _TMP555;
vec3 _diff0556;
float _Y0556;
float _Cb0556;
float _Cr0556;
float _a0560;
float _TMP563;
vec3 _diff0564;
float _Y0564;
float _Cb0564;
float _Cr0564;
float _a0568;
float _TMP571;
vec3 _diff0572;
float _Y0572;
float _Cb0572;
float _Cr0572;
float _a0576;
float _TMP579;
vec3 _diff0580;
float _Y0580;
float _Cb0580;
float _Cr0580;
float _a0584;
float _TMP587;
vec3 _diff0588;
float _Y0588;
float _Cb0588;
float _Cr0588;
float _a0592;
float _TMP595;
vec3 _diff0596;
float _Y0596;
float _Cb0596;
float _Cr0596;
float _a0600;
float _TMP603;
vec3 _diff0604;
float _Y0604;
float _Cb0604;
float _Cr0604;
float _a0608;
float _TMP611;
vec3 _diff0612;
float _Y0612;
float _Cb0612;
float _Cr0612;
float _a0616;
float _TMP619;
vec3 _diff0620;
float _Y0620;
float _Cb0620;
float _Cr0620;
float _a0624;
float _TMP627;
vec3 _diff0628;
float _Y0628;
float _Cb0628;
float _Cr0628;
float _a0632;
float _TMP635;
vec3 _diff0636;
float _Y0636;
float _Cb0636;
float _Cr0636;
float _a0640;
float _TMP643;
vec3 _diff0644;
float _Y0644;
float _Cb0644;
float _Cr0644;
float _a0648;
float _TMP651;
vec3 _diff0652;
float _Y0652;
float _Cb0652;
float _Cr0652;
float _a0656;
float _TMP659;
vec3 _diff0660;
float _Y0660;
float _Cb0660;
float _Cr0660;
float _a0664;
float _TMP667;
vec3 _diff0668;
float _Y0668;
float _Cb0668;
float _Cr0668;
float _a0672;
float _TMP677;
vec3 _diff0678;
float _Y0678;
float _Cb0678;
float _Cr0678;
float _a0682;
float _TMP687;
vec3 _diff0688;
float _Y0688;
float _Cb0688;
float _Cr0688;
float _a0692;
float _TMP697;
vec3 _diff0698;
float _Y0698;
float _Cb0698;
float _Cr0698;
float _a0702;
float _TMP707;
vec3 _diff0708;
float _Y0708;
float _Cb0708;
float _Cr0708;
float _a0712;
float _TMP717;
vec3 _diff0718;
float _Y0718;
float _Cb0718;
float _Cr0718;
float _a0722;
float _TMP727;
vec3 _diff0728;
float _Y0728;
float _Cb0728;
float _Cr0728;
float _a0732;
float _TMP737;
vec3 _diff0738;
float _Y0738;
float _Cb0738;
float _Cr0738;
float _a0742;
float _TMP745;
vec3 _diff0746;
float _Y0746;
float _Cb0746;
float _Cr0746;
float _a0750;
float _TMP753;
vec3 _diff0754;
float _Y0754;
float _Cb0754;
float _Cr0754;
float _a0758;
vec3 _TMP761;
float _a0762;
vec3 _TMP765;
float _a0766;
vec3 _TMP769;
float _a0770;
vec3 _TMP773;
float _a0774;
vec3 _TMP777;
float _a0778;
vec3 _TMP781;
float _a0782;
vec3 _TMP785;
float _a0786;
vec3 _TMP789;
float _a0790;
vec3 _TMP793;
float _a0794;
vec3 _TMP797;
float _a0798;
vec3 _TMP801;
float _a0802;
vec3 _TMP805;
float _a0806;
float _TMP809;
vec3 _diff0810;
float _Y0810;
float _Cb0810;
float _Cr0810;
float _a0814;
float _TMP817;
vec3 _diff0818;
float _Y0818;
float _Cb0818;
float _Cr0818;
float _a0822;
float _TMP827;
vec3 _diff0828;
float _Y0828;
float _Cb0828;
float _Cr0828;
float _a0832;
float _TMP837;
vec3 _diff0838;
float _Y0838;
float _Cb0838;
float _Cr0838;
float _a0842;
float _TMP847;
vec3 _diff0848;
float _Y0848;
float _Cb0848;
float _Cr0848;
float _a0852;
float _TMP857;
vec3 _diff0858;
float _Y0858;
float _Cb0858;
float _Cr0858;
float _a0862;
float _TMP867;
vec3 _diff0868;
float _Y0868;
float _Cb0868;
float _Cr0868;
float _a0872;
float _TMP877;
vec3 _diff0878;
float _Y0878;
float _Cb0878;
float _Cr0878;
float _a0882;
float _TMP887;
vec3 _diff0888;
float _Y0888;
float _Cb0888;
float _Cr0888;
float _a0892;
float _TMP895;
vec3 _diff0896;
float _Y0896;
float _Cb0896;
float _Cr0896;
float _a0900;
float _TMP903;
vec3 _diff0904;
float _Y0904;
float _Cb0904;
float _Cr0904;
float _a0908;
vec3 _TMP911;
float _a0912;
vec3 _TMP915;
float _a0916;
vec3 _TMP919;
float _a0920;
vec3 _TMP923;
float _a0924;
vec3 _TMP927;
float _a0928;
vec3 _TMP931;
float _a0932;
vec3 _TMP935;
float _a0936;
vec3 _TMP939;
float _a0940;
vec3 _TMP943;
float _a0944;
vec3 _TMP947;
float _a0948;
vec3 _TMP951;
float _a0952;
vec3 _TMP955;
float _a0956;
float _TMP959;
vec3 _diff0960;
float _Y0960;
float _Cb0960;
float _Cr0960;
float _a0964;
float _TMP967;
vec3 _diff0968;
float _Y0968;
float _Cb0968;
float _Cr0968;
float _a0972;
float _TMP977;
vec3 _diff0978;
float _Y0978;
float _Cb0978;
float _Cr0978;
float _a0982;
float _TMP987;
vec3 _diff0988;
float _Y0988;
float _Cb0988;
float _Cr0988;
float _a0992;
float _TMP997;
vec3 _diff0998;
float _Y0998;
float _Cb0998;
float _Cr0998;
float _a1002;
float _TMP1007;
vec3 _diff1008;
float _Y1008;
float _Cb1008;
float _Cr1008;
float _a1012;
float _TMP1017;
vec3 _diff1018;
float _Y1018;
float _Cb1018;
float _Cr1018;
float _a1022;
float _TMP1027;
vec3 _diff1028;
float _Y1028;
float _Cb1028;
float _Cr1028;
float _a1032;
float _TMP1037;
vec3 _diff1038;
float _Y1038;
float _Cb1038;
float _Cr1038;
float _a1042;
float _TMP1045;
vec3 _diff1046;
float _Y1046;
float _Cb1046;
float _Cr1046;
float _a1050;
float _TMP1053;
vec3 _diff1054;
float _Y1054;
float _Cb1054;
float _Cr1054;
float _a1058;
vec3 _TMP1061;
float _a1062;
vec3 _TMP1065;
float _a1066;
vec3 _TMP1069;
float _a1070;
vec3 _TMP1073;
float _a1074;
vec3 _TMP1077;
float _a1078;
vec3 _TMP1081;
float _a1082;
vec3 _TMP1085;
float _a1086;
vec3 _TMP1089;
float _a1090;
vec3 _TMP1093;
float _a1094;
vec3 _TMP1097;
float _a1098;
vec3 _TMP1101;
float _a1102;
vec3 _TMP1105;
float _a1106;
float _TMP1109;
vec3 _diff1110;
float _Y1110;
float _Cb1110;
float _Cr1110;
float _a1114;
float _TMP1117;
vec3 _diff1118;
float _Y1118;
float _Cb1118;
float _Cr1118;
float _a1122;
float _TMP1127;
vec3 _diff1128;
float _Y1128;
float _Cb1128;
float _Cr1128;
float _a1132;
float _TMP1137;
vec3 _diff1138;
float _Y1138;
float _Cb1138;
float _Cr1138;
float _a1142;
float _TMP1147;
vec3 _diff1148;
float _Y1148;
float _Cb1148;
float _Cr1148;
float _a1152;
float _TMP1157;
vec3 _diff1158;
float _Y1158;
float _Cb1158;
float _Cr1158;
float _a1162;
float _TMP1167;
vec3 _diff1168;
float _Y1168;
float _Cb1168;
float _Cr1168;
float _a1172;
float _TMP1177;
vec3 _diff1178;
float _Y1178;
float _Cb1178;
float _Cr1178;
float _a1182;
float _TMP1187;
vec3 _diff1188;
float _Y1188;
float _Cb1188;
float _Cr1188;
float _a1192;
float _TMP1195;
vec3 _diff1196;
float _Y1196;
float _Cb1196;
float _Cr1196;
float _a1200;
float _TMP1203;
vec3 _diff1204;
float _Y1204;
float _Cb1204;
float _Cr1204;
float _a1208;
vec3 _TMP1211;
float _a1212;
vec3 _TMP1215;
float _a1216;
vec3 _TMP1219;
float _a1220;
vec3 _TMP1223;
float _a1224;
vec3 _TMP1227;
float _a1228;
vec3 _TMP1231;
float _a1232;
vec3 _TMP1235;
float _a1236;
vec3 _TMP1239;
float _a1240;
vec3 _TMP1243;
float _a1244;
vec3 _TMP1247;
float _a1248;
vec3 _TMP1251;
float _a1252;
vec3 _TMP1255;
float _a1256;
bool _TMP1259;
vec3 _TMP1267;
vec3 _TMP1273;
vec3 _TMP1279;
vec3 _TMP1285;
vec3 _TMP1291;
vec3 _TMP1297;
vec3 _TMP1303;
vec3 _TMP1309;
vec3 _TMP1315;
vec3 _TMP1321;
vec3 _TMP1327;
vec3 _TMP1333;
vec3 _TMP1339;
vec3 _TMP1345;
vec3 _TMP1351;
vec3 _TMP1357;
vec3 _TMP1363;
vec3 _TMP1369;
vec3 _TMP1375;
vec3 _TMP1381;
vec3 _TMP1387;
vec3 _TMP1393;
vec3 _TMP1399;
vec3 _TMP1405;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _f;
    ivec4 _blendResult;
    float _dist_03_011;
    float _dist_00_021;
    bool _dominantGradient1;
    float _dist_04_001;
    float _dist_05_031;
    bool _dominantGradient2;
    float _dist_00_081;
    float _dist_07_011;
    bool _dominantGradient3;
    float _dist_05_071;
    float _dist_06_001;
    bool _dominantGradient4;
    vec3 _dst[25];
    bool _haveShallowLine1;
    bool _haveSteepLine1;
    bool _needBlend1;
    bool _doLineBlend1;
    _x0260 = TEX0.xy*TextureSize;
    _f = fract(_x0260);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _TMP303 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP307 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP311 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP315 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP319 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP323 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP327 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP331 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP335 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _blendResult = ivec4(0, 0, 0, 0);
    if (!(_TMP303 == _TMP307 && _TMP315 == _TMP311 || _TMP303 == _TMP315 && _TMP307 == _TMP311)) { 
        _diff0340 = _TMP9.xyz - _TMP7.xyz;
        _Y0340 = dot(_diff0340, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0340 = 5.31519055E-01*(_diff0340.z - _Y0340);
        _Cr0340 = 6.78149998E-01*(_diff0340.x - _Y0340);
        _a0344 = _Y0340*_Y0340 + _Cb0340*_Cb0340 + _Cr0340*_Cr0340;
        _TMP254 = inversesqrt(_a0344);
        _TMP339 = 1.00000000E+00/_TMP254;
        _diff0348 = _TMP7.xyz - _TMP5.xyz;
        _Y0348 = dot(_diff0348, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0348 = 5.31519055E-01*(_diff0348.z - _Y0348);
        _Cr0348 = 6.78149998E-01*(_diff0348.x - _Y0348);
        _a0352 = _Y0348*_Y0348 + _Cb0348*_Cb0348 + _Cr0348*_Cr0348;
        _TMP254 = inversesqrt(_a0352);
        _TMP347 = 1.00000000E+00/_TMP254;
        _diff0356 = _TMP13.xyz - _TMP11.xyz;
        _Y0356 = dot(_diff0356, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0356 = 5.31519055E-01*(_diff0356.z - _Y0356);
        _Cr0356 = 6.78149998E-01*(_diff0356.x - _Y0356);
        _a0360 = _Y0356*_Y0356 + _Cb0356*_Cb0356 + _Cr0356*_Cr0356;
        _TMP254 = inversesqrt(_a0360);
        _TMP355 = 1.00000000E+00/_TMP254;
        _diff0364 = _TMP11.xyz - _TMP19.xyz;
        _Y0364 = dot(_diff0364, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0364 = 5.31519055E-01*(_diff0364.z - _Y0364);
        _Cr0364 = 6.78149998E-01*(_diff0364.x - _Y0364);
        _a0368 = _Y0364*_Y0364 + _Cb0364*_Cb0364 + _Cr0364*_Cr0364;
        _TMP254 = inversesqrt(_a0368);
        _TMP363 = 1.00000000E+00/_TMP254;
        _diff0372 = _TMP10.xyz - _TMP8.xyz;
        _Y0372 = dot(_diff0372, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0372 = 5.31519055E-01*(_diff0372.z - _Y0372);
        _Cr0372 = 6.78149998E-01*(_diff0372.x - _Y0372);
        _a0376 = _Y0372*_Y0372 + _Cb0372*_Cb0372 + _Cr0372*_Cr0372;
        _TMP254 = inversesqrt(_a0376);
        _TMP371 = 1.00000000E+00/_TMP254;
        _dist_03_011 = _TMP339 + _TMP347 + _TMP355 + _TMP363 + 4.00000000E+00*_TMP371;
        _diff0380 = _TMP6.xyz - _TMP10.xyz;
        _Y0380 = dot(_diff0380, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0380 = 5.31519055E-01*(_diff0380.z - _Y0380);
        _Cr0380 = 6.78149998E-01*(_diff0380.x - _Y0380);
        _a0384 = _Y0380*_Y0380 + _Cb0380*_Cb0380 + _Cr0380*_Cr0380;
        _TMP254 = inversesqrt(_a0384);
        _TMP379 = 1.00000000E+00/_TMP254;
        _diff0388 = _TMP10.xyz - _TMP14.xyz;
        _Y0388 = dot(_diff0388, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0388 = 5.31519055E-01*(_diff0388.z - _Y0388);
        _Cr0388 = 6.78149998E-01*(_diff0388.x - _Y0388);
        _a0392 = _Y0388*_Y0388 + _Cb0388*_Cb0388 + _Cr0388*_Cr0388;
        _TMP254 = inversesqrt(_a0392);
        _TMP387 = 1.00000000E+00/_TMP254;
        _diff0396 = _TMP4.xyz - _TMP8.xyz;
        _Y0396 = dot(_diff0396, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0396 = 5.31519055E-01*(_diff0396.z - _Y0396);
        _Cr0396 = 6.78149998E-01*(_diff0396.x - _Y0396);
        _a0400 = _Y0396*_Y0396 + _Cb0396*_Cb0396 + _Cr0396*_Cr0396;
        _TMP254 = inversesqrt(_a0400);
        _TMP395 = 1.00000000E+00/_TMP254;
        _diff0404 = _TMP8.xyz - _TMP20.xyz;
        _Y0404 = dot(_diff0404, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0404 = 5.31519055E-01*(_diff0404.z - _Y0404);
        _Cr0404 = 6.78149998E-01*(_diff0404.x - _Y0404);
        _a0408 = _Y0404*_Y0404 + _Cb0404*_Cb0404 + _Cr0404*_Cr0404;
        _TMP254 = inversesqrt(_a0408);
        _TMP403 = 1.00000000E+00/_TMP254;
        _diff0412 = _TMP7.xyz - _TMP11.xyz;
        _Y0412 = dot(_diff0412, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0412 = 5.31519055E-01*(_diff0412.z - _Y0412);
        _Cr0412 = 6.78149998E-01*(_diff0412.x - _Y0412);
        _a0416 = _Y0412*_Y0412 + _Cb0412*_Cb0412 + _Cr0412*_Cr0412;
        _TMP254 = inversesqrt(_a0416);
        _TMP411 = 1.00000000E+00/_TMP254;
        _dist_00_021 = _TMP379 + _TMP387 + _TMP395 + _TMP403 + 4.00000000E+00*_TMP411;
        _dominantGradient1 = 3.59999990E+00*_dist_03_011 < _dist_00_021;
        if (_dist_03_011 < _dist_00_021 && _TMP303 != _TMP307 && _TMP303 != _TMP315) { 
            if (_dominantGradient1) { 
                _TMP32 = 2;
            } else {
                _TMP32 = 1;
            } 
            _TMP31 = _TMP32;
        } else {
            _TMP31 = 0;
        } 
        _blendResult.z = _TMP31;
    } 
    if (!(_TMP323 == _TMP303 && _TMP319 == _TMP315 || _TMP323 == _TMP319 && _TMP303 == _TMP315)) { 
        _diff0420 = _TMP17.xyz - _TMP6.xyz;
        _Y0420 = dot(_diff0420, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0420 = 5.31519055E-01*(_diff0420.z - _Y0420);
        _Cr0420 = 6.78149998E-01*(_diff0420.x - _Y0420);
        _a0424 = _Y0420*_Y0420 + _Cb0420*_Cb0420 + _Cr0420*_Cr0420;
        _TMP254 = inversesqrt(_a0424);
        _TMP419 = 1.00000000E+00/_TMP254;
        _diff0428 = _TMP6.xyz - _TMP4.xyz;
        _Y0428 = dot(_diff0428, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0428 = 5.31519055E-01*(_diff0428.z - _Y0428);
        _Cr0428 = 6.78149998E-01*(_diff0428.x - _Y0428);
        _a0432 = _Y0428*_Y0428 + _Cb0428*_Cb0428 + _Cr0428*_Cr0428;
        _TMP254 = inversesqrt(_a0432);
        _TMP427 = 1.00000000E+00/_TMP254;
        _diff0436 = _TMP12.xyz - _TMP10.xyz;
        _Y0436 = dot(_diff0436, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0436 = 5.31519055E-01*(_diff0436.z - _Y0436);
        _Cr0436 = 6.78149998E-01*(_diff0436.x - _Y0436);
        _a0440 = _Y0436*_Y0436 + _Cb0436*_Cb0436 + _Cr0436*_Cr0436;
        _TMP254 = inversesqrt(_a0440);
        _TMP435 = 1.00000000E+00/_TMP254;
        _diff0444 = _TMP10.xyz - _TMP8.xyz;
        _Y0444 = dot(_diff0444, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0444 = 5.31519055E-01*(_diff0444.z - _Y0444);
        _Cr0444 = 6.78149998E-01*(_diff0444.x - _Y0444);
        _a0448 = _Y0444*_Y0444 + _Cb0444*_Cb0444 + _Cr0444*_Cr0444;
        _TMP254 = inversesqrt(_a0448);
        _TMP443 = 1.00000000E+00/_TMP254;
        _diff0452 = _TMP9.xyz - _TMP7.xyz;
        _Y0452 = dot(_diff0452, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0452 = 5.31519055E-01*(_diff0452.z - _Y0452);
        _Cr0452 = 6.78149998E-01*(_diff0452.x - _Y0452);
        _a0456 = _Y0452*_Y0452 + _Cb0452*_Cb0452 + _Cr0452*_Cr0452;
        _TMP254 = inversesqrt(_a0456);
        _TMP451 = 1.00000000E+00/_TMP254;
        _dist_04_001 = _TMP419 + _TMP427 + _TMP435 + _TMP443 + 4.00000000E+00*_TMP451;
        _diff0460 = _TMP16.xyz - _TMP9.xyz;
        _Y0460 = dot(_diff0460, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0460 = 5.31519055E-01*(_diff0460.z - _Y0460);
        _Cr0460 = 6.78149998E-01*(_diff0460.x - _Y0460);
        _a0464 = _Y0460*_Y0460 + _Cb0460*_Cb0460 + _Cr0460*_Cr0460;
        _TMP254 = inversesqrt(_a0464);
        _TMP459 = 1.00000000E+00/_TMP254;
        _diff0468 = _TMP9.xyz - _TMP13.xyz;
        _Y0468 = dot(_diff0468, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0468 = 5.31519055E-01*(_diff0468.z - _Y0468);
        _Cr0468 = 6.78149998E-01*(_diff0468.x - _Y0468);
        _a0472 = _Y0468*_Y0468 + _Cb0468*_Cb0468 + _Cr0468*_Cr0468;
        _TMP254 = inversesqrt(_a0472);
        _TMP467 = 1.00000000E+00/_TMP254;
        _diff0476 = _TMP3.xyz - _TMP7.xyz;
        _Y0476 = dot(_diff0476, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0476 = 5.31519055E-01*(_diff0476.z - _Y0476);
        _Cr0476 = 6.78149998E-01*(_diff0476.x - _Y0476);
        _a0480 = _Y0476*_Y0476 + _Cb0476*_Cb0476 + _Cr0476*_Cr0476;
        _TMP254 = inversesqrt(_a0480);
        _TMP475 = 1.00000000E+00/_TMP254;
        _diff0484 = _TMP7.xyz - _TMP11.xyz;
        _Y0484 = dot(_diff0484, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0484 = 5.31519055E-01*(_diff0484.z - _Y0484);
        _Cr0484 = 6.78149998E-01*(_diff0484.x - _Y0484);
        _a0488 = _Y0484*_Y0484 + _Cb0484*_Cb0484 + _Cr0484*_Cr0484;
        _TMP254 = inversesqrt(_a0488);
        _TMP483 = 1.00000000E+00/_TMP254;
        _diff0492 = _TMP6.xyz - _TMP10.xyz;
        _Y0492 = dot(_diff0492, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0492 = 5.31519055E-01*(_diff0492.z - _Y0492);
        _Cr0492 = 6.78149998E-01*(_diff0492.x - _Y0492);
        _a0496 = _Y0492*_Y0492 + _Cb0492*_Cb0492 + _Cr0492*_Cr0492;
        _TMP254 = inversesqrt(_a0496);
        _TMP491 = 1.00000000E+00/_TMP254;
        _dist_05_031 = _TMP459 + _TMP467 + _TMP475 + _TMP483 + 4.00000000E+00*_TMP491;
        _dominantGradient2 = 3.59999990E+00*_dist_05_031 < _dist_04_001;
        if (_dist_04_001 > _dist_05_031 && _TMP303 != _TMP323 && _TMP303 != _TMP315) { 
            if (_dominantGradient2) { 
                _TMP44 = 2;
            } else {
                _TMP44 = 1;
            } 
            _TMP43 = _TMP44;
        } else {
            _TMP43 = 0;
        } 
        _blendResult.w = _TMP43;
    } 
    if (!(_TMP331 == _TMP335 && _TMP303 == _TMP307 || _TMP331 == _TMP303 && _TMP335 == _TMP307)) { 
        _diff0500 = _TMP6.xyz - _TMP4.xyz;
        _Y0500 = dot(_diff0500, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0500 = 5.31519055E-01*(_diff0500.z - _Y0500);
        _Cr0500 = 6.78149998E-01*(_diff0500.x - _Y0500);
        _a0504 = _Y0500*_Y0500 + _Cb0500*_Cb0500 + _Cr0500*_Cr0500;
        _TMP254 = inversesqrt(_a0504);
        _TMP499 = 1.00000000E+00/_TMP254;
        _diff0508 = _TMP4.xyz - _TMP2.xyz;
        _Y0508 = dot(_diff0508, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0508 = 5.31519055E-01*(_diff0508.z - _Y0508);
        _Cr0508 = 6.78149998E-01*(_diff0508.x - _Y0508);
        _a0512 = _Y0508*_Y0508 + _Cb0508*_Cb0508 + _Cr0508*_Cr0508;
        _TMP254 = inversesqrt(_a0512);
        _TMP507 = 1.00000000E+00/_TMP254;
        _diff0516 = _TMP10.xyz - _TMP8.xyz;
        _Y0516 = dot(_diff0516, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0516 = 5.31519055E-01*(_diff0516.z - _Y0516);
        _Cr0516 = 6.78149998E-01*(_diff0516.x - _Y0516);
        _a0520 = _Y0516*_Y0516 + _Cb0516*_Cb0516 + _Cr0516*_Cr0516;
        _TMP254 = inversesqrt(_a0520);
        _TMP515 = 1.00000000E+00/_TMP254;
        _diff0524 = _TMP8.xyz - _TMP18.xyz;
        _Y0524 = dot(_diff0524, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0524 = 5.31519055E-01*(_diff0524.z - _Y0524);
        _Cr0524 = 6.78149998E-01*(_diff0524.x - _Y0524);
        _a0528 = _Y0524*_Y0524 + _Cb0524*_Cb0524 + _Cr0524*_Cr0524;
        _TMP254 = inversesqrt(_a0528);
        _TMP523 = 1.00000000E+00/_TMP254;
        _diff0532 = _TMP7.xyz - _TMP5.xyz;
        _Y0532 = dot(_diff0532, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0532 = 5.31519055E-01*(_diff0532.z - _Y0532);
        _Cr0532 = 6.78149998E-01*(_diff0532.x - _Y0532);
        _a0536 = _Y0532*_Y0532 + _Cb0532*_Cb0532 + _Cr0532*_Cr0532;
        _TMP254 = inversesqrt(_a0536);
        _TMP531 = 1.00000000E+00/_TMP254;
        _dist_00_081 = _TMP499 + _TMP507 + _TMP515 + _TMP523 + 4.00000000E+00*_TMP531;
        _diff0540 = _TMP3.xyz - _TMP7.xyz;
        _Y0540 = dot(_diff0540, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0540 = 5.31519055E-01*(_diff0540.z - _Y0540);
        _Cr0540 = 6.78149998E-01*(_diff0540.x - _Y0540);
        _a0544 = _Y0540*_Y0540 + _Cb0540*_Cb0540 + _Cr0540*_Cr0540;
        _TMP254 = inversesqrt(_a0544);
        _TMP539 = 1.00000000E+00/_TMP254;
        _diff0548 = _TMP7.xyz - _TMP11.xyz;
        _Y0548 = dot(_diff0548, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0548 = 5.31519055E-01*(_diff0548.z - _Y0548);
        _Cr0548 = 6.78149998E-01*(_diff0548.x - _Y0548);
        _a0552 = _Y0548*_Y0548 + _Cb0548*_Cb0548 + _Cr0548*_Cr0548;
        _TMP254 = inversesqrt(_a0552);
        _TMP547 = 1.00000000E+00/_TMP254;
        _diff0556 = _TMP1.xyz - _TMP5.xyz;
        _Y0556 = dot(_diff0556, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0556 = 5.31519055E-01*(_diff0556.z - _Y0556);
        _Cr0556 = 6.78149998E-01*(_diff0556.x - _Y0556);
        _a0560 = _Y0556*_Y0556 + _Cb0556*_Cb0556 + _Cr0556*_Cr0556;
        _TMP254 = inversesqrt(_a0560);
        _TMP555 = 1.00000000E+00/_TMP254;
        _diff0564 = _TMP5.xyz - _TMP19.xyz;
        _Y0564 = dot(_diff0564, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0564 = 5.31519055E-01*(_diff0564.z - _Y0564);
        _Cr0564 = 6.78149998E-01*(_diff0564.x - _Y0564);
        _a0568 = _Y0564*_Y0564 + _Cb0564*_Cb0564 + _Cr0564*_Cr0564;
        _TMP254 = inversesqrt(_a0568);
        _TMP563 = 1.00000000E+00/_TMP254;
        _diff0572 = _TMP4.xyz - _TMP8.xyz;
        _Y0572 = dot(_diff0572, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0572 = 5.31519055E-01*(_diff0572.z - _Y0572);
        _Cr0572 = 6.78149998E-01*(_diff0572.x - _Y0572);
        _a0576 = _Y0572*_Y0572 + _Cb0572*_Cb0572 + _Cr0572*_Cr0572;
        _TMP254 = inversesqrt(_a0576);
        _TMP571 = 1.00000000E+00/_TMP254;
        _dist_07_011 = _TMP539 + _TMP547 + _TMP555 + _TMP563 + 4.00000000E+00*_TMP571;
        _dominantGradient3 = 3.59999990E+00*_dist_07_011 < _dist_00_081;
        if (_dist_00_081 > _dist_07_011 && _TMP303 != _TMP331 && _TMP303 != _TMP307) { 
            if (_dominantGradient3) { 
                _TMP56 = 2;
            } else {
                _TMP56 = 1;
            } 
            _TMP55 = _TMP56;
        } else {
            _TMP55 = 0;
        } 
        _blendResult.y = _TMP55;
    } 
    if (!(_TMP327 == _TMP331 && _TMP323 == _TMP303 || _TMP327 == _TMP323 && _TMP331 == _TMP303)) { 
        _diff0580 = _TMP16.xyz - _TMP3.xyz;
        _Y0580 = dot(_diff0580, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0580 = 5.31519055E-01*(_diff0580.z - _Y0580);
        _Cr0580 = 6.78149998E-01*(_diff0580.x - _Y0580);
        _a0584 = _Y0580*_Y0580 + _Cb0580*_Cb0580 + _Cr0580*_Cr0580;
        _TMP254 = inversesqrt(_a0584);
        _TMP579 = 1.00000000E+00/_TMP254;
        _diff0588 = _TMP3.xyz - _TMP1.xyz;
        _Y0588 = dot(_diff0588, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0588 = 5.31519055E-01*(_diff0588.z - _Y0588);
        _Cr0588 = 6.78149998E-01*(_diff0588.x - _Y0588);
        _a0592 = _Y0588*_Y0588 + _Cb0588*_Cb0588 + _Cr0588*_Cr0588;
        _TMP254 = inversesqrt(_a0592);
        _TMP587 = 1.00000000E+00/_TMP254;
        _diff0596 = _TMP9.xyz - _TMP7.xyz;
        _Y0596 = dot(_diff0596, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0596 = 5.31519055E-01*(_diff0596.z - _Y0596);
        _Cr0596 = 6.78149998E-01*(_diff0596.x - _Y0596);
        _a0600 = _Y0596*_Y0596 + _Cb0596*_Cb0596 + _Cr0596*_Cr0596;
        _TMP254 = inversesqrt(_a0600);
        _TMP595 = 1.00000000E+00/_TMP254;
        _diff0604 = _TMP7.xyz - _TMP5.xyz;
        _Y0604 = dot(_diff0604, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0604 = 5.31519055E-01*(_diff0604.z - _Y0604);
        _Cr0604 = 6.78149998E-01*(_diff0604.x - _Y0604);
        _a0608 = _Y0604*_Y0604 + _Cb0604*_Cb0604 + _Cr0604*_Cr0604;
        _TMP254 = inversesqrt(_a0608);
        _TMP603 = 1.00000000E+00/_TMP254;
        _diff0612 = _TMP6.xyz - _TMP4.xyz;
        _Y0612 = dot(_diff0612, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0612 = 5.31519055E-01*(_diff0612.z - _Y0612);
        _Cr0612 = 6.78149998E-01*(_diff0612.x - _Y0612);
        _a0616 = _Y0612*_Y0612 + _Cb0612*_Cb0612 + _Cr0612*_Cr0612;
        _TMP254 = inversesqrt(_a0616);
        _TMP611 = 1.00000000E+00/_TMP254;
        _dist_05_071 = _TMP579 + _TMP587 + _TMP595 + _TMP603 + 4.00000000E+00*_TMP611;
        _diff0620 = _TMP15.xyz - _TMP6.xyz;
        _Y0620 = dot(_diff0620, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0620 = 5.31519055E-01*(_diff0620.z - _Y0620);
        _Cr0620 = 6.78149998E-01*(_diff0620.x - _Y0620);
        _a0624 = _Y0620*_Y0620 + _Cb0620*_Cb0620 + _Cr0620*_Cr0620;
        _TMP254 = inversesqrt(_a0624);
        _TMP619 = 1.00000000E+00/_TMP254;
        _diff0628 = _TMP6.xyz - _TMP10.xyz;
        _Y0628 = dot(_diff0628, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0628 = 5.31519055E-01*(_diff0628.z - _Y0628);
        _Cr0628 = 6.78149998E-01*(_diff0628.x - _Y0628);
        _a0632 = _Y0628*_Y0628 + _Cb0628*_Cb0628 + _Cr0628*_Cr0628;
        _TMP254 = inversesqrt(_a0632);
        _TMP627 = 1.00000000E+00/_TMP254;
        _diff0636 = _TMP0.xyz - _TMP4.xyz;
        _Y0636 = dot(_diff0636, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0636 = 5.31519055E-01*(_diff0636.z - _Y0636);
        _Cr0636 = 6.78149998E-01*(_diff0636.x - _Y0636);
        _a0640 = _Y0636*_Y0636 + _Cb0636*_Cb0636 + _Cr0636*_Cr0636;
        _TMP254 = inversesqrt(_a0640);
        _TMP635 = 1.00000000E+00/_TMP254;
        _diff0644 = _TMP4.xyz - _TMP8.xyz;
        _Y0644 = dot(_diff0644, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0644 = 5.31519055E-01*(_diff0644.z - _Y0644);
        _Cr0644 = 6.78149998E-01*(_diff0644.x - _Y0644);
        _a0648 = _Y0644*_Y0644 + _Cb0644*_Cb0644 + _Cr0644*_Cr0644;
        _TMP254 = inversesqrt(_a0648);
        _TMP643 = 1.00000000E+00/_TMP254;
        _diff0652 = _TMP3.xyz - _TMP7.xyz;
        _Y0652 = dot(_diff0652, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0652 = 5.31519055E-01*(_diff0652.z - _Y0652);
        _Cr0652 = 6.78149998E-01*(_diff0652.x - _Y0652);
        _a0656 = _Y0652*_Y0652 + _Cb0652*_Cb0652 + _Cr0652*_Cr0652;
        _TMP254 = inversesqrt(_a0656);
        _TMP651 = 1.00000000E+00/_TMP254;
        _dist_06_001 = _TMP619 + _TMP627 + _TMP635 + _TMP643 + 4.00000000E+00*_TMP651;
        _dominantGradient4 = 3.59999990E+00*_dist_05_071 < _dist_06_001;
        if (_dist_05_071 < _dist_06_001 && _TMP303 != _TMP323 && _TMP303 != _TMP331) { 
            if (_dominantGradient4) { 
                _TMP68 = 2;
            } else {
                _TMP68 = 1;
            } 
            _TMP67 = _TMP68;
        } else {
            _TMP67 = 0;
        } 
        _blendResult.x = _TMP67;
    } 
    _dst[1] = _TMP7.xyz;
    _dst[2] = _TMP7.xyz;
    _dst[3] = _TMP7.xyz;
    _dst[4] = _TMP7.xyz;
    _dst[5] = _TMP7.xyz;
    _dst[6] = _TMP7.xyz;
    _dst[7] = _TMP7.xyz;
    _dst[8] = _TMP7.xyz;
    _dst[9] = _TMP7.xyz;
    _dst[10] = _TMP7.xyz;
    _dst[11] = _TMP7.xyz;
    _dst[12] = _TMP7.xyz;
    _dst[13] = _TMP7.xyz;
    _dst[14] = _TMP7.xyz;
    _dst[15] = _TMP7.xyz;
    _dst[16] = _TMP7.xyz;
    _dst[17] = _TMP7.xyz;
    _dst[18] = _TMP7.xyz;
    _dst[19] = _TMP7.xyz;
    _dst[20] = _TMP7.xyz;
    _dst[21] = _TMP7.xyz;
    _dst[22] = _TMP7.xyz;
    _dst[23] = _TMP7.xyz;
    _dst[24] = _TMP7.xyz;
    _TMP252 = bvec4(_blendResult.x != 0, _blendResult.y != 0, _blendResult.z != 0, _blendResult.w != 0);
    _TMP1259 = _TMP252.x || _TMP252.y || _TMP252.z || _TMP252.w;
    if (_TMP1259) { 
        _diff0660 = _TMP8.xyz - _TMP9.xyz;
        _Y0660 = dot(_diff0660, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0660 = 5.31519055E-01*(_diff0660.z - _Y0660);
        _Cr0660 = 6.78149998E-01*(_diff0660.x - _Y0660);
        _a0664 = _Y0660*_Y0660 + _Cb0660*_Cb0660 + _Cr0660*_Cr0660;
        _TMP254 = inversesqrt(_a0664);
        _TMP659 = 1.00000000E+00/_TMP254;
        _diff0668 = _TMP10.xyz - _TMP5.xyz;
        _Y0668 = dot(_diff0668, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0668 = 5.31519055E-01*(_diff0668.z - _Y0668);
        _Cr0668 = 6.78149998E-01*(_diff0668.x - _Y0668);
        _a0672 = _Y0668*_Y0668 + _Cb0668*_Cb0668 + _Cr0668*_Cr0668;
        _TMP254 = inversesqrt(_a0672);
        _TMP667 = 1.00000000E+00/_TMP254;
        _haveShallowLine1 = 2.20000005E+00*_TMP659 <= _TMP667 && _TMP303 != _TMP319 && _TMP323 != _TMP319;
        _haveSteepLine1 = 2.20000005E+00*_TMP667 <= _TMP659 && _TMP303 != _TMP335 && _TMP331 != _TMP335;
        _needBlend1 = _blendResult.z != 0;
        _diff0678 = _TMP7.xyz - _TMP9.xyz;
        _Y0678 = dot(_diff0678, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0678 = 5.31519055E-01*(_diff0678.z - _Y0678);
        _Cr0678 = 6.78149998E-01*(_diff0678.x - _Y0678);
        _a0682 = _Y0678*_Y0678 + _Cb0678*_Cb0678 + _Cr0678*_Cr0678;
        _TMP254 = inversesqrt(_a0682);
        _TMP677 = 1.00000000E+00/_TMP254;
        _TMP69 = _TMP677 < 1.17647059E-01;
        _diff0688 = _TMP7.xyz - _TMP5.xyz;
        _Y0688 = dot(_diff0688, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0688 = 5.31519055E-01*(_diff0688.z - _Y0688);
        _Cr0688 = 6.78149998E-01*(_diff0688.x - _Y0688);
        _a0692 = _Y0688*_Y0688 + _Cb0688*_Cb0688 + _Cr0688*_Cr0688;
        _TMP254 = inversesqrt(_a0692);
        _TMP687 = 1.00000000E+00/_TMP254;
        _TMP70 = _TMP687 < 1.17647059E-01;
        _diff0698 = _TMP9.xyz - _TMP10.xyz;
        _Y0698 = dot(_diff0698, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0698 = 5.31519055E-01*(_diff0698.z - _Y0698);
        _Cr0698 = 6.78149998E-01*(_diff0698.x - _Y0698);
        _a0702 = _Y0698*_Y0698 + _Cb0698*_Cb0698 + _Cr0698*_Cr0698;
        _TMP254 = inversesqrt(_a0702);
        _TMP697 = 1.00000000E+00/_TMP254;
        _TMP71 = _TMP697 < 1.17647059E-01;
        _diff0708 = _TMP10.xyz - _TMP11.xyz;
        _Y0708 = dot(_diff0708, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0708 = 5.31519055E-01*(_diff0708.z - _Y0708);
        _Cr0708 = 6.78149998E-01*(_diff0708.x - _Y0708);
        _a0712 = _Y0708*_Y0708 + _Cb0708*_Cb0708 + _Cr0708*_Cr0708;
        _TMP254 = inversesqrt(_a0712);
        _TMP707 = 1.00000000E+00/_TMP254;
        _TMP72 = _TMP707 < 1.17647059E-01;
        _diff0718 = _TMP11.xyz - _TMP8.xyz;
        _Y0718 = dot(_diff0718, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0718 = 5.31519055E-01*(_diff0718.z - _Y0718);
        _Cr0718 = 6.78149998E-01*(_diff0718.x - _Y0718);
        _a0722 = _Y0718*_Y0718 + _Cb0718*_Cb0718 + _Cr0718*_Cr0718;
        _TMP254 = inversesqrt(_a0722);
        _TMP717 = 1.00000000E+00/_TMP254;
        _TMP73 = _TMP717 < 1.17647059E-01;
        _diff0728 = _TMP8.xyz - _TMP5.xyz;
        _Y0728 = dot(_diff0728, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0728 = 5.31519055E-01*(_diff0728.z - _Y0728);
        _Cr0728 = 6.78149998E-01*(_diff0728.x - _Y0728);
        _a0732 = _Y0728*_Y0728 + _Cb0728*_Cb0728 + _Cr0728*_Cr0728;
        _TMP254 = inversesqrt(_a0732);
        _TMP727 = 1.00000000E+00/_TMP254;
        _TMP74 = _TMP727 < 1.17647059E-01;
        _diff0738 = _TMP7.xyz - _TMP11.xyz;
        _Y0738 = dot(_diff0738, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0738 = 5.31519055E-01*(_diff0738.z - _Y0738);
        _Cr0738 = 6.78149998E-01*(_diff0738.x - _Y0738);
        _a0742 = _Y0738*_Y0738 + _Cb0738*_Cb0738 + _Cr0738*_Cr0738;
        _TMP254 = inversesqrt(_a0742);
        _TMP737 = 1.00000000E+00/_TMP254;
        _TMP75 = _TMP737 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.z >= 2 || !(_blendResult.y != 0 && !_TMP69 || _blendResult.w != 0 && !_TMP70 || _TMP71 && _TMP72 && _TMP73 && _TMP74 && !_TMP75);
        _diff0746 = _TMP7.xyz - _TMP8.xyz;
        _Y0746 = dot(_diff0746, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0746 = 5.31519055E-01*(_diff0746.z - _Y0746);
        _Cr0746 = 6.78149998E-01*(_diff0746.x - _Y0746);
        _a0750 = _Y0746*_Y0746 + _Cb0746*_Cb0746 + _Cr0746*_Cr0746;
        _TMP254 = inversesqrt(_a0750);
        _TMP745 = 1.00000000E+00/_TMP254;
        _diff0754 = _TMP7.xyz - _TMP10.xyz;
        _Y0754 = dot(_diff0754, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0754 = 5.31519055E-01*(_diff0754.z - _Y0754);
        _Cr0754 = 6.78149998E-01*(_diff0754.x - _Y0754);
        _a0758 = _Y0754*_Y0754 + _Cb0754*_Cb0754 + _Cr0754*_Cr0754;
        _TMP254 = inversesqrt(_a0758);
        _TMP753 = 1.00000000E+00/_TMP254;
        if (_TMP745 <= _TMP753) { 
            _TMP76 = _TMP8.xyz;
        } else {
            _TMP76 = _TMP10.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP79 = 2.50000000E-01;
        } else {
            _TMP79 = 0.00000000E+00;
        } 
        _a0762 = float(_TMP79);
        _TMP761 = _TMP7.xyz + _a0762*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP82 = 6.66666687E-01;
                } else {
                    _TMP82 = 7.50000000E-01;
                } 
                _TMP81 = _TMP82;
            } else {
                if (_haveSteepLine1) { 
                    _TMP83 = 7.50000000E-01;
                } else {
                    _TMP83 = 1.25000000E-01;
                } 
                _TMP81 = _TMP83;
            } 
            _TMP80 = _TMP81;
        } else {
            _TMP80 = 0.00000000E+00;
        } 
        _a0766 = float(_TMP80);
        _TMP765 = _TMP7.xyz + _a0766*(_TMP76 - _TMP7.xyz);
        _dst[2] = _TMP765;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP84 = 2.50000000E-01;
        } else {
            _TMP84 = 0.00000000E+00;
        } 
        _a0770 = float(_TMP84);
        _TMP769 = _TMP7.xyz + _a0770*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP85 = 7.50000000E-01;
        } else {
            _TMP85 = 0.00000000E+00;
        } 
        _a0774 = float(_TMP85);
        _TMP773 = _TMP7.xyz + _a0774*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP87 = 1.00000000E+00;
            } else {
                if (_haveShallowLine1) { 
                    _TMP88 = 2.50000000E-01;
                } else {
                    _TMP88 = 1.25000000E-01;
                } 
                _TMP87 = _TMP88;
            } 
            _TMP86 = _TMP87;
        } else {
            _TMP86 = 0.00000000E+00;
        } 
        _a0778 = float(_TMP86);
        _TMP777 = _TMP7.xyz + _a0778*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP91 = 8.75000000E-01;
                } else {
                    _TMP91 = 1.00000000E+00;
                } 
                _TMP90 = _TMP91;
            } else {
                _TMP90 = 2.30674967E-01;
            } 
            _TMP89 = _TMP90;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a0782 = float(_TMP89);
        _TMP781 = _TMP7.xyz + _a0782*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP93 = 1.00000000E+00;
            } else {
                _TMP93 = 8.63143384E-01;
            } 
            _TMP92 = _TMP93;
        } else {
            _TMP92 = 0.00000000E+00;
        } 
        _a0786 = float(_TMP92);
        _TMP785 = _TMP7.xyz + _a0786*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP96 = 8.75000000E-01;
                } else {
                    _TMP96 = 1.00000000E+00;
                } 
                _TMP95 = _TMP96;
            } else {
                _TMP95 = 2.30674967E-01;
            } 
            _TMP94 = _TMP95;
        } else {
            _TMP94 = 0.00000000E+00;
        } 
        _a0790 = float(_TMP94);
        _TMP789 = _TMP7.xyz + _a0790*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP98 = 1.00000000E+00;
            } else {
                if (_haveSteepLine1) { 
                    _TMP99 = 2.50000000E-01;
                } else {
                    _TMP99 = 1.25000000E-01;
                } 
                _TMP98 = _TMP99;
            } 
            _TMP97 = _TMP98;
        } else {
            _TMP97 = 0.00000000E+00;
        } 
        _a0794 = float(_TMP97);
        _TMP793 = _TMP7.xyz + _a0794*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP100 = 7.50000000E-01;
        } else {
            _TMP100 = 0.00000000E+00;
        } 
        _a0798 = float(_TMP100);
        _TMP797 = _TMP7.xyz + _a0798*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP101 = 2.50000000E-01;
        } else {
            _TMP101 = 0.00000000E+00;
        } 
        _a0802 = float(_TMP101);
        _TMP801 = _TMP7.xyz + _a0802*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP102 = 2.50000000E-01;
        } else {
            _TMP102 = 0.00000000E+00;
        } 
        _a0806 = float(_TMP102);
        _TMP805 = _TMP7.xyz + _a0806*(_TMP76 - _TMP7.xyz);
        _diff0810 = _TMP4.xyz - _TMP11.xyz;
        _Y0810 = dot(_diff0810, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0810 = 5.31519055E-01*(_diff0810.z - _Y0810);
        _Cr0810 = 6.78149998E-01*(_diff0810.x - _Y0810);
        _a0814 = _Y0810*_Y0810 + _Cb0810*_Cb0810 + _Cr0810*_Cr0810;
        _TMP254 = inversesqrt(_a0814);
        _TMP809 = 1.00000000E+00/_TMP254;
        _diff0818 = _TMP8.xyz - _TMP3.xyz;
        _Y0818 = dot(_diff0818, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0818 = 5.31519055E-01*(_diff0818.z - _Y0818);
        _Cr0818 = 6.78149998E-01*(_diff0818.x - _Y0818);
        _a0822 = _Y0818*_Y0818 + _Cb0818*_Cb0818 + _Cr0818*_Cr0818;
        _TMP254 = inversesqrt(_a0822);
        _TMP817 = 1.00000000E+00/_TMP254;
        _haveShallowLine1 = 2.20000005E+00*_TMP809 <= _TMP817 && _TMP303 != _TMP311 && _TMP315 != _TMP311;
        _haveSteepLine1 = 2.20000005E+00*_TMP817 <= _TMP809 && _TMP303 != _TMP327 && _TMP323 != _TMP327;
        _needBlend1 = _blendResult.y != 0;
        _diff0828 = _TMP7.xyz - _TMP11.xyz;
        _Y0828 = dot(_diff0828, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0828 = 5.31519055E-01*(_diff0828.z - _Y0828);
        _Cr0828 = 6.78149998E-01*(_diff0828.x - _Y0828);
        _a0832 = _Y0828*_Y0828 + _Cb0828*_Cb0828 + _Cr0828*_Cr0828;
        _TMP254 = inversesqrt(_a0832);
        _TMP827 = 1.00000000E+00/_TMP254;
        _TMP103 = _TMP827 < 1.17647059E-01;
        _diff0838 = _TMP7.xyz - _TMP3.xyz;
        _Y0838 = dot(_diff0838, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0838 = 5.31519055E-01*(_diff0838.z - _Y0838);
        _Cr0838 = 6.78149998E-01*(_diff0838.x - _Y0838);
        _a0842 = _Y0838*_Y0838 + _Cb0838*_Cb0838 + _Cr0838*_Cr0838;
        _TMP254 = inversesqrt(_a0842);
        _TMP837 = 1.00000000E+00/_TMP254;
        _TMP104 = _TMP837 < 1.17647059E-01;
        _diff0848 = _TMP11.xyz - _TMP8.xyz;
        _Y0848 = dot(_diff0848, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0848 = 5.31519055E-01*(_diff0848.z - _Y0848);
        _Cr0848 = 6.78149998E-01*(_diff0848.x - _Y0848);
        _a0852 = _Y0848*_Y0848 + _Cb0848*_Cb0848 + _Cr0848*_Cr0848;
        _TMP254 = inversesqrt(_a0852);
        _TMP847 = 1.00000000E+00/_TMP254;
        _TMP105 = _TMP847 < 1.17647059E-01;
        _diff0858 = _TMP8.xyz - _TMP5.xyz;
        _Y0858 = dot(_diff0858, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0858 = 5.31519055E-01*(_diff0858.z - _Y0858);
        _Cr0858 = 6.78149998E-01*(_diff0858.x - _Y0858);
        _a0862 = _Y0858*_Y0858 + _Cb0858*_Cb0858 + _Cr0858*_Cr0858;
        _TMP254 = inversesqrt(_a0862);
        _TMP857 = 1.00000000E+00/_TMP254;
        _TMP106 = _TMP857 < 1.17647059E-01;
        _diff0868 = _TMP5.xyz - _TMP4.xyz;
        _Y0868 = dot(_diff0868, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0868 = 5.31519055E-01*(_diff0868.z - _Y0868);
        _Cr0868 = 6.78149998E-01*(_diff0868.x - _Y0868);
        _a0872 = _Y0868*_Y0868 + _Cb0868*_Cb0868 + _Cr0868*_Cr0868;
        _TMP254 = inversesqrt(_a0872);
        _TMP867 = 1.00000000E+00/_TMP254;
        _TMP107 = _TMP867 < 1.17647059E-01;
        _diff0878 = _TMP4.xyz - _TMP3.xyz;
        _Y0878 = dot(_diff0878, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0878 = 5.31519055E-01*(_diff0878.z - _Y0878);
        _Cr0878 = 6.78149998E-01*(_diff0878.x - _Y0878);
        _a0882 = _Y0878*_Y0878 + _Cb0878*_Cb0878 + _Cr0878*_Cr0878;
        _TMP254 = inversesqrt(_a0882);
        _TMP877 = 1.00000000E+00/_TMP254;
        _TMP108 = _TMP877 < 1.17647059E-01;
        _diff0888 = _TMP7.xyz - _TMP5.xyz;
        _Y0888 = dot(_diff0888, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0888 = 5.31519055E-01*(_diff0888.z - _Y0888);
        _Cr0888 = 6.78149998E-01*(_diff0888.x - _Y0888);
        _a0892 = _Y0888*_Y0888 + _Cb0888*_Cb0888 + _Cr0888*_Cr0888;
        _TMP254 = inversesqrt(_a0892);
        _TMP887 = 1.00000000E+00/_TMP254;
        _TMP109 = _TMP887 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.y >= 2 || !(_blendResult.x != 0 && !_TMP103 || _blendResult.z != 0 && !_TMP104 || _TMP105 && _TMP106 && _TMP107 && _TMP108 && !_TMP109);
        _diff0896 = _TMP7.xyz - _TMP4.xyz;
        _Y0896 = dot(_diff0896, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0896 = 5.31519055E-01*(_diff0896.z - _Y0896);
        _Cr0896 = 6.78149998E-01*(_diff0896.x - _Y0896);
        _a0900 = _Y0896*_Y0896 + _Cb0896*_Cb0896 + _Cr0896*_Cr0896;
        _TMP254 = inversesqrt(_a0900);
        _TMP895 = 1.00000000E+00/_TMP254;
        _diff0904 = _TMP7.xyz - _TMP8.xyz;
        _Y0904 = dot(_diff0904, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0904 = 5.31519055E-01*(_diff0904.z - _Y0904);
        _Cr0904 = 6.78149998E-01*(_diff0904.x - _Y0904);
        _a0908 = _Y0904*_Y0904 + _Cb0904*_Cb0904 + _Cr0904*_Cr0904;
        _TMP254 = inversesqrt(_a0908);
        _TMP903 = 1.00000000E+00/_TMP254;
        if (_TMP895 <= _TMP903) { 
            _TMP110 = _TMP4.xyz;
        } else {
            _TMP110 = _TMP8.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP113 = 2.50000000E-01;
        } else {
            _TMP113 = 0.00000000E+00;
        } 
        _a0912 = float(_TMP113);
        _TMP911 = _TMP7.xyz + _a0912*(_TMP110 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP116 = 6.66666687E-01;
                } else {
                    _TMP116 = 7.50000000E-01;
                } 
                _TMP115 = _TMP116;
            } else {
                if (_haveSteepLine1) { 
                    _TMP117 = 7.50000000E-01;
                } else {
                    _TMP117 = 1.25000000E-01;
                } 
                _TMP115 = _TMP117;
            } 
            _TMP114 = _TMP115;
        } else {
            _TMP114 = 0.00000000E+00;
        } 
        _a0916 = float(_TMP114);
        _TMP915 = _TMP7.xyz + _a0916*(_TMP110 - _TMP7.xyz);
        _dst[8] = _TMP915;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP118 = 2.50000000E-01;
        } else {
            _TMP118 = 0.00000000E+00;
        } 
        _a0920 = float(_TMP118);
        _TMP919 = _TMP761 + _a0920*(_TMP110 - _TMP761);
        _dst[1] = _TMP919;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP119 = 7.50000000E-01;
        } else {
            _TMP119 = 0.00000000E+00;
        } 
        _a0924 = float(_TMP119);
        _TMP923 = _TMP7.xyz + _a0924*(_TMP110 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP121 = 1.00000000E+00;
            } else {
                if (_haveShallowLine1) { 
                    _TMP122 = 2.50000000E-01;
                } else {
                    _TMP122 = 1.25000000E-01;
                } 
                _TMP121 = _TMP122;
            } 
            _TMP120 = _TMP121;
        } else {
            _TMP120 = 0.00000000E+00;
        } 
        _a0928 = float(_TMP120);
        _TMP927 = _TMP7.xyz + _a0928*(_TMP110 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP125 = 8.75000000E-01;
                } else {
                    _TMP125 = 1.00000000E+00;
                } 
                _TMP124 = _TMP125;
            } else {
                _TMP124 = 2.30674967E-01;
            } 
            _TMP123 = _TMP124;
        } else {
            _TMP123 = 0.00000000E+00;
        } 
        _a0932 = float(_TMP123);
        _TMP931 = _TMP7.xyz + _a0932*(_TMP110 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP127 = 1.00000000E+00;
            } else {
                _TMP127 = 8.63143384E-01;
            } 
            _TMP126 = _TMP127;
        } else {
            _TMP126 = 0.00000000E+00;
        } 
        _a0936 = float(_TMP126);
        _TMP935 = _TMP805 + _a0936*(_TMP110 - _TMP805);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP130 = 8.75000000E-01;
                } else {
                    _TMP130 = 1.00000000E+00;
                } 
                _TMP129 = _TMP130;
            } else {
                _TMP129 = 2.30674967E-01;
            } 
            _TMP128 = _TMP129;
        } else {
            _TMP128 = 0.00000000E+00;
        } 
        _a0940 = float(_TMP128);
        _TMP939 = _TMP773 + _a0940*(_TMP110 - _TMP773);
        _dst[9] = _TMP939;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP132 = 1.00000000E+00;
            } else {
                if (_haveSteepLine1) { 
                    _TMP133 = 2.50000000E-01;
                } else {
                    _TMP133 = 1.25000000E-01;
                } 
                _TMP132 = _TMP133;
            } 
            _TMP131 = _TMP132;
        } else {
            _TMP131 = 0.00000000E+00;
        } 
        _a0944 = float(_TMP131);
        _TMP943 = _TMP777 + _a0944*(_TMP110 - _TMP777);
        _dst[10] = _TMP943;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP134 = 7.50000000E-01;
        } else {
            _TMP134 = 0.00000000E+00;
        } 
        _a0948 = float(_TMP134);
        _TMP947 = _TMP781 + _a0948*(_TMP110 - _TMP781);
        _dst[11] = _TMP947;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP135 = 2.50000000E-01;
        } else {
            _TMP135 = 0.00000000E+00;
        } 
        _a0952 = float(_TMP135);
        _TMP951 = _TMP785 + _a0952*(_TMP110 - _TMP785);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP136 = 2.50000000E-01;
        } else {
            _TMP136 = 0.00000000E+00;
        } 
        _a0956 = float(_TMP136);
        _TMP955 = _TMP7.xyz + _a0956*(_TMP110 - _TMP7.xyz);
        _diff0960 = _TMP6.xyz - _TMP5.xyz;
        _Y0960 = dot(_diff0960, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0960 = 5.31519055E-01*(_diff0960.z - _Y0960);
        _Cr0960 = 6.78149998E-01*(_diff0960.x - _Y0960);
        _a0964 = _Y0960*_Y0960 + _Cb0960*_Cb0960 + _Cr0960*_Cr0960;
        _TMP254 = inversesqrt(_a0964);
        _TMP959 = 1.00000000E+00/_TMP254;
        _diff0968 = _TMP4.xyz - _TMP9.xyz;
        _Y0968 = dot(_diff0968, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0968 = 5.31519055E-01*(_diff0968.z - _Y0968);
        _Cr0968 = 6.78149998E-01*(_diff0968.x - _Y0968);
        _a0972 = _Y0968*_Y0968 + _Cb0968*_Cb0968 + _Cr0968*_Cr0968;
        _TMP254 = inversesqrt(_a0972);
        _TMP967 = 1.00000000E+00/_TMP254;
        _haveShallowLine1 = 2.20000005E+00*_TMP959 <= _TMP967 && _TMP303 != _TMP335 && _TMP307 != _TMP335;
        _haveSteepLine1 = 2.20000005E+00*_TMP967 <= _TMP959 && _TMP303 != _TMP319 && _TMP315 != _TMP319;
        _needBlend1 = _blendResult.x != 0;
        _diff0978 = _TMP7.xyz - _TMP5.xyz;
        _Y0978 = dot(_diff0978, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0978 = 5.31519055E-01*(_diff0978.z - _Y0978);
        _Cr0978 = 6.78149998E-01*(_diff0978.x - _Y0978);
        _a0982 = _Y0978*_Y0978 + _Cb0978*_Cb0978 + _Cr0978*_Cr0978;
        _TMP254 = inversesqrt(_a0982);
        _TMP977 = 1.00000000E+00/_TMP254;
        _TMP137 = _TMP977 < 1.17647059E-01;
        _diff0988 = _TMP7.xyz - _TMP9.xyz;
        _Y0988 = dot(_diff0988, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0988 = 5.31519055E-01*(_diff0988.z - _Y0988);
        _Cr0988 = 6.78149998E-01*(_diff0988.x - _Y0988);
        _a0992 = _Y0988*_Y0988 + _Cb0988*_Cb0988 + _Cr0988*_Cr0988;
        _TMP254 = inversesqrt(_a0992);
        _TMP987 = 1.00000000E+00/_TMP254;
        _TMP138 = _TMP987 < 1.17647059E-01;
        _diff0998 = _TMP5.xyz - _TMP4.xyz;
        _Y0998 = dot(_diff0998, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0998 = 5.31519055E-01*(_diff0998.z - _Y0998);
        _Cr0998 = 6.78149998E-01*(_diff0998.x - _Y0998);
        _a1002 = _Y0998*_Y0998 + _Cb0998*_Cb0998 + _Cr0998*_Cr0998;
        _TMP254 = inversesqrt(_a1002);
        _TMP997 = 1.00000000E+00/_TMP254;
        _TMP139 = _TMP997 < 1.17647059E-01;
        _diff1008 = _TMP4.xyz - _TMP3.xyz;
        _Y1008 = dot(_diff1008, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1008 = 5.31519055E-01*(_diff1008.z - _Y1008);
        _Cr1008 = 6.78149998E-01*(_diff1008.x - _Y1008);
        _a1012 = _Y1008*_Y1008 + _Cb1008*_Cb1008 + _Cr1008*_Cr1008;
        _TMP254 = inversesqrt(_a1012);
        _TMP1007 = 1.00000000E+00/_TMP254;
        _TMP140 = _TMP1007 < 1.17647059E-01;
        _diff1018 = _TMP3.xyz - _TMP6.xyz;
        _Y1018 = dot(_diff1018, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1018 = 5.31519055E-01*(_diff1018.z - _Y1018);
        _Cr1018 = 6.78149998E-01*(_diff1018.x - _Y1018);
        _a1022 = _Y1018*_Y1018 + _Cb1018*_Cb1018 + _Cr1018*_Cr1018;
        _TMP254 = inversesqrt(_a1022);
        _TMP1017 = 1.00000000E+00/_TMP254;
        _TMP141 = _TMP1017 < 1.17647059E-01;
        _diff1028 = _TMP6.xyz - _TMP9.xyz;
        _Y1028 = dot(_diff1028, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1028 = 5.31519055E-01*(_diff1028.z - _Y1028);
        _Cr1028 = 6.78149998E-01*(_diff1028.x - _Y1028);
        _a1032 = _Y1028*_Y1028 + _Cb1028*_Cb1028 + _Cr1028*_Cr1028;
        _TMP254 = inversesqrt(_a1032);
        _TMP1027 = 1.00000000E+00/_TMP254;
        _TMP142 = _TMP1027 < 1.17647059E-01;
        _diff1038 = _TMP7.xyz - _TMP3.xyz;
        _Y1038 = dot(_diff1038, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1038 = 5.31519055E-01*(_diff1038.z - _Y1038);
        _Cr1038 = 6.78149998E-01*(_diff1038.x - _Y1038);
        _a1042 = _Y1038*_Y1038 + _Cb1038*_Cb1038 + _Cr1038*_Cr1038;
        _TMP254 = inversesqrt(_a1042);
        _TMP1037 = 1.00000000E+00/_TMP254;
        _TMP143 = _TMP1037 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.x >= 2 || !(_blendResult.w != 0 && !_TMP137 || _blendResult.y != 0 && !_TMP138 || _TMP139 && _TMP140 && _TMP141 && _TMP142 && !_TMP143);
        _diff1046 = _TMP7.xyz - _TMP6.xyz;
        _Y1046 = dot(_diff1046, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1046 = 5.31519055E-01*(_diff1046.z - _Y1046);
        _Cr1046 = 6.78149998E-01*(_diff1046.x - _Y1046);
        _a1050 = _Y1046*_Y1046 + _Cb1046*_Cb1046 + _Cr1046*_Cr1046;
        _TMP254 = inversesqrt(_a1050);
        _TMP1045 = 1.00000000E+00/_TMP254;
        _diff1054 = _TMP7.xyz - _TMP4.xyz;
        _Y1054 = dot(_diff1054, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1054 = 5.31519055E-01*(_diff1054.z - _Y1054);
        _Cr1054 = 6.78149998E-01*(_diff1054.x - _Y1054);
        _a1058 = _Y1054*_Y1054 + _Cb1054*_Cb1054 + _Cr1054*_Cr1054;
        _TMP254 = inversesqrt(_a1058);
        _TMP1053 = 1.00000000E+00/_TMP254;
        if (_TMP1045 <= _TMP1053) { 
            _TMP144 = _TMP6.xyz;
        } else {
            _TMP144 = _TMP4.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP147 = 2.50000000E-01;
        } else {
            _TMP147 = 0.00000000E+00;
        } 
        _a1062 = float(_TMP147);
        _TMP1061 = _TMP7.xyz + _a1062*(_TMP144 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP150 = 6.66666687E-01;
                } else {
                    _TMP150 = 7.50000000E-01;
                } 
                _TMP149 = _TMP150;
            } else {
                if (_haveSteepLine1) { 
                    _TMP151 = 7.50000000E-01;
                } else {
                    _TMP151 = 1.25000000E-01;
                } 
                _TMP149 = _TMP151;
            } 
            _TMP148 = _TMP149;
        } else {
            _TMP148 = 0.00000000E+00;
        } 
        _a1066 = float(_TMP148);
        _TMP1065 = _TMP7.xyz + _a1066*(_TMP144 - _TMP7.xyz);
        _dst[6] = _TMP1065;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP152 = 2.50000000E-01;
        } else {
            _TMP152 = 0.00000000E+00;
        } 
        _a1070 = float(_TMP152);
        _TMP1069 = _TMP911 + _a1070*(_TMP144 - _TMP911);
        _dst[7] = _TMP1069;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP153 = 7.50000000E-01;
        } else {
            _TMP153 = 0.00000000E+00;
        } 
        _a1074 = float(_TMP153);
        _TMP1073 = _TMP7.xyz + _a1074*(_TMP144 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP155 = 1.00000000E+00;
            } else {
                if (_haveShallowLine1) { 
                    _TMP156 = 2.50000000E-01;
                } else {
                    _TMP156 = 1.25000000E-01;
                } 
                _TMP155 = _TMP156;
            } 
            _TMP154 = _TMP155;
        } else {
            _TMP154 = 0.00000000E+00;
        } 
        _a1078 = float(_TMP154);
        _TMP1077 = _TMP7.xyz + _a1078*(_TMP144 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP159 = 8.75000000E-01;
                } else {
                    _TMP159 = 1.00000000E+00;
                } 
                _TMP158 = _TMP159;
            } else {
                _TMP158 = 2.30674967E-01;
            } 
            _TMP157 = _TMP158;
        } else {
            _TMP157 = 0.00000000E+00;
        } 
        _a1082 = float(_TMP157);
        _TMP1081 = _TMP7.xyz + _a1082*(_TMP144 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP161 = 1.00000000E+00;
            } else {
                _TMP161 = 8.63143384E-01;
            } 
            _TMP160 = _TMP161;
        } else {
            _TMP160 = 0.00000000E+00;
        } 
        _a1086 = float(_TMP160);
        _TMP1085 = _TMP955 + _a1086*(_TMP144 - _TMP955);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP164 = 8.75000000E-01;
                } else {
                    _TMP164 = 1.00000000E+00;
                } 
                _TMP163 = _TMP164;
            } else {
                _TMP163 = 2.30674967E-01;
            } 
            _TMP162 = _TMP163;
        } else {
            _TMP162 = 0.00000000E+00;
        } 
        _a1090 = float(_TMP162);
        _TMP1089 = _TMP923 + _a1090*(_TMP144 - _TMP923);
        _dst[21] = _TMP1089;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP166 = 1.00000000E+00;
            } else {
                if (_haveSteepLine1) { 
                    _TMP167 = 2.50000000E-01;
                } else {
                    _TMP167 = 1.25000000E-01;
                } 
                _TMP166 = _TMP167;
            } 
            _TMP165 = _TMP166;
        } else {
            _TMP165 = 0.00000000E+00;
        } 
        _a1094 = float(_TMP165);
        _TMP1093 = _TMP927 + _a1094*(_TMP144 - _TMP927);
        _dst[22] = _TMP1093;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP168 = 7.50000000E-01;
        } else {
            _TMP168 = 0.00000000E+00;
        } 
        _a1098 = float(_TMP168);
        _TMP1097 = _TMP931 + _a1098*(_TMP144 - _TMP931);
        _dst[23] = _TMP1097;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP169 = 2.50000000E-01;
        } else {
            _TMP169 = 0.00000000E+00;
        } 
        _a1102 = float(_TMP169);
        _TMP1101 = _TMP935 + _a1102*(_TMP144 - _TMP935);
        _dst[24] = _TMP1101;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP170 = 2.50000000E-01;
        } else {
            _TMP170 = 0.00000000E+00;
        } 
        _a1106 = float(_TMP170);
        _TMP1105 = _TMP801 + _a1106*(_TMP144 - _TMP801);
        _diff1110 = _TMP10.xyz - _TMP3.xyz;
        _Y1110 = dot(_diff1110, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1110 = 5.31519055E-01*(_diff1110.z - _Y1110);
        _Cr1110 = 6.78149998E-01*(_diff1110.x - _Y1110);
        _a1114 = _Y1110*_Y1110 + _Cb1110*_Cb1110 + _Cr1110*_Cr1110;
        _TMP254 = inversesqrt(_a1114);
        _TMP1109 = 1.00000000E+00/_TMP254;
        _diff1118 = _TMP6.xyz - _TMP11.xyz;
        _Y1118 = dot(_diff1118, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1118 = 5.31519055E-01*(_diff1118.z - _Y1118);
        _Cr1118 = 6.78149998E-01*(_diff1118.x - _Y1118);
        _a1122 = _Y1118*_Y1118 + _Cb1118*_Cb1118 + _Cr1118*_Cr1118;
        _TMP254 = inversesqrt(_a1122);
        _TMP1117 = 1.00000000E+00/_TMP254;
        _haveShallowLine1 = 2.20000005E+00*_TMP1109 <= _TMP1117 && _TMP303 != _TMP327 && _TMP331 != _TMP327;
        _haveSteepLine1 = 2.20000005E+00*_TMP1117 <= _TMP1109 && _TMP303 != _TMP311 && _TMP307 != _TMP311;
        _needBlend1 = _blendResult.w != 0;
        _diff1128 = _TMP7.xyz - _TMP3.xyz;
        _Y1128 = dot(_diff1128, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1128 = 5.31519055E-01*(_diff1128.z - _Y1128);
        _Cr1128 = 6.78149998E-01*(_diff1128.x - _Y1128);
        _a1132 = _Y1128*_Y1128 + _Cb1128*_Cb1128 + _Cr1128*_Cr1128;
        _TMP254 = inversesqrt(_a1132);
        _TMP1127 = 1.00000000E+00/_TMP254;
        _TMP171 = _TMP1127 < 1.17647059E-01;
        _diff1138 = _TMP7.xyz - _TMP11.xyz;
        _Y1138 = dot(_diff1138, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1138 = 5.31519055E-01*(_diff1138.z - _Y1138);
        _Cr1138 = 6.78149998E-01*(_diff1138.x - _Y1138);
        _a1142 = _Y1138*_Y1138 + _Cb1138*_Cb1138 + _Cr1138*_Cr1138;
        _TMP254 = inversesqrt(_a1142);
        _TMP1137 = 1.00000000E+00/_TMP254;
        _TMP172 = _TMP1137 < 1.17647059E-01;
        _diff1148 = _TMP3.xyz - _TMP6.xyz;
        _Y1148 = dot(_diff1148, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1148 = 5.31519055E-01*(_diff1148.z - _Y1148);
        _Cr1148 = 6.78149998E-01*(_diff1148.x - _Y1148);
        _a1152 = _Y1148*_Y1148 + _Cb1148*_Cb1148 + _Cr1148*_Cr1148;
        _TMP254 = inversesqrt(_a1152);
        _TMP1147 = 1.00000000E+00/_TMP254;
        _TMP173 = _TMP1147 < 1.17647059E-01;
        _diff1158 = _TMP6.xyz - _TMP9.xyz;
        _Y1158 = dot(_diff1158, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1158 = 5.31519055E-01*(_diff1158.z - _Y1158);
        _Cr1158 = 6.78149998E-01*(_diff1158.x - _Y1158);
        _a1162 = _Y1158*_Y1158 + _Cb1158*_Cb1158 + _Cr1158*_Cr1158;
        _TMP254 = inversesqrt(_a1162);
        _TMP1157 = 1.00000000E+00/_TMP254;
        _TMP174 = _TMP1157 < 1.17647059E-01;
        _diff1168 = _TMP9.xyz - _TMP10.xyz;
        _Y1168 = dot(_diff1168, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1168 = 5.31519055E-01*(_diff1168.z - _Y1168);
        _Cr1168 = 6.78149998E-01*(_diff1168.x - _Y1168);
        _a1172 = _Y1168*_Y1168 + _Cb1168*_Cb1168 + _Cr1168*_Cr1168;
        _TMP254 = inversesqrt(_a1172);
        _TMP1167 = 1.00000000E+00/_TMP254;
        _TMP175 = _TMP1167 < 1.17647059E-01;
        _diff1178 = _TMP10.xyz - _TMP11.xyz;
        _Y1178 = dot(_diff1178, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1178 = 5.31519055E-01*(_diff1178.z - _Y1178);
        _Cr1178 = 6.78149998E-01*(_diff1178.x - _Y1178);
        _a1182 = _Y1178*_Y1178 + _Cb1178*_Cb1178 + _Cr1178*_Cr1178;
        _TMP254 = inversesqrt(_a1182);
        _TMP1177 = 1.00000000E+00/_TMP254;
        _TMP176 = _TMP1177 < 1.17647059E-01;
        _diff1188 = _TMP7.xyz - _TMP9.xyz;
        _Y1188 = dot(_diff1188, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1188 = 5.31519055E-01*(_diff1188.z - _Y1188);
        _Cr1188 = 6.78149998E-01*(_diff1188.x - _Y1188);
        _a1192 = _Y1188*_Y1188 + _Cb1188*_Cb1188 + _Cr1188*_Cr1188;
        _TMP254 = inversesqrt(_a1192);
        _TMP1187 = 1.00000000E+00/_TMP254;
        _TMP177 = _TMP1187 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.w >= 2 || !(_blendResult.z != 0 && !_TMP171 || _blendResult.x != 0 && !_TMP172 || _TMP173 && _TMP174 && _TMP175 && _TMP176 && !_TMP177);
        _diff1196 = _TMP7.xyz - _TMP10.xyz;
        _Y1196 = dot(_diff1196, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1196 = 5.31519055E-01*(_diff1196.z - _Y1196);
        _Cr1196 = 6.78149998E-01*(_diff1196.x - _Y1196);
        _a1200 = _Y1196*_Y1196 + _Cb1196*_Cb1196 + _Cr1196*_Cr1196;
        _TMP254 = inversesqrt(_a1200);
        _TMP1195 = 1.00000000E+00/_TMP254;
        _diff1204 = _TMP7.xyz - _TMP6.xyz;
        _Y1204 = dot(_diff1204, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1204 = 5.31519055E-01*(_diff1204.z - _Y1204);
        _Cr1204 = 6.78149998E-01*(_diff1204.x - _Y1204);
        _a1208 = _Y1204*_Y1204 + _Cb1204*_Cb1204 + _Cr1204*_Cr1204;
        _TMP254 = inversesqrt(_a1208);
        _TMP1203 = 1.00000000E+00/_TMP254;
        if (_TMP1195 <= _TMP1203) { 
            _TMP178 = _TMP10.xyz;
        } else {
            _TMP178 = _TMP6.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP181 = 2.50000000E-01;
        } else {
            _TMP181 = 0.00000000E+00;
        } 
        _a1212 = float(_TMP181);
        _TMP1211 = _TMP769 + _a1212*(_TMP178 - _TMP769);
        _dst[3] = _TMP1211;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP184 = 6.66666687E-01;
                } else {
                    _TMP184 = 7.50000000E-01;
                } 
                _TMP183 = _TMP184;
            } else {
                if (_haveSteepLine1) { 
                    _TMP185 = 7.50000000E-01;
                } else {
                    _TMP185 = 1.25000000E-01;
                } 
                _TMP183 = _TMP185;
            } 
            _TMP182 = _TMP183;
        } else {
            _TMP182 = 0.00000000E+00;
        } 
        _a1216 = float(_TMP182);
        _TMP1215 = _TMP7.xyz + _a1216*(_TMP178 - _TMP7.xyz);
        _dst[4] = _TMP1215;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP186 = 2.50000000E-01;
        } else {
            _TMP186 = 0.00000000E+00;
        } 
        _a1220 = float(_TMP186);
        _TMP1219 = _TMP1061 + _a1220*(_TMP178 - _TMP1061);
        _dst[5] = _TMP1219;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP187 = 7.50000000E-01;
        } else {
            _TMP187 = 0.00000000E+00;
        } 
        _a1224 = float(_TMP187);
        _TMP1223 = _TMP789 + _a1224*(_TMP178 - _TMP789);
        _dst[13] = _TMP1223;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP189 = 1.00000000E+00;
            } else {
                if (_haveShallowLine1) { 
                    _TMP190 = 2.50000000E-01;
                } else {
                    _TMP190 = 1.25000000E-01;
                } 
                _TMP189 = _TMP190;
            } 
            _TMP188 = _TMP189;
        } else {
            _TMP188 = 0.00000000E+00;
        } 
        _a1228 = float(_TMP188);
        _TMP1227 = _TMP793 + _a1228*(_TMP178 - _TMP793);
        _dst[14] = _TMP1227;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP193 = 8.75000000E-01;
                } else {
                    _TMP193 = 1.00000000E+00;
                } 
                _TMP192 = _TMP193;
            } else {
                _TMP192 = 2.30674967E-01;
            } 
            _TMP191 = _TMP192;
        } else {
            _TMP191 = 0.00000000E+00;
        } 
        _a1232 = float(_TMP191);
        _TMP1231 = _TMP797 + _a1232*(_TMP178 - _TMP797);
        _dst[15] = _TMP1231;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP195 = 1.00000000E+00;
            } else {
                _TMP195 = 8.63143384E-01;
            } 
            _TMP194 = _TMP195;
        } else {
            _TMP194 = 0.00000000E+00;
        } 
        _a1236 = float(_TMP194);
        _TMP1235 = _TMP1105 + _a1236*(_TMP178 - _TMP1105);
        _dst[16] = _TMP1235;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (!_haveShallowLine1 && !_haveSteepLine1) { 
                    _TMP198 = 8.75000000E-01;
                } else {
                    _TMP198 = 1.00000000E+00;
                } 
                _TMP197 = _TMP198;
            } else {
                _TMP197 = 2.30674967E-01;
            } 
            _TMP196 = _TMP197;
        } else {
            _TMP196 = 0.00000000E+00;
        } 
        _a1240 = float(_TMP196);
        _TMP1239 = _TMP1073 + _a1240*(_TMP178 - _TMP1073);
        _dst[17] = _TMP1239;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP200 = 1.00000000E+00;
            } else {
                if (_haveSteepLine1) { 
                    _TMP201 = 2.50000000E-01;
                } else {
                    _TMP201 = 1.25000000E-01;
                } 
                _TMP200 = _TMP201;
            } 
            _TMP199 = _TMP200;
        } else {
            _TMP199 = 0.00000000E+00;
        } 
        _a1244 = float(_TMP199);
        _TMP1243 = _TMP1077 + _a1244*(_TMP178 - _TMP1077);
        _dst[18] = _TMP1243;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP202 = 7.50000000E-01;
        } else {
            _TMP202 = 0.00000000E+00;
        } 
        _a1248 = float(_TMP202);
        _TMP1247 = _TMP1081 + _a1248*(_TMP178 - _TMP1081);
        _dst[19] = _TMP1247;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP203 = 2.50000000E-01;
        } else {
            _TMP203 = 0.00000000E+00;
        } 
        _a1252 = float(_TMP203);
        _TMP1251 = _TMP1085 + _a1252*(_TMP178 - _TMP1085);
        _dst[20] = _TMP1251;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP204 = 2.50000000E-01;
        } else {
            _TMP204 = 0.00000000E+00;
        } 
        _a1256 = float(_TMP204);
        _TMP1255 = _TMP951 + _a1256*(_TMP178 - _TMP951);
        _dst[12] = _TMP1255;
    } 
    _TMP205 = float((_f.x >= 4.00000006E-01));
    _TMP1267 = _dst[21] + _TMP205*(_dst[22] - _dst[21]);
    _TMP207 = float((_f.x >= 8.00000012E-01));
    _TMP1273 = _dst[23] + _TMP207*(_dst[24] - _dst[23]);
    _TMP209 = float((_f.x >= 6.00000024E-01));
    _TMP1279 = _TMP1267 + _TMP209*(_TMP1273 - _TMP1267);
    _TMP211 = float((_f.x >= 2.00000003E-01));
    _TMP1285 = _dst[20] + _TMP211*(_TMP1279 - _dst[20]);
    _TMP213 = float((_f.x >= 4.00000006E-01));
    _TMP1291 = _dst[6] + _TMP213*(_dst[7] - _dst[6]);
    _TMP215 = float((_f.x >= 8.00000012E-01));
    _TMP1297 = _dst[8] + _TMP215*(_dst[9] - _dst[8]);
    _TMP217 = float((_f.x >= 6.00000024E-01));
    _TMP1303 = _TMP1291 + _TMP217*(_TMP1297 - _TMP1291);
    _TMP219 = float((_f.x >= 2.00000003E-01));
    _TMP1309 = _dst[19] + _TMP219*(_TMP1303 - _dst[19]);
    _TMP221 = float((_f.x >= 4.00000006E-01));
    _TMP1315 = _dst[5] + _TMP221*(_TMP7.xyz - _dst[5]);
    _TMP223 = float((_f.x >= 8.00000012E-01));
    _TMP1321 = _dst[1] + _TMP223*(_dst[10] - _dst[1]);
    _TMP225 = float((_f.x >= 6.00000024E-01));
    _TMP1327 = _TMP1315 + _TMP225*(_TMP1321 - _TMP1315);
    _TMP227 = float((_f.x >= 2.00000003E-01));
    _TMP1333 = _dst[18] + _TMP227*(_TMP1327 - _dst[18]);
    _TMP229 = float((_f.y >= 4.00000006E-01));
    _TMP1339 = _TMP1309 + _TMP229*(_TMP1333 - _TMP1309);
    _TMP231 = float((_f.x >= 4.00000006E-01));
    _TMP1345 = _dst[4] + _TMP231*(_dst[3] - _dst[4]);
    _TMP233 = float((_f.x >= 8.00000012E-01));
    _TMP1351 = _dst[2] + _TMP233*(_dst[11] - _dst[2]);
    _TMP235 = float((_f.x >= 6.00000024E-01));
    _TMP1357 = _TMP1345 + _TMP235*(_TMP1351 - _TMP1345);
    _TMP237 = float((_f.x >= 2.00000003E-01));
    _TMP1363 = _dst[17] + _TMP237*(_TMP1357 - _dst[17]);
    _TMP239 = float((_f.x >= 4.00000006E-01));
    _TMP1369 = _dst[15] + _TMP239*(_dst[14] - _dst[15]);
    _TMP241 = float((_f.x >= 8.00000012E-01));
    _TMP1375 = _dst[13] + _TMP241*(_dst[12] - _dst[13]);
    _TMP243 = float((_f.x >= 6.00000024E-01));
    _TMP1381 = _TMP1369 + _TMP243*(_TMP1375 - _TMP1369);
    _TMP245 = float((_f.x >= 2.00000003E-01));
    _TMP1387 = _dst[16] + _TMP245*(_TMP1381 - _dst[16]);
    _TMP247 = float((_f.y >= 8.00000012E-01));
    _TMP1393 = _TMP1363 + _TMP247*(_TMP1387 - _TMP1363);
    _TMP249 = float((_f.y >= 6.00000024E-01));
    _TMP1399 = _TMP1339 + _TMP249*(_TMP1393 - _TMP1339);
    _TMP251 = float((_f.y >= 2.00000003E-01));
    _TMP1405 = _TMP1285 + _TMP251*(_TMP1399 - _TMP1285);
    _ret_0 = vec4(_TMP1405.x, _TMP1405.y, _TMP1405.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
