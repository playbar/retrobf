// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord;
};
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord = TexCoord.xy;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color2;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color2;
    vec2 _texCoord;
};
vec4 _ret_0;
vec3 _TMP54;
vec3 _TMP83;
vec3 _TMP53;
float _TMP52;
vec3 _TMP82;
vec3 _TMP81;
vec3 _TMP50;
float _TMP49;
vec3 _TMP80;
vec3 _TMP79;
vec3 _TMP47;
vec3 _TMP45;
float _TMP46;
float _TMP44;
float _TMP32;
float _TMP84;
float _TMP31;
float _TMP30;
float _TMP29;
float _TMP28;
bool _TMP27;
bool _TMP26;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec2 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0095;
bvec2 _a0099;
vec2 _x0101;
vec2 _c0103;
vec2 _c0105;
vec2 _c0107;
vec2 _c0109;
vec2 _c0111;
vec2 _c0113;
vec2 _c0115;
vec2 _c0119;
vec2 _c0121;
vec2 _c0123;
vec2 _c0125;
vec2 _c0127;
vec2 _c0129;
vec2 _c0131;
vec2 _c0133;
vec2 _c0135;
vec2 _c0137;
vec2 _c0139;
vec2 _c0141;
vec2 _c0143;
vec2 _c0145;
vec2 _c0147;
vec2 _c0149;
vec4 _r0153;
vec4 _r0165;
bvec3 _a0175;
bvec3 _a0177;
float _TMP178;
float _TMP182;
float _TMP186;
float _TMP190;
float _TMP194;
float _TMP198;
float _TMP202;
float _TMP206;
float _TMP210;
float _TMP218;
float _TMP226;
float _TMP234;
float _TMP244;
float _a0247;
float _TMP248;
float _a0251;
float _TMP252;
float _a0255;
float _TMP256;
float _a0259;
float _TMP276;
float _a0279;
float _TMP280;
float _a0283;
float _TMP284;
float _a0287;
float _TMP298;
float _a0301;
float _TMP302;
float _a0305;
float _TMP306;
float _a0309;
float _TMP310;
float _a0313;
float _TMP330;
float _a0333;
float _TMP334;
float _a0337;
float _TMP338;
float _a0341;
float _TMP352;
float _a0355;
float _TMP356;
float _a0359;
float _TMP360;
float _a0363;
float _TMP364;
float _a0367;
float _TMP368;
float _a0371;
float _TMP372;
float _a0375;
float _TMP394;
float _a0397;
float _TMP398;
float _a0401;
float _TMP402;
float _a0405;
float _TMP406;
float _a0409;
float _TMP410;
float _a0413;
float _TMP414;
float _a0417;
float _x0439;
float _TMP440;
vec3 _r0447;
vec3 _r0449;
vec3 _r0451;
vec3 _r0453;
float _t0529;
vec3 _TMP530;
vec3 _a0541;
vec3 _b0541;
vec3 _TMP542;
vec3 _a0553;
vec3 _b0553;
vec3 _TMP554;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _tex;
    vec2 _g1;
    vec2 _g2;
    bool _block_3d;
    float _d_edge;
    float _hv_edge;
    float _edge_strength;
    vec3 _color1;
    vec3 _min_sample;
    vec3 _max_sample;
    vec3 _TMP89[4];
    vec3 _TMP90[4];
    _x0095 = (TEX0.xy*TextureSize)/2.00000000E+00;
    _TMP0 = fract(_x0095);
    _a0099 = bvec2(_TMP0.x < 5.00000000E-01, _TMP0.y < 5.00000000E-01);
    if (_a0099.x || _a0099.y) { 
        _ret_0 = COMPAT_TEXTURE(Texture, TEX0.xy);
        FragColor = _ret_0;
        return;
    } 
    _x0101 = (TEX0.xy*TextureSize)/2.00000000E+00;
    _TMP1 = floor(_x0101);
    _tex = ((_TMP1 + vec2( 5.00000000E-01, 5.00000000E-01))*2.00000000E+00)/TextureSize;
    _g1 = vec2(2.00000000E+00/TextureSize.x, 0.00000000E+00);
    _g2 = vec2(0.00000000E+00, 2.00000000E+00/TextureSize.y);
    _c0103 = (TEX0.xy - _g1) - _g2;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0103);
    _c0105 = (TEX0.xy + 2.00000000E+00*_g1) - _g2;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0105);
    _c0107 = (TEX0.xy - _g1) + 2.00000000E+00*_g2;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0107);
    _c0109 = TEX0.xy + 2.00000000E+00*_g1 + 2.00000000E+00*_g2;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0109);
    _c0111 = TEX0.xy - _g2;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0111);
    _c0113 = (TEX0.xy + _g1) - _g2;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0113);
    _c0115 = TEX0.xy - _g1;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0115);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0119 = TEX0.xy + _g1;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0119);
    _c0121 = (TEX0.xy - _g1) + _g2;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0121);
    _c0123 = TEX0.xy + _g2;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0123);
    _c0125 = TEX0.xy + _g1 + _g2;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0125);
    _c0127 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0127);
    _c0129 = TEX0.xy + _g2 + 2.00000000E+00*_g1;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0129);
    _c0131 = TEX0.xy + 2.00000000E+00*_g2;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0131);
    _c0133 = TEX0.xy + 2.00000000E+00*_g2 + _g1;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0133);
    _c0135 = _tex + _g1 + 2.50000000E-01*_g1 + 2.50000000E-01*_g2;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0135);
    _c0137 = (_tex + _g1 + 2.50000000E-01*_g1) - 2.50000000E-01*_g2;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0137);
    _c0139 = ((_tex + _g1) - 2.50000000E-01*_g1) - 2.50000000E-01*_g2;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0139);
    _c0141 = ((_tex + _g1) - 2.50000000E-01*_g1) + 2.50000000E-01*_g2;
    _TMP21 = COMPAT_TEXTURE(Texture, _c0141);
    _c0143 = _tex + 2.50000000E-01*_g1 + 2.50000000E-01*_g2 + _g2;
    _TMP22 = COMPAT_TEXTURE(Texture, _c0143);
    _c0145 = ((_tex + 2.50000000E-01*_g1) - 2.50000000E-01*_g2) + _g2;
    _TMP23 = COMPAT_TEXTURE(Texture, _c0145);
    _c0147 = ((_tex - 2.50000000E-01*_g1) - 2.50000000E-01*_g2) + _g2;
    _TMP24 = COMPAT_TEXTURE(Texture, _c0147);
    _c0149 = (_tex - 2.50000000E-01*_g1) + 2.50000000E-01*_g2 + _g2;
    _TMP25 = COMPAT_TEXTURE(Texture, _c0149);
    _r0153.x = dot(_TMP18.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0153.y = dot(_TMP19.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0153.z = dot(_TMP20.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0153.w = dot(_TMP21.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0165.x = dot(_TMP22.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0165.y = dot(_TMP23.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0165.z = dot(_TMP24.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0165.w = dot(_TMP25.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _a0175 = bvec3(_r0153.x == _r0153.y, _r0153.y == _r0153.z, _r0153.z == _r0153.w);
    _TMP26 = _a0175.x && _a0175.y && _a0175.z;
    _a0177 = bvec3(_r0165.x == _r0165.y, _r0165.y == _r0165.z, _r0165.z == _r0165.w);
    _TMP27 = _a0177.x && _a0177.y && _a0177.z;
    _block_3d = _TMP26 && _TMP27;
    _TMP178 = dot(_TMP6.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP182 = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP186 = dot(_TMP8.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP190 = dot(_TMP9.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP194 = dot(_TMP10.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP198 = dot(_TMP11.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP202 = dot(_TMP12.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP206 = dot(_TMP13.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP210 = dot(_TMP15.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP218 = dot(_TMP17.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP226 = dot(_TMP16.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP234 = dot(_TMP14.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _a0247 = _TMP190 - _TMP182;
    _TMP244 = abs(_a0247);
    _a0251 = _TMP190 - _TMP198;
    _TMP248 = abs(_a0251);
    _a0255 = _TMP206 - _TMP226;
    _TMP252 = abs(_a0255);
    _a0259 = _TMP206 - _TMP234;
    _TMP256 = abs(_a0259);
    _a0279 = _TMP202 - _TMP194;
    _TMP276 = abs(_a0279);
    _a0283 = _TMP198 - _TMP182;
    _TMP280 = abs(_a0283);
    _a0287 = _TMP226 - _TMP234;
    _TMP284 = abs(_a0287);
    _TMP28 = _TMP244 + _TMP248 + _TMP252 + _TMP256 + 2.00000000E+00*_TMP276 + -(_TMP280 + _TMP284);
    _a0301 = _TMP194 - _TMP210;
    _TMP298 = abs(_a0301);
    _a0305 = _TMP194 - _TMP178;
    _TMP302 = abs(_a0305);
    _a0309 = _TMP202 - _TMP186;
    _TMP306 = abs(_a0309);
    _a0313 = _TMP202 - _TMP218;
    _TMP310 = abs(_a0313);
    _a0333 = _TMP190 - _TMP206;
    _TMP330 = abs(_a0333);
    _a0337 = _TMP178 - _TMP210;
    _TMP334 = abs(_a0337);
    _a0341 = _TMP186 - _TMP218;
    _TMP338 = abs(_a0341);
    _TMP29 = _TMP298 + _TMP302 + _TMP306 + _TMP310 + 2.00000000E+00*_TMP330 + -(_TMP334 + _TMP338);
    _d_edge = _TMP28 - _TMP29;
    _a0355 = _TMP194 - _TMP206;
    _TMP352 = abs(_a0355);
    _a0359 = _TMP190 - _TMP202;
    _TMP356 = abs(_a0359);
    _a0363 = _TMP194 - _TMP182;
    _TMP360 = abs(_a0363);
    _a0367 = _TMP206 - _TMP218;
    _TMP364 = abs(_a0367);
    _a0371 = _TMP190 - _TMP178;
    _TMP368 = abs(_a0371);
    _a0375 = _TMP202 - _TMP226;
    _TMP372 = abs(_a0375);
    _TMP30 = 2.00000000E+00*(_TMP352 + _TMP356) + _TMP360 + _TMP364 + _TMP368 + _TMP372;
    _a0397 = _TMP190 - _TMP194;
    _TMP394 = abs(_a0397);
    _a0401 = _TMP202 - _TMP206;
    _TMP398 = abs(_a0401);
    _a0405 = _TMP190 - _TMP186;
    _TMP402 = abs(_a0405);
    _a0409 = _TMP194 - _TMP234;
    _TMP406 = abs(_a0409);
    _a0413 = _TMP202 - _TMP198;
    _TMP410 = abs(_a0413);
    _a0417 = _TMP206 - _TMP210;
    _TMP414 = abs(_a0417);
    _TMP31 = 2.00000000E+00*(_TMP394 + _TMP398) + _TMP402 + _TMP406 + _TMP410 + _TMP414;
    _hv_edge = _TMP30 - _TMP31;
    _TMP32 = abs(_d_edge);
    _x0439 = _TMP32/9.99999997E-07;
    _TMP84 = min(1.00000000E+00, _x0439);
    _TMP440 = max(0.00000000E+00, _TMP84);
    _edge_strength = _TMP440*_TMP440*(3.00000000E+00 - 2.00000000E+00*_TMP440);
    _r0447 = 5.00000000E-01*_TMP12.xyz;
    _r0447 = _r0447 + 5.00000000E-01*_TMP10.xyz;
    _r0449 = 5.00000000E-01*_TMP9.xyz;
    _r0449 = _r0449 + 5.00000000E-01*_TMP13.xyz;
    _TMP90[1] = _TMP9.xyz + _TMP12.xyz;
    _TMP90[2] = _TMP10.xyz + _TMP13.xyz;
    _r0451 = 2.50000000E-01*_TMP90[1];
    _r0451 = _r0451 + 2.50000000E-01*_TMP90[2];
    _TMP89[1] = _TMP10.xyz + _TMP9.xyz;
    _TMP89[2] = _TMP13.xyz + _TMP12.xyz;
    _r0453 = 2.50000000E-01*_TMP89[1];
    _r0453 = _r0453 + 2.50000000E-01*_TMP89[2];
    _TMP44 = float((_d_edge >= 0.00000000E+00));
    _TMP45 = _r0447 + _TMP44*(_r0449 - _r0447);
    _TMP46 = float((_hv_edge >= 0.00000000E+00));
    _TMP47 = _r0451 + _TMP46*(_r0453 - _r0451);
    _t0529 = 1.00000000E+00 - _edge_strength;
    _color1 = _TMP45 + _t0529*(_TMP47 - _TMP45);
    _TMP79 = min(_TMP12.xyz, _TMP13.xyz);
    _TMP80 = min(_TMP10.xyz, _TMP79);
    _TMP530 = min(_TMP9.xyz, _TMP80);
    _TMP49 = float((_d_edge >= 0.00000000E+00));
    _a0541 = (_TMP4.xyz - _TMP12.xyz)*(_TMP10.xyz - _TMP3.xyz);
    _b0541 = (_TMP2.xyz - _TMP9.xyz)*(_TMP13.xyz - _TMP5.xyz);
    _TMP50 = _a0541 + _TMP49*(_b0541 - _a0541);
    _min_sample = _TMP530 + _TMP50;
    _TMP81 = max(_TMP12.xyz, _TMP13.xyz);
    _TMP82 = max(_TMP10.xyz, _TMP81);
    _TMP542 = max(_TMP9.xyz, _TMP82);
    _TMP52 = float((_d_edge >= 0.00000000E+00));
    _a0553 = (_TMP4.xyz - _TMP12.xyz)*(_TMP10.xyz - _TMP3.xyz);
    _b0553 = (_TMP2.xyz - _TMP9.xyz)*(_TMP13.xyz - _TMP5.xyz);
    _TMP53 = _a0553 + _TMP52*(_b0553 - _a0553);
    _max_sample = _TMP542 - _TMP53;
    _TMP83 = min(_max_sample, _color1);
    _TMP554 = max(_min_sample, _TMP83);
    if (_block_3d) { 
        _TMP54 = _TMP554;
    } else {
        _TMP54 = _TMP9.xyz;
    } 
    _ret_0 = vec4(_TMP54.x, _TMP54.y, _TMP54.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
