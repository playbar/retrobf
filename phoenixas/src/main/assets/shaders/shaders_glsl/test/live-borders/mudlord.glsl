// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _oColor = COLOR;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0005;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
float _TMP7;
float _TMP8;
float _TMP6;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP2;
float _TMP1;
float _TMP0;
input_dummy _IN1;
float _a0013;
float _a0015;
float _a0017;
float _a0019;
float _a0021;
float _a0023;
vec2 _a0025;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _sp;
    vec2 _p;
    vec2 _i;
    float _c;
    float _t;
    vec3 _TMP11;
    _sp = TEX0.xy*(TextureSize.xy/InputSize.xy);
    _p = _sp*1.00000000E+01 - vec2( 1.00000000E+01, 1.00000000E+01);
    _t = 9.99999940E-02*float(FrameCount)*-2.00000000E+00;
    _a0013 = _t - _p.x;
    _TMP0 = cos(_a0013);
    _a0015 = _t + _p.y;
    _TMP1 = sin(_a0015);
    _a0017 = _t - _p.y;
    _TMP2 = sin(_a0017);
    _a0019 = _t + _p.x;
    _TMP3 = cos(_a0019);
    _i = _p + vec2(_TMP0 + _TMP1, _TMP2 + _TMP3);
    _a0021 = _i.x + _t;
    _TMP4 = sin(_a0021);
    _a0023 = _i.y + _t;
    _TMP5 = cos(_a0023);
    _a0025 = vec2(_p.x/(_TMP4/1.00000001E-01), _p.y/(_TMP5/1.00000001E-01));
    _TMP6 = length(_a0025);
    _c = 1.00000000E+00 + 1.20000005E+00/_TMP6;
    _TMP8 = inversesqrt(_c);
    _TMP7 = 1.00000000E+00/_TMP8;
    _c = 2.00000000E+00 - _TMP7;
    _TMP11 = vec3(_c*_c*_c*_c, _c*_c*_c*_c, _c*_c*_c*_c);
    _ret_0 = vec4(_TMP11.x, _TMP11.y, _TMP11.z, 1.00000000E+00) + vec4( 0.00000000E+00, 3.00000012E-01, 5.00000000E-01, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
