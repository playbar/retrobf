// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = 1.00000000E+00/TextureSize;
    _OUT._t1 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t2 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t3 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
};
float _TMP1;
float _TMP4;
float _TMP3;
float _TMP2;
float _TMP0;
uniform sampler2D Texture;
float _diff0025;
vec2 _a0025;
float _wght10025;
vec2 _b0025;
float _a0027;
float _TMP32;
float _x0033;
float _diff0039;
vec2 _a0039;
float _wght10039;
vec2 _b0039;
float _a0041;
float _TMP46;
float _x0047;
float _diff0053;
vec2 _a0053;
float _wght10053;
vec2 _b0053;
float _a0055;
float _TMP60;
float _x0061;
float _diff0067;
vec2 _a0067;
float _wght10067;
vec2 _b0067;
float _a0069;
float _TMP74;
float _x0075;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _A;
    vec4 _B;
    vec4 _D;
    vec4 _E;
    vec4 _F;
    vec4 _G;
    vec4 _H;
    vec4 _I;
    vec4 _res;
    _A = COMPAT_TEXTURE(Texture, TEX1.xw);
    _B = COMPAT_TEXTURE(Texture, TEX1.yw);
    _D = COMPAT_TEXTURE(Texture, TEX2.xw);
    _E = COMPAT_TEXTURE(Texture, TEX2.yw);
    _F = COMPAT_TEXTURE(Texture, TEX2.zw);
    _G = COMPAT_TEXTURE(Texture, TEX3.xw);
    _H = COMPAT_TEXTURE(Texture, TEX3.yw);
    _I = COMPAT_TEXTURE(Texture, TEX3.zw);
    _a0025 = vec2(_D.w, _E.y);
    _b0025 = vec2(_A.w, _D.y);
    _diff0025 = _a0025.x - _a0025.y;
    _a0027 = 5.00000000E-01 - _D.z;
    _TMP0 = max(_a0027, 0.00000000E+00);
    _wght10025 = _TMP0/5.00000000E-01;
    _TMP2 = min(_a0025.x, _b0025.x);
    _TMP3 = min(_a0025.y, _b0025.y);
    if (_TMP2 + _a0025.x > _TMP3 + _a0025.y) { 
        _TMP1 = _diff0025;
    } else {
        _TMP1 = -_diff0025;
    } 
    _x0033 = (1.00000000E+00 - _D.z) + _TMP1;
    _TMP4 = min(1.00000000E+00, _x0033);
    _TMP32 = max(0.00000000E+00, _TMP4);
    _res.x = _wght10025*_TMP32*_a0025.x*_a0025.y;
    _a0039 = vec2(_E.w, _E.y);
    _b0039 = vec2(_B.w, _F.y);
    _diff0039 = _a0039.x - _a0039.y;
    _a0041 = 5.00000000E-01 - _F.x;
    _TMP0 = max(_a0041, 0.00000000E+00);
    _wght10039 = _TMP0/5.00000000E-01;
    _TMP2 = min(_a0039.x, _b0039.x);
    _TMP3 = min(_a0039.y, _b0039.y);
    if (_TMP2 + _a0039.x > _TMP3 + _a0039.y) { 
        _TMP1 = _diff0039;
    } else {
        _TMP1 = -_diff0039;
    } 
    _x0047 = (1.00000000E+00 - _F.x) + _TMP1;
    _TMP4 = min(1.00000000E+00, _x0047);
    _TMP46 = max(0.00000000E+00, _TMP4);
    _res.y = _wght10039*_TMP46*_a0039.x*_a0039.y;
    _a0053 = vec2(_E.w, _H.y);
    _b0053 = vec2(_H.w, _I.y);
    _diff0053 = _a0053.x - _a0053.y;
    _a0055 = 5.00000000E-01 - _H.z;
    _TMP0 = max(_a0055, 0.00000000E+00);
    _wght10053 = _TMP0/5.00000000E-01;
    _TMP2 = min(_a0053.x, _b0053.x);
    _TMP3 = min(_a0053.y, _b0053.y);
    if (_TMP2 + _a0053.x > _TMP3 + _a0053.y) { 
        _TMP1 = _diff0053;
    } else {
        _TMP1 = -_diff0053;
    } 
    _x0061 = (1.00000000E+00 - _H.z) + _TMP1;
    _TMP4 = min(1.00000000E+00, _x0061);
    _TMP60 = max(0.00000000E+00, _TMP4);
    _res.z = _wght10053*_TMP60*_a0053.x*_a0053.y;
    _a0067 = vec2(_D.w, _H.y);
    _b0067 = vec2(_G.w, _G.y);
    _diff0067 = _a0067.x - _a0067.y;
    _a0069 = 5.00000000E-01 - _H.x;
    _TMP0 = max(_a0069, 0.00000000E+00);
    _wght10067 = _TMP0/5.00000000E-01;
    _TMP2 = min(_a0067.x, _b0067.x);
    _TMP3 = min(_a0067.y, _b0067.y);
    if (_TMP2 + _a0067.x > _TMP3 + _a0067.y) { 
        _TMP1 = _diff0067;
    } else {
        _TMP1 = -_diff0067;
    } 
    _x0075 = (1.00000000E+00 - _H.x) + _TMP1;
    _TMP4 = min(1.00000000E+00, _x0075);
    _TMP74 = max(0.00000000E+00, _TMP4);
    _res.w = _wght10067*_TMP74*_a0067.x*_a0067.y;
    FragColor = _res;
    return;
} 
#endif
