// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _color1;
};
vec4 _oPosition1;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    vec2 _shift;
    vec2 _overscan_coord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _oColor = COLOR;
    _shift = (5.00000000E-01*InputSize)/TextureSize;
    _overscan_coord = (TexCoord.xy - _shift) + _shift;
    _otexCoord = _overscan_coord;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _overscan_coord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _color;
};
vec4 _ret_0;
vec3 _TMP14;
vec3 _TMP2;
vec3 _TMP1;
vec3 _TMP13;
vec3 _TMP11;
float _TMP10;
float _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP0;
float _TMP21;
float _TMP20;
float _TMP19;
float _TMP18;
uniform sampler2D Texture;
input_dummy _IN1;
float _x0033;
float _c0035;
float _a0037;
float _d0065;
float _a0069;
vec3 _p0071;
vec3 _x0073;
vec3 _a0075;
vec3 _TMP76;
vec3 _x0077;
vec3 _TMP84;
vec3 _TMP90;
vec3 _x0091;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _fragcoord;
    vec3 _conColor;
    _a0037 = float(FrameCount)/8.00000000E+02;
    _TMP18 = abs(_a0037);
    _TMP19 = fract(_TMP18);
    _TMP20 = abs(8.00000000E+02);
    _c0035 = _TMP19*_TMP20;
    if (float(FrameCount) < 0.00000000E+00) { 
        _TMP21 = -_c0035;
    } else {
        _TMP21 = _c0035;
    } 
    _x0033 = (TEX0.x + 4.00000000E+00)*(TEX0.y + 4.00000000E+00)*(_TMP21 + 1.00000000E+01)*1.00000000E+01;
    if (_x0033 < 0.00000000E+00) { 
    } 
    _fragcoord = TEX0.xy*(TextureSize.xy/InputSize.xy);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    if (_TMP0.y < _TMP0.z) { 
        _TMP7 = vec4(_TMP0.z, _TMP0.y, -1.00000000E+00, 6.66666687E-01);
    } else {
        _TMP7 = vec4(_TMP0.y, _TMP0.z, 0.00000000E+00, -3.33333343E-01);
    } 
    if (_TMP0.x < _TMP7.x) { 
        _TMP8 = vec4(_TMP7.x, _TMP7.y, _TMP7.w, _TMP0.x);
    } else {
        _TMP8 = vec4(_TMP0.x, _TMP7.y, _TMP7.z, _TMP7.x);
    } 
    _TMP9 = min(_TMP8.w, _TMP8.y);
    _d0065 = _TMP8.x - _TMP9;
    _a0069 = _TMP8.z + (_TMP8.w - _TMP8.y)/(6.00000000E+00*_d0065 + 1.00000001E-10);
    _TMP10 = abs(_a0069);
    _TMP1 = vec3(_TMP10, _d0065/(_TMP8.x + 1.00000001E-10), _TMP8.x);
    _x0073 = _TMP1.xxx + vec3( 1.00000000E+00, 6.66666687E-01, 3.33333343E-01);
    _TMP11 = fract(_x0073);
    _a0075 = _TMP11*6.00000000E+00 - vec3( 3.00000000E+00, 3.00000000E+00, 3.00000000E+00);
    _p0071 = abs(_a0075);
    _x0077 = _p0071 - vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00);
    _TMP14 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0077);
    _TMP76 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP14);
    _TMP13 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + _TMP1.y*(_TMP76 - vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP2 = _TMP1.z*_TMP13;
    _TMP14 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _TMP2);
    _TMP84 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP14);
    _x0091 = (_TMP84 - 5.00000000E-01) + 5.00000000E-01;
    _TMP14 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0091);
    _TMP90 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP14);
    _conColor = _TMP90;
    if (_fragcoord.y > 0.00000000E+00 && _fragcoord.y < 1.00000000E+00) { 
    } else {
        _conColor = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    } 
    if (_fragcoord.x > 0.00000000E+00 && _fragcoord.x < 1.00000000E+00) { 
    } else {
        _conColor = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    } 
    _ret_0 = vec4(_conColor.x, _conColor.y, _conColor.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
