// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = 1.00000000E+00/TextureSize;
    _OUT._t1 = TexCoord.xxxy + vec4(-_ps.x, -2.00000000E+00*_ps.x, -3.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t2 = TexCoord.xxxy + vec4(_ps.x, 2.00000000E+00*_ps.x, 3.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t3 = TexCoord.xyyy + vec4(0.00000000E+00, -_ps.y, -2.00000000E+00*_ps.y, -3.00000000E+00*_ps.y);
    _OUT._t4 = TexCoord.xyyy + vec4(0.00000000E+00, _ps.y, 2.00000000E+00*_ps.y, 3.00000000E+00*_ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
int _TMP56;
int _TMP57;
int _TMP58;
int _TMP59;
int _TMP60;
int _TMP61;
int _TMP62;
int _TMP63;
int _TMP48;
int _TMP49;
int _TMP50;
int _TMP51;
int _TMP52;
int _TMP53;
int _TMP54;
int _TMP55;
int _TMP40;
int _TMP41;
int _TMP42;
int _TMP43;
int _TMP44;
int _TMP45;
int _TMP46;
int _TMP47;
int _TMP32;
int _TMP33;
int _TMP34;
int _TMP35;
int _TMP36;
int _TMP37;
int _TMP38;
int _TMP39;
int _TMP24;
int _TMP25;
int _TMP26;
int _TMP27;
int _TMP28;
int _TMP29;
int _TMP30;
int _TMP31;
int _TMP16;
int _TMP17;
int _TMP18;
int _TMP19;
int _TMP20;
int _TMP21;
int _TMP22;
int _TMP23;
int _TMP8;
int _TMP9;
int _TMP10;
int _TMP11;
int _TMP12;
int _TMP13;
int _TMP14;
int _TMP15;
int _TMP0;
int _TMP1;
int _TMP2;
int _TMP3;
int _TMP4;
int _TMP5;
int _TMP6;
int _TMP7;
vec4 _TMP69;
vec4 _TMP68;
vec4 _TMP74;
vec4 _TMP73;
vec4 _TMP72;
vec4 _TMP65;
vec4 _TMP64;
vec4 _TMP71;
vec4 _TMP70;
vec4 _TMP67;
vec4 _TMP66;
uniform sampler2D Texture;
vec4 _a0107;
vec4 _c0107;
vec4 _a0109;
vec4 _a0119;
vec4 _c0119;
vec4 _a0121;
vec4 _a0131;
vec4 _c0131;
vec4 _a0133;
vec4 _a0143;
vec4 _c0143;
vec4 _a0145;
vec4 _a0155;
vec4 _c0155;
vec4 _a0157;
vec4 _a0167;
vec4 _c0167;
vec4 _a0169;
vec4 _a0179;
vec4 _c0179;
vec4 _a0181;
vec4 _a0191;
vec4 _c0191;
vec4 _a0193;
vec4 _a0203;
vec4 _c0203;
vec4 _a0205;
vec4 _a0215;
vec4 _c0215;
vec4 _a0217;
vec4 _a0227;
vec4 _c0227;
vec4 _a0229;
vec4 _a0239;
vec4 _c0239;
vec4 _a0241;
vec4 _a0251;
vec4 _c0251;
vec4 _a0253;
vec4 _a0263;
vec4 _c0263;
vec4 _a0265;
vec4 _a0275;
vec4 _c0275;
vec4 _a0277;
vec4 _a0287;
vec4 _c0287;
vec4 _a0289;
vec4 _a0299;
vec4 _c0299;
vec4 _a0301;
vec4 _a0311;
vec4 _c0311;
vec4 _a0313;
vec4 _a0323;
vec4 _c0323;
vec4 _a0325;
vec4 _a0335;
vec4 _c0335;
vec4 _a0337;
vec4 _a0347;
vec4 _c0347;
vec4 _a0349;
vec4 _a0359;
vec4 _c0359;
vec4 _a0361;
vec4 _a0371;
vec4 _c0371;
vec4 _a0373;
vec4 _a0383;
vec4 _c0383;
vec4 _a0385;
vec4 _a0395;
vec4 _c0395;
vec4 _a0397;
vec4 _a0407;
vec4 _c0407;
vec4 _a0409;
vec4 _a0419;
vec4 _c0419;
vec4 _a0421;
vec4 _a0431;
vec4 _c0431;
vec4 _a0433;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _E;
    vec4 _D;
    vec4 _D0;
    vec4 _D1;
    vec4 _F;
    vec4 _F0;
    vec4 _F1;
    vec4 _B;
    vec4 _B0;
    vec4 _B1;
    vec4 _H;
    vec4 _H0;
    vec4 _H1;
    bvec4 _Ec;
    bvec4 _Eh;
    bvec4 _Ev;
    bvec4 _Eo;
    bvec4 _Dc;
    bvec4 _Dh;
    bvec4 _Do;
    bvec4 _D0c;
    bvec4 _D0h;
    bvec4 _D1h;
    bvec4 _Fc;
    bvec4 _Fh;
    bvec4 _Fo;
    bvec4 _F0c;
    bvec4 _F0h;
    bvec4 _F1h;
    bvec4 _Bc;
    bvec4 _Bv;
    bvec4 _Bo;
    bvec4 _B0c;
    bvec4 _B0v;
    bvec4 _B1v;
    bvec4 _Hc;
    bvec4 _Hv;
    bvec4 _Ho;
    bvec4 _H0c;
    bvec4 _H0v;
    bvec4 _H1v;
    bvec2 _lvl2x;
    bvec2 _lvl2y;
    bvec2 _lvl2z;
    bvec2 _lvl2w;
    bvec2 _lvl3x;
    bvec2 _lvl3y;
    bvec2 _lvl3z;
    bvec2 _lvl3w;
    bvec2 _lvl4x;
    bvec2 _lvl4y;
    bvec2 _lvl4z;
    bvec2 _lvl4w;
    bvec2 _lvl5x;
    bvec2 _lvl5y;
    bvec2 _lvl5z;
    bvec2 _lvl5w;
    bvec2 _lvl6x;
    bvec2 _lvl6y;
    bvec2 _lvl6z;
    bvec2 _lvl6w;
    vec4 _crn;
    vec4 _mid;
    _E = COMPAT_TEXTURE(Texture, TEX0.xy);
    _D = COMPAT_TEXTURE(Texture, TEX1.xw);
    _D0 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _D1 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _F = COMPAT_TEXTURE(Texture, TEX2.xw);
    _F0 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _F1 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _B = COMPAT_TEXTURE(Texture, TEX3.xy);
    _B0 = COMPAT_TEXTURE(Texture, TEX3.xz);
    _B1 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _H = COMPAT_TEXTURE(Texture, TEX4.xy);
    _H0 = COMPAT_TEXTURE(Texture, TEX4.xz);
    _H1 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _a0107 = _E*1.50000000E+01 + 5.00000000E-01;
    _a0109 = _a0107/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0109);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0107 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0107.x < 0.00000000E+00 ? (-_c0107).x : _c0107.x, _a0107.y < 0.00000000E+00 ? (-_c0107).y : _c0107.y, _a0107.z < 0.00000000E+00 ? (-_c0107).z : _c0107.z, _a0107.w < 0.00000000E+00 ? (-_c0107).w : _c0107.w);
    _TMP65 = floor(_TMP64);
    _Ec = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0119 = _E*7.50000000E+00 + 2.50000000E-01;
    _a0121 = _a0119/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0121);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0119 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0119.x < 0.00000000E+00 ? (-_c0119).x : _c0119.x, _a0119.y < 0.00000000E+00 ? (-_c0119).y : _c0119.y, _a0119.z < 0.00000000E+00 ? (-_c0119).z : _c0119.z, _a0119.w < 0.00000000E+00 ? (-_c0119).w : _c0119.w);
    _TMP67 = floor(_TMP66);
    _Eh = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0131 = _E*3.75000000E+00 + 1.25000000E-01;
    _a0133 = _a0131/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0133);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0131 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0131.x < 0.00000000E+00 ? (-_c0131).x : _c0131.x, _a0131.y < 0.00000000E+00 ? (-_c0131).y : _c0131.y, _a0131.z < 0.00000000E+00 ? (-_c0131).z : _c0131.z, _a0131.w < 0.00000000E+00 ? (-_c0131).w : _c0131.w);
    _TMP69 = floor(_TMP68);
    _Ev = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _a0143 = _E*1.87500000E+00 + 6.25000000E-02;
    _a0145 = _a0143/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0145);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0143 = _TMP73*_TMP74;
    _TMP70 = vec4(_a0143.x < 0.00000000E+00 ? (-_c0143).x : _c0143.x, _a0143.y < 0.00000000E+00 ? (-_c0143).y : _c0143.y, _a0143.z < 0.00000000E+00 ? (-_c0143).z : _c0143.z, _a0143.w < 0.00000000E+00 ? (-_c0143).w : _c0143.w);
    _TMP71 = floor(_TMP70);
    _Eo = bvec4(bool(_TMP71.x), bool(_TMP71.y), bool(_TMP71.z), bool(_TMP71.w));
    _a0155 = _D*1.50000000E+01 + 5.00000000E-01;
    _a0157 = _a0155/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0157);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0155 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0155.x < 0.00000000E+00 ? (-_c0155).x : _c0155.x, _a0155.y < 0.00000000E+00 ? (-_c0155).y : _c0155.y, _a0155.z < 0.00000000E+00 ? (-_c0155).z : _c0155.z, _a0155.w < 0.00000000E+00 ? (-_c0155).w : _c0155.w);
    _TMP65 = floor(_TMP64);
    _Dc = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0167 = _D*7.50000000E+00 + 2.50000000E-01;
    _a0169 = _a0167/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0169);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0167 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0167.x < 0.00000000E+00 ? (-_c0167).x : _c0167.x, _a0167.y < 0.00000000E+00 ? (-_c0167).y : _c0167.y, _a0167.z < 0.00000000E+00 ? (-_c0167).z : _c0167.z, _a0167.w < 0.00000000E+00 ? (-_c0167).w : _c0167.w);
    _TMP67 = floor(_TMP66);
    _Dh = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0179 = _D*1.87500000E+00 + 6.25000000E-02;
    _a0181 = _a0179/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0181);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0179 = _TMP73*_TMP74;
    _TMP70 = vec4(_a0179.x < 0.00000000E+00 ? (-_c0179).x : _c0179.x, _a0179.y < 0.00000000E+00 ? (-_c0179).y : _c0179.y, _a0179.z < 0.00000000E+00 ? (-_c0179).z : _c0179.z, _a0179.w < 0.00000000E+00 ? (-_c0179).w : _c0179.w);
    _TMP71 = floor(_TMP70);
    _Do = bvec4(bool(_TMP71.x), bool(_TMP71.y), bool(_TMP71.z), bool(_TMP71.w));
    _a0191 = _D0*1.50000000E+01 + 5.00000000E-01;
    _a0193 = _a0191/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0193);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0191 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0191.x < 0.00000000E+00 ? (-_c0191).x : _c0191.x, _a0191.y < 0.00000000E+00 ? (-_c0191).y : _c0191.y, _a0191.z < 0.00000000E+00 ? (-_c0191).z : _c0191.z, _a0191.w < 0.00000000E+00 ? (-_c0191).w : _c0191.w);
    _TMP65 = floor(_TMP64);
    _D0c = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0203 = _D0*7.50000000E+00 + 2.50000000E-01;
    _a0205 = _a0203/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0205);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0203 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0203.x < 0.00000000E+00 ? (-_c0203).x : _c0203.x, _a0203.y < 0.00000000E+00 ? (-_c0203).y : _c0203.y, _a0203.z < 0.00000000E+00 ? (-_c0203).z : _c0203.z, _a0203.w < 0.00000000E+00 ? (-_c0203).w : _c0203.w);
    _TMP67 = floor(_TMP66);
    _D0h = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0215 = _D1*7.50000000E+00 + 2.50000000E-01;
    _a0217 = _a0215/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0217);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0215 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0215.x < 0.00000000E+00 ? (-_c0215).x : _c0215.x, _a0215.y < 0.00000000E+00 ? (-_c0215).y : _c0215.y, _a0215.z < 0.00000000E+00 ? (-_c0215).z : _c0215.z, _a0215.w < 0.00000000E+00 ? (-_c0215).w : _c0215.w);
    _TMP67 = floor(_TMP66);
    _D1h = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0227 = _F*1.50000000E+01 + 5.00000000E-01;
    _a0229 = _a0227/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0229);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0227 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0227.x < 0.00000000E+00 ? (-_c0227).x : _c0227.x, _a0227.y < 0.00000000E+00 ? (-_c0227).y : _c0227.y, _a0227.z < 0.00000000E+00 ? (-_c0227).z : _c0227.z, _a0227.w < 0.00000000E+00 ? (-_c0227).w : _c0227.w);
    _TMP65 = floor(_TMP64);
    _Fc = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0239 = _F*7.50000000E+00 + 2.50000000E-01;
    _a0241 = _a0239/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0241);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0239 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0239.x < 0.00000000E+00 ? (-_c0239).x : _c0239.x, _a0239.y < 0.00000000E+00 ? (-_c0239).y : _c0239.y, _a0239.z < 0.00000000E+00 ? (-_c0239).z : _c0239.z, _a0239.w < 0.00000000E+00 ? (-_c0239).w : _c0239.w);
    _TMP67 = floor(_TMP66);
    _Fh = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0251 = _F*1.87500000E+00 + 6.25000000E-02;
    _a0253 = _a0251/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0253);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0251 = _TMP73*_TMP74;
    _TMP70 = vec4(_a0251.x < 0.00000000E+00 ? (-_c0251).x : _c0251.x, _a0251.y < 0.00000000E+00 ? (-_c0251).y : _c0251.y, _a0251.z < 0.00000000E+00 ? (-_c0251).z : _c0251.z, _a0251.w < 0.00000000E+00 ? (-_c0251).w : _c0251.w);
    _TMP71 = floor(_TMP70);
    _Fo = bvec4(bool(_TMP71.x), bool(_TMP71.y), bool(_TMP71.z), bool(_TMP71.w));
    _a0263 = _F0*1.50000000E+01 + 5.00000000E-01;
    _a0265 = _a0263/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0265);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0263 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0263.x < 0.00000000E+00 ? (-_c0263).x : _c0263.x, _a0263.y < 0.00000000E+00 ? (-_c0263).y : _c0263.y, _a0263.z < 0.00000000E+00 ? (-_c0263).z : _c0263.z, _a0263.w < 0.00000000E+00 ? (-_c0263).w : _c0263.w);
    _TMP65 = floor(_TMP64);
    _F0c = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0275 = _F0*7.50000000E+00 + 2.50000000E-01;
    _a0277 = _a0275/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0277);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0275 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0275.x < 0.00000000E+00 ? (-_c0275).x : _c0275.x, _a0275.y < 0.00000000E+00 ? (-_c0275).y : _c0275.y, _a0275.z < 0.00000000E+00 ? (-_c0275).z : _c0275.z, _a0275.w < 0.00000000E+00 ? (-_c0275).w : _c0275.w);
    _TMP67 = floor(_TMP66);
    _F0h = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0287 = _F1*7.50000000E+00 + 2.50000000E-01;
    _a0289 = _a0287/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0289);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0287 = _TMP73*_TMP74;
    _TMP66 = vec4(_a0287.x < 0.00000000E+00 ? (-_c0287).x : _c0287.x, _a0287.y < 0.00000000E+00 ? (-_c0287).y : _c0287.y, _a0287.z < 0.00000000E+00 ? (-_c0287).z : _c0287.z, _a0287.w < 0.00000000E+00 ? (-_c0287).w : _c0287.w);
    _TMP67 = floor(_TMP66);
    _F1h = bvec4(bool(_TMP67.x), bool(_TMP67.y), bool(_TMP67.z), bool(_TMP67.w));
    _a0299 = _B*1.50000000E+01 + 5.00000000E-01;
    _a0301 = _a0299/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0301);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0299 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0299.x < 0.00000000E+00 ? (-_c0299).x : _c0299.x, _a0299.y < 0.00000000E+00 ? (-_c0299).y : _c0299.y, _a0299.z < 0.00000000E+00 ? (-_c0299).z : _c0299.z, _a0299.w < 0.00000000E+00 ? (-_c0299).w : _c0299.w);
    _TMP65 = floor(_TMP64);
    _Bc = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0311 = _B*3.75000000E+00 + 1.25000000E-01;
    _a0313 = _a0311/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0313);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0311 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0311.x < 0.00000000E+00 ? (-_c0311).x : _c0311.x, _a0311.y < 0.00000000E+00 ? (-_c0311).y : _c0311.y, _a0311.z < 0.00000000E+00 ? (-_c0311).z : _c0311.z, _a0311.w < 0.00000000E+00 ? (-_c0311).w : _c0311.w);
    _TMP69 = floor(_TMP68);
    _Bv = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _a0323 = _B*1.87500000E+00 + 6.25000000E-02;
    _a0325 = _a0323/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0325);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0323 = _TMP73*_TMP74;
    _TMP70 = vec4(_a0323.x < 0.00000000E+00 ? (-_c0323).x : _c0323.x, _a0323.y < 0.00000000E+00 ? (-_c0323).y : _c0323.y, _a0323.z < 0.00000000E+00 ? (-_c0323).z : _c0323.z, _a0323.w < 0.00000000E+00 ? (-_c0323).w : _c0323.w);
    _TMP71 = floor(_TMP70);
    _Bo = bvec4(bool(_TMP71.x), bool(_TMP71.y), bool(_TMP71.z), bool(_TMP71.w));
    _a0335 = _B0*1.50000000E+01 + 5.00000000E-01;
    _a0337 = _a0335/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0337);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0335 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0335.x < 0.00000000E+00 ? (-_c0335).x : _c0335.x, _a0335.y < 0.00000000E+00 ? (-_c0335).y : _c0335.y, _a0335.z < 0.00000000E+00 ? (-_c0335).z : _c0335.z, _a0335.w < 0.00000000E+00 ? (-_c0335).w : _c0335.w);
    _TMP65 = floor(_TMP64);
    _B0c = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0347 = _B0*3.75000000E+00 + 1.25000000E-01;
    _a0349 = _a0347/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0349);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0347 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0347.x < 0.00000000E+00 ? (-_c0347).x : _c0347.x, _a0347.y < 0.00000000E+00 ? (-_c0347).y : _c0347.y, _a0347.z < 0.00000000E+00 ? (-_c0347).z : _c0347.z, _a0347.w < 0.00000000E+00 ? (-_c0347).w : _c0347.w);
    _TMP69 = floor(_TMP68);
    _B0v = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _a0359 = _B1*3.75000000E+00 + 1.25000000E-01;
    _a0361 = _a0359/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0361);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0359 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0359.x < 0.00000000E+00 ? (-_c0359).x : _c0359.x, _a0359.y < 0.00000000E+00 ? (-_c0359).y : _c0359.y, _a0359.z < 0.00000000E+00 ? (-_c0359).z : _c0359.z, _a0359.w < 0.00000000E+00 ? (-_c0359).w : _c0359.w);
    _TMP69 = floor(_TMP68);
    _B1v = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _a0371 = _H*1.50000000E+01 + 5.00000000E-01;
    _a0373 = _a0371/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0373);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0371 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0371.x < 0.00000000E+00 ? (-_c0371).x : _c0371.x, _a0371.y < 0.00000000E+00 ? (-_c0371).y : _c0371.y, _a0371.z < 0.00000000E+00 ? (-_c0371).z : _c0371.z, _a0371.w < 0.00000000E+00 ? (-_c0371).w : _c0371.w);
    _TMP65 = floor(_TMP64);
    _Hc = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0383 = _H*3.75000000E+00 + 1.25000000E-01;
    _a0385 = _a0383/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0385);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0383 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0383.x < 0.00000000E+00 ? (-_c0383).x : _c0383.x, _a0383.y < 0.00000000E+00 ? (-_c0383).y : _c0383.y, _a0383.z < 0.00000000E+00 ? (-_c0383).z : _c0383.z, _a0383.w < 0.00000000E+00 ? (-_c0383).w : _c0383.w);
    _TMP69 = floor(_TMP68);
    _Hv = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _a0395 = _H*1.87500000E+00 + 6.25000000E-02;
    _a0397 = _a0395/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0397);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0395 = _TMP73*_TMP74;
    _TMP70 = vec4(_a0395.x < 0.00000000E+00 ? (-_c0395).x : _c0395.x, _a0395.y < 0.00000000E+00 ? (-_c0395).y : _c0395.y, _a0395.z < 0.00000000E+00 ? (-_c0395).z : _c0395.z, _a0395.w < 0.00000000E+00 ? (-_c0395).w : _c0395.w);
    _TMP71 = floor(_TMP70);
    _Ho = bvec4(bool(_TMP71.x), bool(_TMP71.y), bool(_TMP71.z), bool(_TMP71.w));
    _a0407 = _H0*1.50000000E+01 + 5.00000000E-01;
    _a0409 = _a0407/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0409);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0407 = _TMP73*_TMP74;
    _TMP64 = vec4(_a0407.x < 0.00000000E+00 ? (-_c0407).x : _c0407.x, _a0407.y < 0.00000000E+00 ? (-_c0407).y : _c0407.y, _a0407.z < 0.00000000E+00 ? (-_c0407).z : _c0407.z, _a0407.w < 0.00000000E+00 ? (-_c0407).w : _c0407.w);
    _TMP65 = floor(_TMP64);
    _H0c = bvec4(bool(_TMP65.x), bool(_TMP65.y), bool(_TMP65.z), bool(_TMP65.w));
    _a0419 = _H0*3.75000000E+00 + 1.25000000E-01;
    _a0421 = _a0419/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0421);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0419 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0419.x < 0.00000000E+00 ? (-_c0419).x : _c0419.x, _a0419.y < 0.00000000E+00 ? (-_c0419).y : _c0419.y, _a0419.z < 0.00000000E+00 ? (-_c0419).z : _c0419.z, _a0419.w < 0.00000000E+00 ? (-_c0419).w : _c0419.w);
    _TMP69 = floor(_TMP68);
    _H0v = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _a0431 = _H1*3.75000000E+00 + 1.25000000E-01;
    _a0433 = _a0431/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP72 = abs(_a0433);
    _TMP73 = fract(_TMP72);
    _TMP74 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0431 = _TMP73*_TMP74;
    _TMP68 = vec4(_a0431.x < 0.00000000E+00 ? (-_c0431).x : _c0431.x, _a0431.y < 0.00000000E+00 ? (-_c0431).y : _c0431.y, _a0431.z < 0.00000000E+00 ? (-_c0431).z : _c0431.z, _a0431.w < 0.00000000E+00 ? (-_c0431).w : _c0431.w);
    _TMP69 = floor(_TMP68);
    _H1v = bvec4(bool(_TMP69.x), bool(_TMP69.y), bool(_TMP69.z), bool(_TMP69.w));
    _lvl2x = bvec2(_Ec.x && _Eh.y && _Dc.z, _Ec.y && _Eh.x && _Fc.w);
    _lvl2y = bvec2(_Ec.y && _Ev.z && _Bc.w, _Ec.z && _Ev.y && _Hc.x);
    _lvl2z = bvec2(_Ec.w && _Eh.z && _Dc.y, _Ec.z && _Eh.w && _Fc.x);
    _lvl2w = bvec2(_Ec.x && _Ev.w && _Bc.z, _Ec.w && _Ev.x && _Hc.y);
    _lvl3x = bvec2(_lvl2x.y && _Dh.y && _Dh.x && _Fh.z, _lvl2w.y && _Bv.w && _Bv.x && _Hv.z);
    _lvl3y = bvec2(_lvl2x.x && _Fh.x && _Fh.y && _Dh.w, _lvl2y.y && _Bv.z && _Bv.y && _Hv.w);
    _lvl3z = bvec2(_lvl2z.x && _Fh.w && _Fh.z && _Dh.x, _lvl2y.x && _Hv.y && _Hv.z && _Bv.x);
    _lvl3w = bvec2(_lvl2z.y && _Dh.z && _Dh.w && _Fh.y, _lvl2w.x && _Hv.x && _Hv.w && _Bv.y);
    _lvl4x = bvec2(_Dc.x && _Dh.y && _Eh.x && _Eh.y && _Fh.x && _Fh.y && _D0c.z && _D0h.w, _Bc.x && _Bv.w && _Ev.x && _Ev.w && _Hv.x && _Hv.w && _B0c.z && _B0v.y);
    _lvl4y = bvec2(_Fc.y && _Fh.x && _Eh.y && _Eh.x && _Dh.y && _Dh.x && _F0c.w && _F0h.z, _Bc.y && _Bv.z && _Ev.y && _Ev.z && _Hv.y && _Hv.z && _B0c.w && _B0v.x);
    _lvl4z = bvec2(_Fc.z && _Fh.w && _Eh.z && _Eh.w && _Dh.z && _Dh.w && _F0c.x && _F0h.y, _Hc.z && _Hv.y && _Ev.z && _Ev.y && _Bv.z && _Bv.y && _H0c.x && _H0v.w);
    _lvl4w = bvec2(_Dc.w && _Dh.z && _Eh.w && _Eh.z && _Fh.w && _Fh.z && _D0c.y && _D0h.x, _Hc.w && _Hv.x && _Ev.w && _Ev.x && _Bv.w && _Bv.x && _H0c.y && _H0v.z);
    _lvl5x = bvec2(_lvl4x.x && _F0h.x && _F0h.y && _D1h.z && _D1h.w, _lvl4y.x && _D0h.y && _D0h.x && _F1h.w && _F1h.z);
    _lvl5y = bvec2(_lvl4y.y && _H0v.y && _H0v.z && _B1v.w && _B1v.x, _lvl4z.y && _B0v.z && _B0v.y && _H1v.x && _H1v.w);
    _lvl5z = bvec2(_lvl4w.x && _F0h.w && _F0h.z && _D1h.y && _D1h.x, _lvl4z.x && _D0h.z && _D0h.w && _F1h.x && _F1h.y);
    _lvl5w = bvec2(_lvl4x.y && _H0v.x && _H0v.w && _B1v.z && _B1v.y, _lvl4w.y && _B0v.w && _B0v.x && _H1v.y && _H1v.z);
    _lvl6x = bvec2(_lvl5x.y && _D1h.y && _D1h.x, _lvl5w.y && _B1v.w && _B1v.x);
    _lvl6y = bvec2(_lvl5x.x && _F1h.x && _F1h.y, _lvl5y.y && _B1v.z && _B1v.y);
    _lvl6z = bvec2(_lvl5z.x && _F1h.w && _F1h.z, _lvl5y.x && _H1v.y && _H1v.z);
    _lvl6w = bvec2(_lvl5z.y && _D1h.z && _D1h.w, _lvl5w.x && _H1v.x && _H1v.w);
    if (_Ec.x && _Eo.x || _lvl3x.x && _Eo.y || _lvl4x.x && _Do.x || _lvl6x.x && _Fo.y) { 
        _TMP0 = 5;
    } else {
        if (_Ec.x || _lvl3x.y && !_Eo.w || _lvl4x.y && !_Bo.x || _lvl6x.y && !_Ho.w) { 
            _TMP1 = 1;
        } else {
            if (_lvl3x.x) { 
                _TMP2 = 3;
            } else {
                if (_lvl3x.y) { 
                    _TMP3 = 7;
                } else {
                    if (_lvl4x.x) { 
                        _TMP4 = 2;
                    } else {
                        if (_lvl4x.y) { 
                            _TMP5 = 6;
                        } else {
                            if (_lvl6x.x) { 
                                _TMP6 = 4;
                            } else {
                                if (_lvl6x.y) { 
                                    _TMP7 = 8;
                                } else {
                                    _TMP7 = 0;
                                } 
                                _TMP6 = _TMP7;
                            } 
                            _TMP5 = _TMP6;
                        } 
                        _TMP4 = _TMP5;
                    } 
                    _TMP3 = _TMP4;
                } 
                _TMP2 = _TMP3;
            } 
            _TMP1 = _TMP2;
        } 
        _TMP0 = _TMP1;
    } 
    _crn.x = float(_TMP0);
    if (_Ec.y && _Eo.y || _lvl3y.x && _Eo.x || _lvl4y.x && _Fo.y || _lvl6y.x && _Do.x) { 
        _TMP8 = 5;
    } else {
        if (_Ec.y || _lvl3y.y && !_Eo.z || _lvl4y.y && !_Bo.y || _lvl6y.y && !_Ho.z) { 
            _TMP9 = 3;
        } else {
            if (_lvl3y.x) { 
                _TMP10 = 1;
            } else {
                if (_lvl3y.y) { 
                    _TMP11 = 7;
                } else {
                    if (_lvl4y.x) { 
                        _TMP12 = 4;
                    } else {
                        if (_lvl4y.y) { 
                            _TMP13 = 6;
                        } else {
                            if (_lvl6y.x) { 
                                _TMP14 = 2;
                            } else {
                                if (_lvl6y.y) { 
                                    _TMP15 = 8;
                                } else {
                                    _TMP15 = 0;
                                } 
                                _TMP14 = _TMP15;
                            } 
                            _TMP13 = _TMP14;
                        } 
                        _TMP12 = _TMP13;
                    } 
                    _TMP11 = _TMP12;
                } 
                _TMP10 = _TMP11;
            } 
            _TMP9 = _TMP10;
        } 
        _TMP8 = _TMP9;
    } 
    _crn.y = float(_TMP8);
    if (_Ec.z && _Eo.z || _lvl3z.x && _Eo.w || _lvl4z.x && _Fo.z || _lvl6z.x && _Do.w) { 
        _TMP16 = 7;
    } else {
        if (_Ec.z || _lvl3z.y && !_Eo.y || _lvl4z.y && !_Ho.z || _lvl6z.y && !_Bo.y) { 
            _TMP17 = 3;
        } else {
            if (_lvl3z.x) { 
                _TMP18 = 1;
            } else {
                if (_lvl3z.y) { 
                    _TMP19 = 5;
                } else {
                    if (_lvl4z.x) { 
                        _TMP20 = 4;
                    } else {
                        if (_lvl4z.y) { 
                            _TMP21 = 8;
                        } else {
                            if (_lvl6z.x) { 
                                _TMP22 = 2;
                            } else {
                                if (_lvl6z.y) { 
                                    _TMP23 = 6;
                                } else {
                                    _TMP23 = 0;
                                } 
                                _TMP22 = _TMP23;
                            } 
                            _TMP21 = _TMP22;
                        } 
                        _TMP20 = _TMP21;
                    } 
                    _TMP19 = _TMP20;
                } 
                _TMP18 = _TMP19;
            } 
            _TMP17 = _TMP18;
        } 
        _TMP16 = _TMP17;
    } 
    _crn.z = float(_TMP16);
    if (_Ec.w && _Eo.w || _lvl3w.x && _Eo.z || _lvl4w.x && _Do.w || _lvl6w.x && _Fo.z) { 
        _TMP24 = 7;
    } else {
        if (_Ec.w || _lvl3w.y && !_Eo.x || _lvl4w.y && !_Ho.w || _lvl6w.y && !_Bo.x) { 
            _TMP25 = 1;
        } else {
            if (_lvl3w.x) { 
                _TMP26 = 3;
            } else {
                if (_lvl3w.y) { 
                    _TMP27 = 5;
                } else {
                    if (_lvl4w.x) { 
                        _TMP28 = 2;
                    } else {
                        if (_lvl4w.y) { 
                            _TMP29 = 8;
                        } else {
                            if (_lvl6w.x) { 
                                _TMP30 = 4;
                            } else {
                                if (_lvl6w.y) { 
                                    _TMP31 = 6;
                                } else {
                                    _TMP31 = 0;
                                } 
                                _TMP30 = _TMP31;
                            } 
                            _TMP29 = _TMP30;
                        } 
                        _TMP28 = _TMP29;
                    } 
                    _TMP27 = _TMP28;
                } 
                _TMP26 = _TMP27;
            } 
            _TMP25 = _TMP26;
        } 
        _TMP24 = _TMP25;
    } 
    _crn.w = float(_TMP24);
    if (_lvl2x.x && _Eo.x || _lvl2x.y && _Eo.y || _lvl5x.x && _Do.x || _lvl5x.y && _Fo.y) { 
        _TMP32 = 5;
    } else {
        if (_lvl2x.x) { 
            _TMP33 = 1;
        } else {
            if (_lvl2x.y) { 
                _TMP34 = 3;
            } else {
                if (_lvl5x.x) { 
                    _TMP35 = 2;
                } else {
                    if (_lvl5x.y) { 
                        _TMP36 = 4;
                    } else {
                        if (_Ec.x && _Dc.z && _Ec.y && _Fc.w) { 
                            if (_Eo.x) { 
                                if (_Eo.y) { 
                                    _TMP39 = 5;
                                } else {
                                    _TMP39 = 3;
                                } 
                                _TMP38 = _TMP39;
                            } else {
                                _TMP38 = 1;
                            } 
                            _TMP37 = _TMP38;
                        } else {
                            _TMP37 = 0;
                        } 
                        _TMP36 = _TMP37;
                    } 
                    _TMP35 = _TMP36;
                } 
                _TMP34 = _TMP35;
            } 
            _TMP33 = _TMP34;
        } 
        _TMP32 = _TMP33;
    } 
    _mid.x = float(_TMP32);
    if (_lvl2y.x && !_Eo.y || _lvl2y.y && !_Eo.z || _lvl5y.x && !_Bo.y || _lvl5y.y && !_Ho.z) { 
        _TMP40 = 3;
    } else {
        if (_lvl2y.x) { 
            _TMP41 = 5;
        } else {
            if (_lvl2y.y) { 
                _TMP42 = 7;
            } else {
                if (_lvl5y.x) { 
                    _TMP43 = 6;
                } else {
                    if (_lvl5y.y) { 
                        _TMP44 = 8;
                    } else {
                        if (_Ec.y && _Bc.w && _Ec.z && _Hc.x) { 
                            if (!_Eo.y) { 
                                if (!_Eo.z) { 
                                    _TMP47 = 3;
                                } else {
                                    _TMP47 = 7;
                                } 
                                _TMP46 = _TMP47;
                            } else {
                                _TMP46 = 5;
                            } 
                            _TMP45 = _TMP46;
                        } else {
                            _TMP45 = 0;
                        } 
                        _TMP44 = _TMP45;
                    } 
                    _TMP43 = _TMP44;
                } 
                _TMP42 = _TMP43;
            } 
            _TMP41 = _TMP42;
        } 
        _TMP40 = _TMP41;
    } 
    _mid.y = float(_TMP40);
    if (_lvl2z.x && _Eo.w || _lvl2z.y && _Eo.z || _lvl5z.x && _Do.w || _lvl5z.y && _Fo.z) { 
        _TMP48 = 7;
    } else {
        if (_lvl2z.x) { 
            _TMP49 = 1;
        } else {
            if (_lvl2z.y) { 
                _TMP50 = 3;
            } else {
                if (_lvl5z.x) { 
                    _TMP51 = 2;
                } else {
                    if (_lvl5z.y) { 
                        _TMP52 = 4;
                    } else {
                        if (_Ec.z && _Fc.x && _Ec.w && _Dc.y) { 
                            if (_Eo.z) { 
                                if (_Eo.w) { 
                                    _TMP55 = 7;
                                } else {
                                    _TMP55 = 1;
                                } 
                                _TMP54 = _TMP55;
                            } else {
                                _TMP54 = 3;
                            } 
                            _TMP53 = _TMP54;
                        } else {
                            _TMP53 = 0;
                        } 
                        _TMP52 = _TMP53;
                    } 
                    _TMP51 = _TMP52;
                } 
                _TMP50 = _TMP51;
            } 
            _TMP49 = _TMP50;
        } 
        _TMP48 = _TMP49;
    } 
    _mid.z = float(_TMP48);
    if (_lvl2w.x && !_Eo.x || _lvl2w.y && !_Eo.w || _lvl5w.x && !_Bo.x || _lvl5w.y && !_Ho.w) { 
        _TMP56 = 1;
    } else {
        if (_lvl2w.x) { 
            _TMP57 = 5;
        } else {
            if (_lvl2w.y) { 
                _TMP58 = 7;
            } else {
                if (_lvl5w.x) { 
                    _TMP59 = 6;
                } else {
                    if (_lvl5w.y) { 
                        _TMP60 = 8;
                    } else {
                        if (_Ec.w && _Hc.y && _Ec.x && _Bc.z) { 
                            if (!_Eo.w) { 
                                if (!_Eo.x) { 
                                    _TMP63 = 1;
                                } else {
                                    _TMP63 = 5;
                                } 
                                _TMP62 = _TMP63;
                            } else {
                                _TMP62 = 7;
                            } 
                            _TMP61 = _TMP62;
                        } else {
                            _TMP61 = 0;
                        } 
                        _TMP60 = _TMP61;
                    } 
                    _TMP59 = _TMP60;
                } 
                _TMP58 = _TMP59;
            } 
            _TMP57 = _TMP58;
        } 
        _TMP56 = _TMP57;
    } 
    _mid.w = float(_TMP56);
    _ret_0 = (_crn + 9.00000000E+00*_mid)/8.00000000E+01;
    FragColor = _ret_0;
    return;
} 
#endif
