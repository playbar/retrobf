// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _texture_size1;
float _placeholder32;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _ps;
    out_vertex _TMP4;
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _TMP4._t1 = TexCoord.xyxy + vec4(-2.00000000E+00*_ps.x, -2.00000000E+00*_ps.y, _ps.x, _ps.y);
    _TMP4._t2 = TexCoord.xyxy + vec4(-_ps.x, -2.00000000E+00*_ps.y, 0.00000000E+00, _ps.y);
    _TMP4._t3 = TexCoord.xyxy + vec4(-2.00000000E+00*_ps.x, -_ps.y, _ps.x, 0.00000000E+00);
    _TMP4._t4 = TexCoord.xyxy + vec4(-_ps.x, -_ps.y, 0.00000000E+00, 0.00000000E+00);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _TMP4._t1;
    _ret_0._t2 = _TMP4._t2;
    _ret_0._t3 = _TMP4._t3;
    _ret_0._t4 = _TMP4._t4;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _TMP4._t1;
    TEX2 = _TMP4._t2;
    TEX3 = _TMP4._t3;
    TEX4 = _TMP4._t4;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color2;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _texture_size;
float _placeholder36;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size1;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color2;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
vec3 _TMP54;
vec3 _TMP83;
vec3 _TMP53;
float _TMP52;
vec3 _TMP82;
vec3 _TMP81;
vec3 _TMP50;
float _TMP49;
vec3 _TMP80;
vec3 _TMP79;
vec3 _TMP47;
vec3 _TMP45;
float _TMP46;
float _TMP44;
float _TMP32;
float _TMP84;
float _TMP31;
float _TMP30;
float _TMP29;
float _TMP28;
bool _TMP27;
bool _TMP26;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
orig _ORIG1;
input_dummy _IN1;
vec2 _x0096;
vec2 _c0132;
vec2 _c0134;
vec2 _c0136;
vec2 _c0138;
vec2 _c0140;
vec2 _c0142;
vec2 _c0144;
vec2 _c0146;
vec4 _r0150;
vec4 _r0162;
bvec3 _a0172;
bvec3 _a0174;
float _TMP175;
float _TMP179;
float _TMP183;
float _TMP187;
float _TMP191;
float _TMP195;
float _TMP199;
float _TMP203;
float _TMP207;
float _TMP215;
float _TMP223;
float _TMP231;
float _TMP241;
float _a0244;
float _TMP245;
float _a0248;
float _TMP249;
float _a0252;
float _TMP253;
float _a0256;
float _TMP277;
float _a0280;
float _TMP281;
float _a0284;
float _TMP295;
float _a0298;
float _TMP299;
float _a0302;
float _TMP303;
float _a0306;
float _TMP307;
float _a0310;
float _TMP331;
float _a0334;
float _TMP335;
float _a0338;
float _TMP357;
float _a0360;
float _TMP361;
float _a0364;
float _TMP365;
float _a0368;
float _TMP369;
float _a0372;
float _TMP399;
float _a0402;
float _TMP403;
float _a0406;
float _TMP407;
float _a0410;
float _TMP411;
float _a0414;
float _x0436;
float _TMP437;
vec3 _r0444;
vec3 _r0446;
vec3 _r0448;
vec3 _r0450;
float _t0526;
vec3 _TMP527;
vec3 _a0538;
vec3 _b0538;
vec3 _TMP539;
vec3 _a0550;
vec3 _b0550;
vec3 _TMP551;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _tex;
    vec2 _g1;
    vec2 _g2;
    bool _block_3d;
    float _d_edge;
    float _hv_edge;
    float _edge_strength;
    vec3 _color1;
    vec3 _min_sample;
    vec3 _max_sample;
    vec3 _TMP90[4];
    vec3 _TMP91[4];
    _x0096 = (TEX0.xy*TextureSize)/4.00000000E+00;
    _TMP0 = floor(_x0096);
    _tex = ((_TMP0 + vec2( 5.00000000E-01, 5.00000000E-01))*4.00000000E+00)/TextureSize;
    _g1 = vec2(4.00000000E+00/TextureSize.x, 0.00000000E+00);
    _g2 = vec2(0.00000000E+00, 4.00000000E+00/TextureSize.y);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.xy);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zy);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.xy);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX2.zy);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX3.xy);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX3.zy);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX4.zy);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0132 = _tex + _g1 + 2.50000000E-01*_g1 + 2.50000000E-01*_g2;
    _TMP18 = COMPAT_TEXTURE(OrigTexture, _c0132);
    _c0134 = (_tex + _g1 + 2.50000000E-01*_g1) - 2.50000000E-01*_g2;
    _TMP19 = COMPAT_TEXTURE(OrigTexture, _c0134);
    _c0136 = ((_tex + _g1) - 2.50000000E-01*_g1) - 2.50000000E-01*_g2;
    _TMP20 = COMPAT_TEXTURE(OrigTexture, _c0136);
    _c0138 = ((_tex + _g1) - 2.50000000E-01*_g1) + 2.50000000E-01*_g2;
    _TMP21 = COMPAT_TEXTURE(OrigTexture, _c0138);
    _c0140 = _tex + 2.50000000E-01*_g1 + 2.50000000E-01*_g2 + _g2;
    _TMP22 = COMPAT_TEXTURE(OrigTexture, _c0140);
    _c0142 = ((_tex + 2.50000000E-01*_g1) - 2.50000000E-01*_g2) + _g2;
    _TMP23 = COMPAT_TEXTURE(OrigTexture, _c0142);
    _c0144 = ((_tex - 2.50000000E-01*_g1) - 2.50000000E-01*_g2) + _g2;
    _TMP24 = COMPAT_TEXTURE(OrigTexture, _c0144);
    _c0146 = (_tex - 2.50000000E-01*_g1) + 2.50000000E-01*_g2 + _g2;
    _TMP25 = COMPAT_TEXTURE(OrigTexture, _c0146);
    _r0150.x = dot(_TMP18.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0150.y = dot(_TMP19.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0150.z = dot(_TMP20.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0150.w = dot(_TMP21.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0162.x = dot(_TMP22.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0162.y = dot(_TMP23.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0162.z = dot(_TMP24.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0162.w = dot(_TMP25.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _a0172 = bvec3(_r0150.x == _r0150.y, _r0150.y == _r0150.z, _r0150.z == _r0150.w);
    _TMP26 = _a0172.x && _a0172.y && _a0172.z;
    _a0174 = bvec3(_r0162.x == _r0162.y, _r0162.y == _r0162.z, _r0162.z == _r0162.w);
    _TMP27 = _a0174.x && _a0174.y && _a0174.z;
    _block_3d = _TMP26 && _TMP27;
    _TMP175 = dot(_TMP5.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP179 = dot(_TMP6.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP183 = dot(_TMP9.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP187 = dot(_TMP13.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP191 = dot(_TMP14.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP195 = dot(_TMP11.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP199 = dot(_TMP15.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP203 = dot(_TMP16.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP207 = dot(_TMP12.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP215 = dot(_TMP8.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP223 = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP231 = dot(_TMP10.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _a0244 = _TMP187 - _TMP179;
    _TMP241 = abs(_a0244);
    _a0248 = _TMP187 - _TMP195;
    _TMP245 = abs(_a0248);
    _a0252 = _TMP203 - _TMP223;
    _TMP249 = abs(_a0252);
    _a0256 = _TMP203 - _TMP231;
    _TMP253 = abs(_a0256);
    _a0280 = _TMP195 - _TMP179;
    _TMP277 = abs(_a0280);
    _a0284 = _TMP223 - _TMP231;
    _TMP281 = abs(_a0284);
    _TMP28 = _TMP241 + _TMP245 + _TMP249 + _TMP253 + -(_TMP277 + _TMP281);
    _a0298 = _TMP191 - _TMP207;
    _TMP295 = abs(_a0298);
    _a0302 = _TMP191 - _TMP175;
    _TMP299 = abs(_a0302);
    _a0306 = _TMP199 - _TMP183;
    _TMP303 = abs(_a0306);
    _a0310 = _TMP199 - _TMP215;
    _TMP307 = abs(_a0310);
    _a0334 = _TMP175 - _TMP207;
    _TMP331 = abs(_a0334);
    _a0338 = _TMP183 - _TMP215;
    _TMP335 = abs(_a0338);
    _TMP29 = _TMP295 + _TMP299 + _TMP303 + _TMP307 + -(_TMP331 + _TMP335);
    _d_edge = _TMP28 - _TMP29;
    _a0360 = _TMP191 - _TMP179;
    _TMP357 = abs(_a0360);
    _a0364 = _TMP203 - _TMP215;
    _TMP361 = abs(_a0364);
    _a0368 = _TMP187 - _TMP175;
    _TMP365 = abs(_a0368);
    _a0372 = _TMP199 - _TMP223;
    _TMP369 = abs(_a0372);
    _TMP30 = _TMP357 + _TMP361 + _TMP365 + _TMP369;
    _a0402 = _TMP187 - _TMP183;
    _TMP399 = abs(_a0402);
    _a0406 = _TMP191 - _TMP231;
    _TMP403 = abs(_a0406);
    _a0410 = _TMP199 - _TMP195;
    _TMP407 = abs(_a0410);
    _a0414 = _TMP203 - _TMP207;
    _TMP411 = abs(_a0414);
    _TMP31 = _TMP399 + _TMP403 + _TMP407 + _TMP411;
    _hv_edge = _TMP30 - _TMP31;
    _TMP32 = abs(_d_edge);
    _x0436 = _TMP32/9.99999997E-07;
    _TMP84 = min(1.00000000E+00, _x0436);
    _TMP437 = max(0.00000000E+00, _TMP84);
    _edge_strength = _TMP437*_TMP437*(3.00000000E+00 - 2.00000000E+00*_TMP437);
    _r0444 = 5.00000000E-01*_TMP15.xyz;
    _r0444 = _r0444 + 5.00000000E-01*_TMP14.xyz;
    _r0446 = 5.00000000E-01*_TMP13.xyz;
    _r0446 = _r0446 + 5.00000000E-01*_TMP16.xyz;
    _TMP91[1] = _TMP13.xyz + _TMP15.xyz;
    _TMP91[2] = _TMP14.xyz + _TMP16.xyz;
    _r0448 = 2.50000000E-01*_TMP91[1];
    _r0448 = _r0448 + 2.50000000E-01*_TMP91[2];
    _TMP90[1] = _TMP14.xyz + _TMP13.xyz;
    _TMP90[2] = _TMP16.xyz + _TMP15.xyz;
    _r0450 = 2.50000000E-01*_TMP90[1];
    _r0450 = _r0450 + 2.50000000E-01*_TMP90[2];
    _TMP44 = float((_d_edge >= 0.00000000E+00));
    _TMP45 = _r0444 + _TMP44*(_r0446 - _r0444);
    _TMP46 = float((_hv_edge >= 0.00000000E+00));
    _TMP47 = _r0448 + _TMP46*(_r0450 - _r0448);
    _t0526 = 1.00000000E+00 - _edge_strength;
    _color1 = _TMP45 + _t0526*(_TMP47 - _TMP45);
    _TMP79 = min(_TMP15.xyz, _TMP16.xyz);
    _TMP80 = min(_TMP14.xyz, _TMP79);
    _TMP527 = min(_TMP13.xyz, _TMP80);
    _TMP49 = float((_d_edge >= 0.00000000E+00));
    _a0538 = (_TMP3.xyz - _TMP15.xyz)*(_TMP14.xyz - _TMP2.xyz);
    _b0538 = (_TMP1.xyz - _TMP13.xyz)*(_TMP16.xyz - _TMP4.xyz);
    _TMP50 = _a0538 + _TMP49*(_b0538 - _a0538);
    _min_sample = _TMP527 + _TMP50;
    _TMP81 = max(_TMP15.xyz, _TMP16.xyz);
    _TMP82 = max(_TMP14.xyz, _TMP81);
    _TMP539 = max(_TMP13.xyz, _TMP82);
    _TMP52 = float((_d_edge >= 0.00000000E+00));
    _a0550 = (_TMP3.xyz - _TMP15.xyz)*(_TMP14.xyz - _TMP2.xyz);
    _b0550 = (_TMP1.xyz - _TMP13.xyz)*(_TMP16.xyz - _TMP4.xyz);
    _TMP53 = _a0550 + _TMP52*(_b0550 - _a0550);
    _max_sample = _TMP539 - _TMP53;
    _TMP83 = min(_max_sample, _color1);
    _TMP551 = max(_min_sample, _TMP83);
    if (_block_3d) { 
        _TMP54 = _TMP551;
    } else {
        _TMP54 = _TMP17.xyz;
    } 
    _ret_0 = vec4(_TMP54.x, _TMP54.y, _TMP54.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
