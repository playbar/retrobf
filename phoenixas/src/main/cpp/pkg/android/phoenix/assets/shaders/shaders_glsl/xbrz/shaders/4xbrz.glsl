// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP209;
float _TMP207;
float _TMP205;
float _TMP203;
float _TMP201;
float _TMP199;
float _TMP197;
float _TMP195;
float _TMP193;
float _TMP191;
float _TMP189;
float _TMP187;
float _TMP185;
float _TMP183;
float _TMP181;
float _TMP180;
float _TMP179;
float _TMP175;
float _TMP176;
float _TMP177;
float _TMP178;
float _TMP173;
float _TMP174;
float _TMP169;
float _TMP170;
float _TMP171;
float _TMP172;
float _TMP168;
float _TMP167;
float _TMP163;
float _TMP164;
float _TMP166;
float _TMP165;
vec3 _TMP160;
float _TMP212;
bool _TMP159;
bool _TMP158;
bool _TMP157;
bool _TMP156;
bool _TMP155;
bool _TMP154;
bool _TMP153;
float _TMP152;
float _TMP151;
float _TMP147;
float _TMP148;
float _TMP149;
float _TMP150;
float _TMP145;
float _TMP146;
float _TMP141;
float _TMP142;
float _TMP143;
float _TMP144;
float _TMP140;
float _TMP139;
float _TMP135;
float _TMP136;
float _TMP138;
float _TMP137;
vec3 _TMP132;
bool _TMP131;
bool _TMP130;
bool _TMP129;
bool _TMP128;
bool _TMP127;
bool _TMP126;
bool _TMP125;
float _TMP124;
float _TMP123;
float _TMP119;
float _TMP120;
float _TMP121;
float _TMP122;
float _TMP117;
float _TMP118;
float _TMP113;
float _TMP114;
float _TMP115;
float _TMP116;
float _TMP112;
float _TMP111;
float _TMP107;
float _TMP108;
float _TMP110;
float _TMP109;
vec3 _TMP104;
bool _TMP103;
bool _TMP102;
bool _TMP101;
bool _TMP100;
bool _TMP99;
bool _TMP98;
bool _TMP97;
float _TMP96;
float _TMP95;
float _TMP91;
float _TMP92;
float _TMP93;
float _TMP94;
float _TMP89;
float _TMP90;
float _TMP85;
float _TMP86;
float _TMP87;
float _TMP88;
float _TMP84;
float _TMP83;
float _TMP79;
float _TMP80;
float _TMP82;
float _TMP81;
vec3 _TMP76;
bool _TMP75;
bool _TMP74;
bool _TMP73;
bool _TMP72;
bool _TMP71;
bool _TMP70;
bool _TMP69;
bvec4 _TMP210;
int _TMP67;
int _TMP68;
int _TMP55;
int _TMP56;
int _TMP43;
int _TMP44;
int _TMP31;
int _TMP32;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0218;
float _TMP261;
float _TMP265;
float _TMP269;
float _TMP273;
float _TMP277;
float _TMP281;
float _TMP285;
float _TMP289;
float _TMP293;
float _TMP297;
vec3 _diff0298;
float _Y0298;
float _Cb0298;
float _Cr0298;
float _a0302;
float _TMP305;
vec3 _diff0306;
float _Y0306;
float _Cb0306;
float _Cr0306;
float _a0310;
float _TMP313;
vec3 _diff0314;
float _Y0314;
float _Cb0314;
float _Cr0314;
float _a0318;
float _TMP321;
vec3 _diff0322;
float _Y0322;
float _Cb0322;
float _Cr0322;
float _a0326;
float _TMP329;
vec3 _diff0330;
float _Y0330;
float _Cb0330;
float _Cr0330;
float _a0334;
float _TMP337;
vec3 _diff0338;
float _Y0338;
float _Cb0338;
float _Cr0338;
float _a0342;
float _TMP345;
vec3 _diff0346;
float _Y0346;
float _Cb0346;
float _Cr0346;
float _a0350;
float _TMP353;
vec3 _diff0354;
float _Y0354;
float _Cb0354;
float _Cr0354;
float _a0358;
float _TMP361;
vec3 _diff0362;
float _Y0362;
float _Cb0362;
float _Cr0362;
float _a0366;
float _TMP369;
vec3 _diff0370;
float _Y0370;
float _Cb0370;
float _Cr0370;
float _a0374;
float _TMP377;
vec3 _diff0378;
float _Y0378;
float _Cb0378;
float _Cr0378;
float _a0382;
float _TMP385;
vec3 _diff0386;
float _Y0386;
float _Cb0386;
float _Cr0386;
float _a0390;
float _TMP393;
vec3 _diff0394;
float _Y0394;
float _Cb0394;
float _Cr0394;
float _a0398;
float _TMP401;
vec3 _diff0402;
float _Y0402;
float _Cb0402;
float _Cr0402;
float _a0406;
float _TMP409;
vec3 _diff0410;
float _Y0410;
float _Cb0410;
float _Cr0410;
float _a0414;
float _TMP417;
vec3 _diff0418;
float _Y0418;
float _Cb0418;
float _Cr0418;
float _a0422;
float _TMP425;
vec3 _diff0426;
float _Y0426;
float _Cb0426;
float _Cr0426;
float _a0430;
float _TMP433;
vec3 _diff0434;
float _Y0434;
float _Cb0434;
float _Cr0434;
float _a0438;
float _TMP441;
vec3 _diff0442;
float _Y0442;
float _Cb0442;
float _Cr0442;
float _a0446;
float _TMP449;
vec3 _diff0450;
float _Y0450;
float _Cb0450;
float _Cr0450;
float _a0454;
float _TMP457;
vec3 _diff0458;
float _Y0458;
float _Cb0458;
float _Cr0458;
float _a0462;
float _TMP465;
vec3 _diff0466;
float _Y0466;
float _Cb0466;
float _Cr0466;
float _a0470;
float _TMP473;
vec3 _diff0474;
float _Y0474;
float _Cb0474;
float _Cr0474;
float _a0478;
float _TMP481;
vec3 _diff0482;
float _Y0482;
float _Cb0482;
float _Cr0482;
float _a0486;
float _TMP489;
vec3 _diff0490;
float _Y0490;
float _Cb0490;
float _Cr0490;
float _a0494;
float _TMP497;
vec3 _diff0498;
float _Y0498;
float _Cb0498;
float _Cr0498;
float _a0502;
float _TMP505;
vec3 _diff0506;
float _Y0506;
float _Cb0506;
float _Cr0506;
float _a0510;
float _TMP513;
vec3 _diff0514;
float _Y0514;
float _Cb0514;
float _Cr0514;
float _a0518;
float _TMP521;
vec3 _diff0522;
float _Y0522;
float _Cb0522;
float _Cr0522;
float _a0526;
float _TMP529;
vec3 _diff0530;
float _Y0530;
float _Cb0530;
float _Cr0530;
float _a0534;
float _TMP537;
vec3 _diff0538;
float _Y0538;
float _Cb0538;
float _Cr0538;
float _a0542;
float _TMP545;
vec3 _diff0546;
float _Y0546;
float _Cb0546;
float _Cr0546;
float _a0550;
float _TMP553;
vec3 _diff0554;
float _Y0554;
float _Cb0554;
float _Cr0554;
float _a0558;
float _TMP561;
vec3 _diff0562;
float _Y0562;
float _Cb0562;
float _Cr0562;
float _a0566;
float _TMP569;
vec3 _diff0570;
float _Y0570;
float _Cb0570;
float _Cr0570;
float _a0574;
float _TMP577;
vec3 _diff0578;
float _Y0578;
float _Cb0578;
float _Cr0578;
float _a0582;
float _TMP585;
vec3 _diff0586;
float _Y0586;
float _Cb0586;
float _Cr0586;
float _a0590;
float _TMP593;
vec3 _diff0594;
float _Y0594;
float _Cb0594;
float _Cr0594;
float _a0598;
float _TMP601;
vec3 _diff0602;
float _Y0602;
float _Cb0602;
float _Cr0602;
float _a0606;
float _TMP609;
vec3 _diff0610;
float _Y0610;
float _Cb0610;
float _Cr0610;
float _a0614;
float _TMP617;
vec3 _diff0618;
float _Y0618;
float _Cb0618;
float _Cr0618;
float _a0622;
float _TMP625;
vec3 _diff0626;
float _Y0626;
float _Cb0626;
float _Cr0626;
float _a0630;
float _TMP635;
vec3 _diff0636;
float _Y0636;
float _Cb0636;
float _Cr0636;
float _a0640;
float _TMP645;
vec3 _diff0646;
float _Y0646;
float _Cb0646;
float _Cr0646;
float _a0650;
float _TMP655;
vec3 _diff0656;
float _Y0656;
float _Cb0656;
float _Cr0656;
float _a0660;
float _TMP665;
vec3 _diff0666;
float _Y0666;
float _Cb0666;
float _Cr0666;
float _a0670;
float _TMP675;
vec3 _diff0676;
float _Y0676;
float _Cb0676;
float _Cr0676;
float _a0680;
float _TMP685;
vec3 _diff0686;
float _Y0686;
float _Cb0686;
float _Cr0686;
float _a0690;
float _TMP695;
vec3 _diff0696;
float _Y0696;
float _Cb0696;
float _Cr0696;
float _a0700;
float _TMP703;
vec3 _diff0704;
float _Y0704;
float _Cb0704;
float _Cr0704;
float _a0708;
float _TMP711;
vec3 _diff0712;
float _Y0712;
float _Cb0712;
float _Cr0712;
float _a0716;
vec3 _TMP719;
float _a0720;
vec3 _TMP723;
float _a0724;
vec3 _TMP727;
float _a0728;
vec3 _TMP731;
float _a0732;
vec3 _TMP735;
float _a0736;
vec3 _TMP739;
float _a0740;
vec3 _TMP743;
float _a0744;
vec3 _TMP747;
float _a0748;
float _TMP751;
vec3 _diff0752;
float _Y0752;
float _Cb0752;
float _Cr0752;
float _a0756;
float _TMP759;
vec3 _diff0760;
float _Y0760;
float _Cb0760;
float _Cr0760;
float _a0764;
float _TMP769;
vec3 _diff0770;
float _Y0770;
float _Cb0770;
float _Cr0770;
float _a0774;
float _TMP779;
vec3 _diff0780;
float _Y0780;
float _Cb0780;
float _Cr0780;
float _a0784;
float _TMP789;
vec3 _diff0790;
float _Y0790;
float _Cb0790;
float _Cr0790;
float _a0794;
float _TMP799;
vec3 _diff0800;
float _Y0800;
float _Cb0800;
float _Cr0800;
float _a0804;
float _TMP809;
vec3 _diff0810;
float _Y0810;
float _Cb0810;
float _Cr0810;
float _a0814;
float _TMP819;
vec3 _diff0820;
float _Y0820;
float _Cb0820;
float _Cr0820;
float _a0824;
float _TMP829;
vec3 _diff0830;
float _Y0830;
float _Cb0830;
float _Cr0830;
float _a0834;
float _TMP837;
vec3 _diff0838;
float _Y0838;
float _Cb0838;
float _Cr0838;
float _a0842;
float _TMP845;
vec3 _diff0846;
float _Y0846;
float _Cb0846;
float _Cr0846;
float _a0850;
vec3 _TMP853;
float _a0854;
vec3 _TMP857;
float _a0858;
vec3 _TMP861;
float _a0862;
vec3 _TMP865;
float _a0866;
vec3 _TMP869;
float _a0870;
vec3 _TMP873;
float _a0874;
vec3 _TMP877;
float _a0878;
vec3 _TMP881;
float _a0882;
float _TMP885;
vec3 _diff0886;
float _Y0886;
float _Cb0886;
float _Cr0886;
float _a0890;
float _TMP893;
vec3 _diff0894;
float _Y0894;
float _Cb0894;
float _Cr0894;
float _a0898;
float _TMP903;
vec3 _diff0904;
float _Y0904;
float _Cb0904;
float _Cr0904;
float _a0908;
float _TMP913;
vec3 _diff0914;
float _Y0914;
float _Cb0914;
float _Cr0914;
float _a0918;
float _TMP923;
vec3 _diff0924;
float _Y0924;
float _Cb0924;
float _Cr0924;
float _a0928;
float _TMP933;
vec3 _diff0934;
float _Y0934;
float _Cb0934;
float _Cr0934;
float _a0938;
float _TMP943;
vec3 _diff0944;
float _Y0944;
float _Cb0944;
float _Cr0944;
float _a0948;
float _TMP953;
vec3 _diff0954;
float _Y0954;
float _Cb0954;
float _Cr0954;
float _a0958;
float _TMP963;
vec3 _diff0964;
float _Y0964;
float _Cb0964;
float _Cr0964;
float _a0968;
float _TMP971;
vec3 _diff0972;
float _Y0972;
float _Cb0972;
float _Cr0972;
float _a0976;
float _TMP979;
vec3 _diff0980;
float _Y0980;
float _Cb0980;
float _Cr0980;
float _a0984;
vec3 _TMP987;
float _a0988;
vec3 _TMP991;
float _a0992;
vec3 _TMP995;
float _a0996;
vec3 _TMP999;
float _a1000;
vec3 _TMP1003;
float _a1004;
vec3 _TMP1007;
float _a1008;
vec3 _TMP1011;
float _a1012;
vec3 _TMP1015;
float _a1016;
float _TMP1019;
vec3 _diff1020;
float _Y1020;
float _Cb1020;
float _Cr1020;
float _a1024;
float _TMP1027;
vec3 _diff1028;
float _Y1028;
float _Cb1028;
float _Cr1028;
float _a1032;
float _TMP1037;
vec3 _diff1038;
float _Y1038;
float _Cb1038;
float _Cr1038;
float _a1042;
float _TMP1047;
vec3 _diff1048;
float _Y1048;
float _Cb1048;
float _Cr1048;
float _a1052;
float _TMP1057;
vec3 _diff1058;
float _Y1058;
float _Cb1058;
float _Cr1058;
float _a1062;
float _TMP1067;
vec3 _diff1068;
float _Y1068;
float _Cb1068;
float _Cr1068;
float _a1072;
float _TMP1077;
vec3 _diff1078;
float _Y1078;
float _Cb1078;
float _Cr1078;
float _a1082;
float _TMP1087;
vec3 _diff1088;
float _Y1088;
float _Cb1088;
float _Cr1088;
float _a1092;
float _TMP1097;
vec3 _diff1098;
float _Y1098;
float _Cb1098;
float _Cr1098;
float _a1102;
float _TMP1105;
vec3 _diff1106;
float _Y1106;
float _Cb1106;
float _Cr1106;
float _a1110;
float _TMP1113;
vec3 _diff1114;
float _Y1114;
float _Cb1114;
float _Cr1114;
float _a1118;
vec3 _TMP1121;
float _a1122;
vec3 _TMP1125;
float _a1126;
vec3 _TMP1129;
float _a1130;
vec3 _TMP1133;
float _a1134;
vec3 _TMP1137;
float _a1138;
vec3 _TMP1141;
float _a1142;
vec3 _TMP1145;
float _a1146;
vec3 _TMP1149;
float _a1150;
bool _TMP1153;
vec3 _TMP1161;
vec3 _TMP1167;
vec3 _TMP1173;
vec3 _TMP1179;
vec3 _TMP1185;
vec3 _TMP1191;
vec3 _TMP1197;
vec3 _TMP1203;
vec3 _TMP1209;
vec3 _TMP1215;
vec3 _TMP1221;
vec3 _TMP1227;
vec3 _TMP1233;
vec3 _TMP1239;
vec3 _TMP1245;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _f;
    ivec4 _blendResult;
    float _dist_03_011;
    float _dist_00_021;
    bool _dominantGradient1;
    float _dist_04_001;
    float _dist_05_031;
    bool _dominantGradient2;
    float _dist_00_081;
    float _dist_07_011;
    bool _dominantGradient3;
    float _dist_05_071;
    float _dist_06_001;
    bool _dominantGradient4;
    vec3 _dst[16];
    bool _haveShallowLine1;
    bool _haveSteepLine1;
    bool _needBlend1;
    bool _doLineBlend1;
    _x0218 = TEX0.xy*TextureSize;
    _f = fract(_x0218);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _TMP261 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP265 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP269 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP273 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP277 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP281 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP285 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP289 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP293 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _blendResult = ivec4(0, 0, 0, 0);
    if (!(_TMP261 == _TMP265 && _TMP273 == _TMP269 || _TMP261 == _TMP273 && _TMP265 == _TMP269)) { 
        _diff0298 = _TMP9.xyz - _TMP7.xyz;
        _Y0298 = dot(_diff0298, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0298 = 5.31519055E-01*(_diff0298.z - _Y0298);
        _Cr0298 = 6.78149998E-01*(_diff0298.x - _Y0298);
        _a0302 = _Y0298*_Y0298 + _Cb0298*_Cb0298 + _Cr0298*_Cr0298;
        _TMP212 = inversesqrt(_a0302);
        _TMP297 = 1.00000000E+00/_TMP212;
        _diff0306 = _TMP7.xyz - _TMP5.xyz;
        _Y0306 = dot(_diff0306, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0306 = 5.31519055E-01*(_diff0306.z - _Y0306);
        _Cr0306 = 6.78149998E-01*(_diff0306.x - _Y0306);
        _a0310 = _Y0306*_Y0306 + _Cb0306*_Cb0306 + _Cr0306*_Cr0306;
        _TMP212 = inversesqrt(_a0310);
        _TMP305 = 1.00000000E+00/_TMP212;
        _diff0314 = _TMP13.xyz - _TMP11.xyz;
        _Y0314 = dot(_diff0314, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0314 = 5.31519055E-01*(_diff0314.z - _Y0314);
        _Cr0314 = 6.78149998E-01*(_diff0314.x - _Y0314);
        _a0318 = _Y0314*_Y0314 + _Cb0314*_Cb0314 + _Cr0314*_Cr0314;
        _TMP212 = inversesqrt(_a0318);
        _TMP313 = 1.00000000E+00/_TMP212;
        _diff0322 = _TMP11.xyz - _TMP19.xyz;
        _Y0322 = dot(_diff0322, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0322 = 5.31519055E-01*(_diff0322.z - _Y0322);
        _Cr0322 = 6.78149998E-01*(_diff0322.x - _Y0322);
        _a0326 = _Y0322*_Y0322 + _Cb0322*_Cb0322 + _Cr0322*_Cr0322;
        _TMP212 = inversesqrt(_a0326);
        _TMP321 = 1.00000000E+00/_TMP212;
        _diff0330 = _TMP10.xyz - _TMP8.xyz;
        _Y0330 = dot(_diff0330, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0330 = 5.31519055E-01*(_diff0330.z - _Y0330);
        _Cr0330 = 6.78149998E-01*(_diff0330.x - _Y0330);
        _a0334 = _Y0330*_Y0330 + _Cb0330*_Cb0330 + _Cr0330*_Cr0330;
        _TMP212 = inversesqrt(_a0334);
        _TMP329 = 1.00000000E+00/_TMP212;
        _dist_03_011 = _TMP297 + _TMP305 + _TMP313 + _TMP321 + 4.00000000E+00*_TMP329;
        _diff0338 = _TMP6.xyz - _TMP10.xyz;
        _Y0338 = dot(_diff0338, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0338 = 5.31519055E-01*(_diff0338.z - _Y0338);
        _Cr0338 = 6.78149998E-01*(_diff0338.x - _Y0338);
        _a0342 = _Y0338*_Y0338 + _Cb0338*_Cb0338 + _Cr0338*_Cr0338;
        _TMP212 = inversesqrt(_a0342);
        _TMP337 = 1.00000000E+00/_TMP212;
        _diff0346 = _TMP10.xyz - _TMP14.xyz;
        _Y0346 = dot(_diff0346, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0346 = 5.31519055E-01*(_diff0346.z - _Y0346);
        _Cr0346 = 6.78149998E-01*(_diff0346.x - _Y0346);
        _a0350 = _Y0346*_Y0346 + _Cb0346*_Cb0346 + _Cr0346*_Cr0346;
        _TMP212 = inversesqrt(_a0350);
        _TMP345 = 1.00000000E+00/_TMP212;
        _diff0354 = _TMP4.xyz - _TMP8.xyz;
        _Y0354 = dot(_diff0354, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0354 = 5.31519055E-01*(_diff0354.z - _Y0354);
        _Cr0354 = 6.78149998E-01*(_diff0354.x - _Y0354);
        _a0358 = _Y0354*_Y0354 + _Cb0354*_Cb0354 + _Cr0354*_Cr0354;
        _TMP212 = inversesqrt(_a0358);
        _TMP353 = 1.00000000E+00/_TMP212;
        _diff0362 = _TMP8.xyz - _TMP20.xyz;
        _Y0362 = dot(_diff0362, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0362 = 5.31519055E-01*(_diff0362.z - _Y0362);
        _Cr0362 = 6.78149998E-01*(_diff0362.x - _Y0362);
        _a0366 = _Y0362*_Y0362 + _Cb0362*_Cb0362 + _Cr0362*_Cr0362;
        _TMP212 = inversesqrt(_a0366);
        _TMP361 = 1.00000000E+00/_TMP212;
        _diff0370 = _TMP7.xyz - _TMP11.xyz;
        _Y0370 = dot(_diff0370, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0370 = 5.31519055E-01*(_diff0370.z - _Y0370);
        _Cr0370 = 6.78149998E-01*(_diff0370.x - _Y0370);
        _a0374 = _Y0370*_Y0370 + _Cb0370*_Cb0370 + _Cr0370*_Cr0370;
        _TMP212 = inversesqrt(_a0374);
        _TMP369 = 1.00000000E+00/_TMP212;
        _dist_00_021 = _TMP337 + _TMP345 + _TMP353 + _TMP361 + 4.00000000E+00*_TMP369;
        _dominantGradient1 = 3.59999990E+00*_dist_03_011 < _dist_00_021;
        if (_dist_03_011 < _dist_00_021 && _TMP261 != _TMP265 && _TMP261 != _TMP273) { 
            if (_dominantGradient1) { 
                _TMP32 = 2;
            } else {
                _TMP32 = 1;
            } 
            _TMP31 = _TMP32;
        } else {
            _TMP31 = 0;
        } 
        _blendResult.z = _TMP31;
    } 
    if (!(_TMP281 == _TMP261 && _TMP277 == _TMP273 || _TMP281 == _TMP277 && _TMP261 == _TMP273)) { 
        _diff0378 = _TMP17.xyz - _TMP6.xyz;
        _Y0378 = dot(_diff0378, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0378 = 5.31519055E-01*(_diff0378.z - _Y0378);
        _Cr0378 = 6.78149998E-01*(_diff0378.x - _Y0378);
        _a0382 = _Y0378*_Y0378 + _Cb0378*_Cb0378 + _Cr0378*_Cr0378;
        _TMP212 = inversesqrt(_a0382);
        _TMP377 = 1.00000000E+00/_TMP212;
        _diff0386 = _TMP6.xyz - _TMP4.xyz;
        _Y0386 = dot(_diff0386, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0386 = 5.31519055E-01*(_diff0386.z - _Y0386);
        _Cr0386 = 6.78149998E-01*(_diff0386.x - _Y0386);
        _a0390 = _Y0386*_Y0386 + _Cb0386*_Cb0386 + _Cr0386*_Cr0386;
        _TMP212 = inversesqrt(_a0390);
        _TMP385 = 1.00000000E+00/_TMP212;
        _diff0394 = _TMP12.xyz - _TMP10.xyz;
        _Y0394 = dot(_diff0394, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0394 = 5.31519055E-01*(_diff0394.z - _Y0394);
        _Cr0394 = 6.78149998E-01*(_diff0394.x - _Y0394);
        _a0398 = _Y0394*_Y0394 + _Cb0394*_Cb0394 + _Cr0394*_Cr0394;
        _TMP212 = inversesqrt(_a0398);
        _TMP393 = 1.00000000E+00/_TMP212;
        _diff0402 = _TMP10.xyz - _TMP8.xyz;
        _Y0402 = dot(_diff0402, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0402 = 5.31519055E-01*(_diff0402.z - _Y0402);
        _Cr0402 = 6.78149998E-01*(_diff0402.x - _Y0402);
        _a0406 = _Y0402*_Y0402 + _Cb0402*_Cb0402 + _Cr0402*_Cr0402;
        _TMP212 = inversesqrt(_a0406);
        _TMP401 = 1.00000000E+00/_TMP212;
        _diff0410 = _TMP9.xyz - _TMP7.xyz;
        _Y0410 = dot(_diff0410, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0410 = 5.31519055E-01*(_diff0410.z - _Y0410);
        _Cr0410 = 6.78149998E-01*(_diff0410.x - _Y0410);
        _a0414 = _Y0410*_Y0410 + _Cb0410*_Cb0410 + _Cr0410*_Cr0410;
        _TMP212 = inversesqrt(_a0414);
        _TMP409 = 1.00000000E+00/_TMP212;
        _dist_04_001 = _TMP377 + _TMP385 + _TMP393 + _TMP401 + 4.00000000E+00*_TMP409;
        _diff0418 = _TMP16.xyz - _TMP9.xyz;
        _Y0418 = dot(_diff0418, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0418 = 5.31519055E-01*(_diff0418.z - _Y0418);
        _Cr0418 = 6.78149998E-01*(_diff0418.x - _Y0418);
        _a0422 = _Y0418*_Y0418 + _Cb0418*_Cb0418 + _Cr0418*_Cr0418;
        _TMP212 = inversesqrt(_a0422);
        _TMP417 = 1.00000000E+00/_TMP212;
        _diff0426 = _TMP9.xyz - _TMP13.xyz;
        _Y0426 = dot(_diff0426, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0426 = 5.31519055E-01*(_diff0426.z - _Y0426);
        _Cr0426 = 6.78149998E-01*(_diff0426.x - _Y0426);
        _a0430 = _Y0426*_Y0426 + _Cb0426*_Cb0426 + _Cr0426*_Cr0426;
        _TMP212 = inversesqrt(_a0430);
        _TMP425 = 1.00000000E+00/_TMP212;
        _diff0434 = _TMP3.xyz - _TMP7.xyz;
        _Y0434 = dot(_diff0434, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0434 = 5.31519055E-01*(_diff0434.z - _Y0434);
        _Cr0434 = 6.78149998E-01*(_diff0434.x - _Y0434);
        _a0438 = _Y0434*_Y0434 + _Cb0434*_Cb0434 + _Cr0434*_Cr0434;
        _TMP212 = inversesqrt(_a0438);
        _TMP433 = 1.00000000E+00/_TMP212;
        _diff0442 = _TMP7.xyz - _TMP11.xyz;
        _Y0442 = dot(_diff0442, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0442 = 5.31519055E-01*(_diff0442.z - _Y0442);
        _Cr0442 = 6.78149998E-01*(_diff0442.x - _Y0442);
        _a0446 = _Y0442*_Y0442 + _Cb0442*_Cb0442 + _Cr0442*_Cr0442;
        _TMP212 = inversesqrt(_a0446);
        _TMP441 = 1.00000000E+00/_TMP212;
        _diff0450 = _TMP6.xyz - _TMP10.xyz;
        _Y0450 = dot(_diff0450, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0450 = 5.31519055E-01*(_diff0450.z - _Y0450);
        _Cr0450 = 6.78149998E-01*(_diff0450.x - _Y0450);
        _a0454 = _Y0450*_Y0450 + _Cb0450*_Cb0450 + _Cr0450*_Cr0450;
        _TMP212 = inversesqrt(_a0454);
        _TMP449 = 1.00000000E+00/_TMP212;
        _dist_05_031 = _TMP417 + _TMP425 + _TMP433 + _TMP441 + 4.00000000E+00*_TMP449;
        _dominantGradient2 = 3.59999990E+00*_dist_05_031 < _dist_04_001;
        if (_dist_04_001 > _dist_05_031 && _TMP261 != _TMP281 && _TMP261 != _TMP273) { 
            if (_dominantGradient2) { 
                _TMP44 = 2;
            } else {
                _TMP44 = 1;
            } 
            _TMP43 = _TMP44;
        } else {
            _TMP43 = 0;
        } 
        _blendResult.w = _TMP43;
    } 
    if (!(_TMP289 == _TMP293 && _TMP261 == _TMP265 || _TMP289 == _TMP261 && _TMP293 == _TMP265)) { 
        _diff0458 = _TMP6.xyz - _TMP4.xyz;
        _Y0458 = dot(_diff0458, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0458 = 5.31519055E-01*(_diff0458.z - _Y0458);
        _Cr0458 = 6.78149998E-01*(_diff0458.x - _Y0458);
        _a0462 = _Y0458*_Y0458 + _Cb0458*_Cb0458 + _Cr0458*_Cr0458;
        _TMP212 = inversesqrt(_a0462);
        _TMP457 = 1.00000000E+00/_TMP212;
        _diff0466 = _TMP4.xyz - _TMP2.xyz;
        _Y0466 = dot(_diff0466, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0466 = 5.31519055E-01*(_diff0466.z - _Y0466);
        _Cr0466 = 6.78149998E-01*(_diff0466.x - _Y0466);
        _a0470 = _Y0466*_Y0466 + _Cb0466*_Cb0466 + _Cr0466*_Cr0466;
        _TMP212 = inversesqrt(_a0470);
        _TMP465 = 1.00000000E+00/_TMP212;
        _diff0474 = _TMP10.xyz - _TMP8.xyz;
        _Y0474 = dot(_diff0474, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0474 = 5.31519055E-01*(_diff0474.z - _Y0474);
        _Cr0474 = 6.78149998E-01*(_diff0474.x - _Y0474);
        _a0478 = _Y0474*_Y0474 + _Cb0474*_Cb0474 + _Cr0474*_Cr0474;
        _TMP212 = inversesqrt(_a0478);
        _TMP473 = 1.00000000E+00/_TMP212;
        _diff0482 = _TMP8.xyz - _TMP18.xyz;
        _Y0482 = dot(_diff0482, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0482 = 5.31519055E-01*(_diff0482.z - _Y0482);
        _Cr0482 = 6.78149998E-01*(_diff0482.x - _Y0482);
        _a0486 = _Y0482*_Y0482 + _Cb0482*_Cb0482 + _Cr0482*_Cr0482;
        _TMP212 = inversesqrt(_a0486);
        _TMP481 = 1.00000000E+00/_TMP212;
        _diff0490 = _TMP7.xyz - _TMP5.xyz;
        _Y0490 = dot(_diff0490, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0490 = 5.31519055E-01*(_diff0490.z - _Y0490);
        _Cr0490 = 6.78149998E-01*(_diff0490.x - _Y0490);
        _a0494 = _Y0490*_Y0490 + _Cb0490*_Cb0490 + _Cr0490*_Cr0490;
        _TMP212 = inversesqrt(_a0494);
        _TMP489 = 1.00000000E+00/_TMP212;
        _dist_00_081 = _TMP457 + _TMP465 + _TMP473 + _TMP481 + 4.00000000E+00*_TMP489;
        _diff0498 = _TMP3.xyz - _TMP7.xyz;
        _Y0498 = dot(_diff0498, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0498 = 5.31519055E-01*(_diff0498.z - _Y0498);
        _Cr0498 = 6.78149998E-01*(_diff0498.x - _Y0498);
        _a0502 = _Y0498*_Y0498 + _Cb0498*_Cb0498 + _Cr0498*_Cr0498;
        _TMP212 = inversesqrt(_a0502);
        _TMP497 = 1.00000000E+00/_TMP212;
        _diff0506 = _TMP7.xyz - _TMP11.xyz;
        _Y0506 = dot(_diff0506, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0506 = 5.31519055E-01*(_diff0506.z - _Y0506);
        _Cr0506 = 6.78149998E-01*(_diff0506.x - _Y0506);
        _a0510 = _Y0506*_Y0506 + _Cb0506*_Cb0506 + _Cr0506*_Cr0506;
        _TMP212 = inversesqrt(_a0510);
        _TMP505 = 1.00000000E+00/_TMP212;
        _diff0514 = _TMP1.xyz - _TMP5.xyz;
        _Y0514 = dot(_diff0514, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0514 = 5.31519055E-01*(_diff0514.z - _Y0514);
        _Cr0514 = 6.78149998E-01*(_diff0514.x - _Y0514);
        _a0518 = _Y0514*_Y0514 + _Cb0514*_Cb0514 + _Cr0514*_Cr0514;
        _TMP212 = inversesqrt(_a0518);
        _TMP513 = 1.00000000E+00/_TMP212;
        _diff0522 = _TMP5.xyz - _TMP19.xyz;
        _Y0522 = dot(_diff0522, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0522 = 5.31519055E-01*(_diff0522.z - _Y0522);
        _Cr0522 = 6.78149998E-01*(_diff0522.x - _Y0522);
        _a0526 = _Y0522*_Y0522 + _Cb0522*_Cb0522 + _Cr0522*_Cr0522;
        _TMP212 = inversesqrt(_a0526);
        _TMP521 = 1.00000000E+00/_TMP212;
        _diff0530 = _TMP4.xyz - _TMP8.xyz;
        _Y0530 = dot(_diff0530, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0530 = 5.31519055E-01*(_diff0530.z - _Y0530);
        _Cr0530 = 6.78149998E-01*(_diff0530.x - _Y0530);
        _a0534 = _Y0530*_Y0530 + _Cb0530*_Cb0530 + _Cr0530*_Cr0530;
        _TMP212 = inversesqrt(_a0534);
        _TMP529 = 1.00000000E+00/_TMP212;
        _dist_07_011 = _TMP497 + _TMP505 + _TMP513 + _TMP521 + 4.00000000E+00*_TMP529;
        _dominantGradient3 = 3.59999990E+00*_dist_07_011 < _dist_00_081;
        if (_dist_00_081 > _dist_07_011 && _TMP261 != _TMP289 && _TMP261 != _TMP265) { 
            if (_dominantGradient3) { 
                _TMP56 = 2;
            } else {
                _TMP56 = 1;
            } 
            _TMP55 = _TMP56;
        } else {
            _TMP55 = 0;
        } 
        _blendResult.y = _TMP55;
    } 
    if (!(_TMP285 == _TMP289 && _TMP281 == _TMP261 || _TMP285 == _TMP281 && _TMP289 == _TMP261)) { 
        _diff0538 = _TMP16.xyz - _TMP3.xyz;
        _Y0538 = dot(_diff0538, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0538 = 5.31519055E-01*(_diff0538.z - _Y0538);
        _Cr0538 = 6.78149998E-01*(_diff0538.x - _Y0538);
        _a0542 = _Y0538*_Y0538 + _Cb0538*_Cb0538 + _Cr0538*_Cr0538;
        _TMP212 = inversesqrt(_a0542);
        _TMP537 = 1.00000000E+00/_TMP212;
        _diff0546 = _TMP3.xyz - _TMP1.xyz;
        _Y0546 = dot(_diff0546, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0546 = 5.31519055E-01*(_diff0546.z - _Y0546);
        _Cr0546 = 6.78149998E-01*(_diff0546.x - _Y0546);
        _a0550 = _Y0546*_Y0546 + _Cb0546*_Cb0546 + _Cr0546*_Cr0546;
        _TMP212 = inversesqrt(_a0550);
        _TMP545 = 1.00000000E+00/_TMP212;
        _diff0554 = _TMP9.xyz - _TMP7.xyz;
        _Y0554 = dot(_diff0554, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0554 = 5.31519055E-01*(_diff0554.z - _Y0554);
        _Cr0554 = 6.78149998E-01*(_diff0554.x - _Y0554);
        _a0558 = _Y0554*_Y0554 + _Cb0554*_Cb0554 + _Cr0554*_Cr0554;
        _TMP212 = inversesqrt(_a0558);
        _TMP553 = 1.00000000E+00/_TMP212;
        _diff0562 = _TMP7.xyz - _TMP5.xyz;
        _Y0562 = dot(_diff0562, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0562 = 5.31519055E-01*(_diff0562.z - _Y0562);
        _Cr0562 = 6.78149998E-01*(_diff0562.x - _Y0562);
        _a0566 = _Y0562*_Y0562 + _Cb0562*_Cb0562 + _Cr0562*_Cr0562;
        _TMP212 = inversesqrt(_a0566);
        _TMP561 = 1.00000000E+00/_TMP212;
        _diff0570 = _TMP6.xyz - _TMP4.xyz;
        _Y0570 = dot(_diff0570, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0570 = 5.31519055E-01*(_diff0570.z - _Y0570);
        _Cr0570 = 6.78149998E-01*(_diff0570.x - _Y0570);
        _a0574 = _Y0570*_Y0570 + _Cb0570*_Cb0570 + _Cr0570*_Cr0570;
        _TMP212 = inversesqrt(_a0574);
        _TMP569 = 1.00000000E+00/_TMP212;
        _dist_05_071 = _TMP537 + _TMP545 + _TMP553 + _TMP561 + 4.00000000E+00*_TMP569;
        _diff0578 = _TMP15.xyz - _TMP6.xyz;
        _Y0578 = dot(_diff0578, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0578 = 5.31519055E-01*(_diff0578.z - _Y0578);
        _Cr0578 = 6.78149998E-01*(_diff0578.x - _Y0578);
        _a0582 = _Y0578*_Y0578 + _Cb0578*_Cb0578 + _Cr0578*_Cr0578;
        _TMP212 = inversesqrt(_a0582);
        _TMP577 = 1.00000000E+00/_TMP212;
        _diff0586 = _TMP6.xyz - _TMP10.xyz;
        _Y0586 = dot(_diff0586, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0586 = 5.31519055E-01*(_diff0586.z - _Y0586);
        _Cr0586 = 6.78149998E-01*(_diff0586.x - _Y0586);
        _a0590 = _Y0586*_Y0586 + _Cb0586*_Cb0586 + _Cr0586*_Cr0586;
        _TMP212 = inversesqrt(_a0590);
        _TMP585 = 1.00000000E+00/_TMP212;
        _diff0594 = _TMP0.xyz - _TMP4.xyz;
        _Y0594 = dot(_diff0594, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0594 = 5.31519055E-01*(_diff0594.z - _Y0594);
        _Cr0594 = 6.78149998E-01*(_diff0594.x - _Y0594);
        _a0598 = _Y0594*_Y0594 + _Cb0594*_Cb0594 + _Cr0594*_Cr0594;
        _TMP212 = inversesqrt(_a0598);
        _TMP593 = 1.00000000E+00/_TMP212;
        _diff0602 = _TMP4.xyz - _TMP8.xyz;
        _Y0602 = dot(_diff0602, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0602 = 5.31519055E-01*(_diff0602.z - _Y0602);
        _Cr0602 = 6.78149998E-01*(_diff0602.x - _Y0602);
        _a0606 = _Y0602*_Y0602 + _Cb0602*_Cb0602 + _Cr0602*_Cr0602;
        _TMP212 = inversesqrt(_a0606);
        _TMP601 = 1.00000000E+00/_TMP212;
        _diff0610 = _TMP3.xyz - _TMP7.xyz;
        _Y0610 = dot(_diff0610, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0610 = 5.31519055E-01*(_diff0610.z - _Y0610);
        _Cr0610 = 6.78149998E-01*(_diff0610.x - _Y0610);
        _a0614 = _Y0610*_Y0610 + _Cb0610*_Cb0610 + _Cr0610*_Cr0610;
        _TMP212 = inversesqrt(_a0614);
        _TMP609 = 1.00000000E+00/_TMP212;
        _dist_06_001 = _TMP577 + _TMP585 + _TMP593 + _TMP601 + 4.00000000E+00*_TMP609;
        _dominantGradient4 = 3.59999990E+00*_dist_05_071 < _dist_06_001;
        if (_dist_05_071 < _dist_06_001 && _TMP261 != _TMP281 && _TMP261 != _TMP289) { 
            if (_dominantGradient4) { 
                _TMP68 = 2;
            } else {
                _TMP68 = 1;
            } 
            _TMP67 = _TMP68;
        } else {
            _TMP67 = 0;
        } 
        _blendResult.x = _TMP67;
    } 
    _dst[0] = _TMP7.xyz;
    _dst[1] = _TMP7.xyz;
    _dst[2] = _TMP7.xyz;
    _dst[3] = _TMP7.xyz;
    _dst[4] = _TMP7.xyz;
    _dst[5] = _TMP7.xyz;
    _dst[6] = _TMP7.xyz;
    _dst[7] = _TMP7.xyz;
    _dst[8] = _TMP7.xyz;
    _dst[9] = _TMP7.xyz;
    _dst[10] = _TMP7.xyz;
    _dst[11] = _TMP7.xyz;
    _dst[12] = _TMP7.xyz;
    _dst[13] = _TMP7.xyz;
    _dst[14] = _TMP7.xyz;
    _dst[15] = _TMP7.xyz;
    _TMP210 = bvec4(_blendResult.x != 0, _blendResult.y != 0, _blendResult.z != 0, _blendResult.w != 0);
    _TMP1153 = _TMP210.x || _TMP210.y || _TMP210.z || _TMP210.w;
    if (_TMP1153) { 
        _diff0618 = _TMP8.xyz - _TMP9.xyz;
        _Y0618 = dot(_diff0618, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0618 = 5.31519055E-01*(_diff0618.z - _Y0618);
        _Cr0618 = 6.78149998E-01*(_diff0618.x - _Y0618);
        _a0622 = _Y0618*_Y0618 + _Cb0618*_Cb0618 + _Cr0618*_Cr0618;
        _TMP212 = inversesqrt(_a0622);
        _TMP617 = 1.00000000E+00/_TMP212;
        _diff0626 = _TMP10.xyz - _TMP5.xyz;
        _Y0626 = dot(_diff0626, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0626 = 5.31519055E-01*(_diff0626.z - _Y0626);
        _Cr0626 = 6.78149998E-01*(_diff0626.x - _Y0626);
        _a0630 = _Y0626*_Y0626 + _Cb0626*_Cb0626 + _Cr0626*_Cr0626;
        _TMP212 = inversesqrt(_a0630);
        _TMP625 = 1.00000000E+00/_TMP212;
        _haveShallowLine1 = 2.20000005E+00*_TMP617 <= _TMP625 && _TMP261 != _TMP277 && _TMP281 != _TMP277;
        _haveSteepLine1 = 2.20000005E+00*_TMP625 <= _TMP617 && _TMP261 != _TMP293 && _TMP289 != _TMP293;
        _needBlend1 = _blendResult.z != 0;
        _diff0636 = _TMP7.xyz - _TMP9.xyz;
        _Y0636 = dot(_diff0636, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0636 = 5.31519055E-01*(_diff0636.z - _Y0636);
        _Cr0636 = 6.78149998E-01*(_diff0636.x - _Y0636);
        _a0640 = _Y0636*_Y0636 + _Cb0636*_Cb0636 + _Cr0636*_Cr0636;
        _TMP212 = inversesqrt(_a0640);
        _TMP635 = 1.00000000E+00/_TMP212;
        _TMP69 = _TMP635 < 1.17647059E-01;
        _diff0646 = _TMP7.xyz - _TMP5.xyz;
        _Y0646 = dot(_diff0646, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0646 = 5.31519055E-01*(_diff0646.z - _Y0646);
        _Cr0646 = 6.78149998E-01*(_diff0646.x - _Y0646);
        _a0650 = _Y0646*_Y0646 + _Cb0646*_Cb0646 + _Cr0646*_Cr0646;
        _TMP212 = inversesqrt(_a0650);
        _TMP645 = 1.00000000E+00/_TMP212;
        _TMP70 = _TMP645 < 1.17647059E-01;
        _diff0656 = _TMP9.xyz - _TMP10.xyz;
        _Y0656 = dot(_diff0656, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0656 = 5.31519055E-01*(_diff0656.z - _Y0656);
        _Cr0656 = 6.78149998E-01*(_diff0656.x - _Y0656);
        _a0660 = _Y0656*_Y0656 + _Cb0656*_Cb0656 + _Cr0656*_Cr0656;
        _TMP212 = inversesqrt(_a0660);
        _TMP655 = 1.00000000E+00/_TMP212;
        _TMP71 = _TMP655 < 1.17647059E-01;
        _diff0666 = _TMP10.xyz - _TMP11.xyz;
        _Y0666 = dot(_diff0666, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0666 = 5.31519055E-01*(_diff0666.z - _Y0666);
        _Cr0666 = 6.78149998E-01*(_diff0666.x - _Y0666);
        _a0670 = _Y0666*_Y0666 + _Cb0666*_Cb0666 + _Cr0666*_Cr0666;
        _TMP212 = inversesqrt(_a0670);
        _TMP665 = 1.00000000E+00/_TMP212;
        _TMP72 = _TMP665 < 1.17647059E-01;
        _diff0676 = _TMP11.xyz - _TMP8.xyz;
        _Y0676 = dot(_diff0676, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0676 = 5.31519055E-01*(_diff0676.z - _Y0676);
        _Cr0676 = 6.78149998E-01*(_diff0676.x - _Y0676);
        _a0680 = _Y0676*_Y0676 + _Cb0676*_Cb0676 + _Cr0676*_Cr0676;
        _TMP212 = inversesqrt(_a0680);
        _TMP675 = 1.00000000E+00/_TMP212;
        _TMP73 = _TMP675 < 1.17647059E-01;
        _diff0686 = _TMP8.xyz - _TMP5.xyz;
        _Y0686 = dot(_diff0686, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0686 = 5.31519055E-01*(_diff0686.z - _Y0686);
        _Cr0686 = 6.78149998E-01*(_diff0686.x - _Y0686);
        _a0690 = _Y0686*_Y0686 + _Cb0686*_Cb0686 + _Cr0686*_Cr0686;
        _TMP212 = inversesqrt(_a0690);
        _TMP685 = 1.00000000E+00/_TMP212;
        _TMP74 = _TMP685 < 1.17647059E-01;
        _diff0696 = _TMP7.xyz - _TMP11.xyz;
        _Y0696 = dot(_diff0696, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0696 = 5.31519055E-01*(_diff0696.z - _Y0696);
        _Cr0696 = 6.78149998E-01*(_diff0696.x - _Y0696);
        _a0700 = _Y0696*_Y0696 + _Cb0696*_Cb0696 + _Cr0696*_Cr0696;
        _TMP212 = inversesqrt(_a0700);
        _TMP695 = 1.00000000E+00/_TMP212;
        _TMP75 = _TMP695 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.z >= 2 || !(_blendResult.y != 0 && !_TMP69 || _blendResult.w != 0 && !_TMP70 || _TMP71 && _TMP72 && _TMP73 && _TMP74 && !_TMP75);
        _diff0704 = _TMP7.xyz - _TMP8.xyz;
        _Y0704 = dot(_diff0704, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0704 = 5.31519055E-01*(_diff0704.z - _Y0704);
        _Cr0704 = 6.78149998E-01*(_diff0704.x - _Y0704);
        _a0708 = _Y0704*_Y0704 + _Cb0704*_Cb0704 + _Cr0704*_Cr0704;
        _TMP212 = inversesqrt(_a0708);
        _TMP703 = 1.00000000E+00/_TMP212;
        _diff0712 = _TMP7.xyz - _TMP10.xyz;
        _Y0712 = dot(_diff0712, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0712 = 5.31519055E-01*(_diff0712.z - _Y0712);
        _Cr0712 = 6.78149998E-01*(_diff0712.x - _Y0712);
        _a0716 = _Y0712*_Y0712 + _Cb0712*_Cb0712 + _Cr0712*_Cr0712;
        _TMP212 = inversesqrt(_a0716);
        _TMP711 = 1.00000000E+00/_TMP212;
        if (_TMP703 <= _TMP711) { 
            _TMP76 = _TMP8.xyz;
        } else {
            _TMP76 = _TMP10.xyz;
        } 
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP81 = 3.33333343E-01;
                } else {
                    _TMP81 = 2.50000000E-01;
                } 
                _TMP80 = _TMP81;
            } else {
                if (_haveSteepLine1) { 
                    _TMP82 = 2.50000000E-01;
                } else {
                    _TMP82 = 0.00000000E+00;
                } 
                _TMP80 = _TMP82;
            } 
            _TMP79 = _TMP80;
        } else {
            _TMP79 = 0.00000000E+00;
        } 
        _a0720 = float(_TMP79);
        _TMP719 = _TMP7.xyz + _a0720*(_TMP76 - _TMP7.xyz);
        _dst[2] = _TMP719;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP83 = 2.50000000E-01;
        } else {
            _TMP83 = 0.00000000E+00;
        } 
        _a0724 = float(_TMP83);
        _TMP723 = _TMP7.xyz + _a0724*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP84 = 7.50000000E-01;
        } else {
            _TMP84 = 0.00000000E+00;
        } 
        _a0728 = float(_TMP84);
        _TMP727 = _TMP7.xyz + _a0728*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP87 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP88 = 7.50000000E-01;
                    } else {
                        _TMP88 = 5.00000000E-01;
                    } 
                    _TMP87 = _TMP88;
                } 
                _TMP86 = _TMP87;
            } else {
                _TMP86 = 8.67770463E-02;
            } 
            _TMP85 = _TMP86;
        } else {
            _TMP85 = 0.00000000E+00;
        } 
        _a0732 = float(_TMP85);
        _TMP731 = _TMP7.xyz + _a0732*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP90 = 1.00000000E+00;
            } else {
                _TMP90 = 6.84853256E-01;
            } 
            _TMP89 = _TMP90;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a0736 = float(_TMP89);
        _TMP735 = _TMP7.xyz + _a0736*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP93 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP94 = 7.50000000E-01;
                    } else {
                        _TMP94 = 5.00000000E-01;
                    } 
                    _TMP93 = _TMP94;
                } 
                _TMP92 = _TMP93;
            } else {
                _TMP92 = 8.67770463E-02;
            } 
            _TMP91 = _TMP92;
        } else {
            _TMP91 = 0.00000000E+00;
        } 
        _a0740 = float(_TMP91);
        _TMP739 = _TMP7.xyz + _a0740*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP95 = 7.50000000E-01;
        } else {
            _TMP95 = 0.00000000E+00;
        } 
        _a0744 = float(_TMP95);
        _TMP743 = _TMP7.xyz + _a0744*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP96 = 2.50000000E-01;
        } else {
            _TMP96 = 0.00000000E+00;
        } 
        _a0748 = float(_TMP96);
        _TMP747 = _TMP7.xyz + _a0748*(_TMP76 - _TMP7.xyz);
        _diff0752 = _TMP4.xyz - _TMP11.xyz;
        _Y0752 = dot(_diff0752, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0752 = 5.31519055E-01*(_diff0752.z - _Y0752);
        _Cr0752 = 6.78149998E-01*(_diff0752.x - _Y0752);
        _a0756 = _Y0752*_Y0752 + _Cb0752*_Cb0752 + _Cr0752*_Cr0752;
        _TMP212 = inversesqrt(_a0756);
        _TMP751 = 1.00000000E+00/_TMP212;
        _diff0760 = _TMP8.xyz - _TMP3.xyz;
        _Y0760 = dot(_diff0760, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0760 = 5.31519055E-01*(_diff0760.z - _Y0760);
        _Cr0760 = 6.78149998E-01*(_diff0760.x - _Y0760);
        _a0764 = _Y0760*_Y0760 + _Cb0760*_Cb0760 + _Cr0760*_Cr0760;
        _TMP212 = inversesqrt(_a0764);
        _TMP759 = 1.00000000E+00/_TMP212;
        _haveShallowLine1 = 2.20000005E+00*_TMP751 <= _TMP759 && _TMP261 != _TMP269 && _TMP273 != _TMP269;
        _haveSteepLine1 = 2.20000005E+00*_TMP759 <= _TMP751 && _TMP261 != _TMP285 && _TMP281 != _TMP285;
        _needBlend1 = _blendResult.y != 0;
        _diff0770 = _TMP7.xyz - _TMP11.xyz;
        _Y0770 = dot(_diff0770, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0770 = 5.31519055E-01*(_diff0770.z - _Y0770);
        _Cr0770 = 6.78149998E-01*(_diff0770.x - _Y0770);
        _a0774 = _Y0770*_Y0770 + _Cb0770*_Cb0770 + _Cr0770*_Cr0770;
        _TMP212 = inversesqrt(_a0774);
        _TMP769 = 1.00000000E+00/_TMP212;
        _TMP97 = _TMP769 < 1.17647059E-01;
        _diff0780 = _TMP7.xyz - _TMP3.xyz;
        _Y0780 = dot(_diff0780, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0780 = 5.31519055E-01*(_diff0780.z - _Y0780);
        _Cr0780 = 6.78149998E-01*(_diff0780.x - _Y0780);
        _a0784 = _Y0780*_Y0780 + _Cb0780*_Cb0780 + _Cr0780*_Cr0780;
        _TMP212 = inversesqrt(_a0784);
        _TMP779 = 1.00000000E+00/_TMP212;
        _TMP98 = _TMP779 < 1.17647059E-01;
        _diff0790 = _TMP11.xyz - _TMP8.xyz;
        _Y0790 = dot(_diff0790, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0790 = 5.31519055E-01*(_diff0790.z - _Y0790);
        _Cr0790 = 6.78149998E-01*(_diff0790.x - _Y0790);
        _a0794 = _Y0790*_Y0790 + _Cb0790*_Cb0790 + _Cr0790*_Cr0790;
        _TMP212 = inversesqrt(_a0794);
        _TMP789 = 1.00000000E+00/_TMP212;
        _TMP99 = _TMP789 < 1.17647059E-01;
        _diff0800 = _TMP8.xyz - _TMP5.xyz;
        _Y0800 = dot(_diff0800, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0800 = 5.31519055E-01*(_diff0800.z - _Y0800);
        _Cr0800 = 6.78149998E-01*(_diff0800.x - _Y0800);
        _a0804 = _Y0800*_Y0800 + _Cb0800*_Cb0800 + _Cr0800*_Cr0800;
        _TMP212 = inversesqrt(_a0804);
        _TMP799 = 1.00000000E+00/_TMP212;
        _TMP100 = _TMP799 < 1.17647059E-01;
        _diff0810 = _TMP5.xyz - _TMP4.xyz;
        _Y0810 = dot(_diff0810, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0810 = 5.31519055E-01*(_diff0810.z - _Y0810);
        _Cr0810 = 6.78149998E-01*(_diff0810.x - _Y0810);
        _a0814 = _Y0810*_Y0810 + _Cb0810*_Cb0810 + _Cr0810*_Cr0810;
        _TMP212 = inversesqrt(_a0814);
        _TMP809 = 1.00000000E+00/_TMP212;
        _TMP101 = _TMP809 < 1.17647059E-01;
        _diff0820 = _TMP4.xyz - _TMP3.xyz;
        _Y0820 = dot(_diff0820, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0820 = 5.31519055E-01*(_diff0820.z - _Y0820);
        _Cr0820 = 6.78149998E-01*(_diff0820.x - _Y0820);
        _a0824 = _Y0820*_Y0820 + _Cb0820*_Cb0820 + _Cr0820*_Cr0820;
        _TMP212 = inversesqrt(_a0824);
        _TMP819 = 1.00000000E+00/_TMP212;
        _TMP102 = _TMP819 < 1.17647059E-01;
        _diff0830 = _TMP7.xyz - _TMP5.xyz;
        _Y0830 = dot(_diff0830, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0830 = 5.31519055E-01*(_diff0830.z - _Y0830);
        _Cr0830 = 6.78149998E-01*(_diff0830.x - _Y0830);
        _a0834 = _Y0830*_Y0830 + _Cb0830*_Cb0830 + _Cr0830*_Cr0830;
        _TMP212 = inversesqrt(_a0834);
        _TMP829 = 1.00000000E+00/_TMP212;
        _TMP103 = _TMP829 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.y >= 2 || !(_blendResult.x != 0 && !_TMP97 || _blendResult.z != 0 && !_TMP98 || _TMP99 && _TMP100 && _TMP101 && _TMP102 && !_TMP103);
        _diff0838 = _TMP7.xyz - _TMP4.xyz;
        _Y0838 = dot(_diff0838, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0838 = 5.31519055E-01*(_diff0838.z - _Y0838);
        _Cr0838 = 6.78149998E-01*(_diff0838.x - _Y0838);
        _a0842 = _Y0838*_Y0838 + _Cb0838*_Cb0838 + _Cr0838*_Cr0838;
        _TMP212 = inversesqrt(_a0842);
        _TMP837 = 1.00000000E+00/_TMP212;
        _diff0846 = _TMP7.xyz - _TMP8.xyz;
        _Y0846 = dot(_diff0846, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0846 = 5.31519055E-01*(_diff0846.z - _Y0846);
        _Cr0846 = 6.78149998E-01*(_diff0846.x - _Y0846);
        _a0850 = _Y0846*_Y0846 + _Cb0846*_Cb0846 + _Cr0846*_Cr0846;
        _TMP212 = inversesqrt(_a0850);
        _TMP845 = 1.00000000E+00/_TMP212;
        if (_TMP837 <= _TMP845) { 
            _TMP104 = _TMP4.xyz;
        } else {
            _TMP104 = _TMP8.xyz;
        } 
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP109 = 3.33333343E-01;
                } else {
                    _TMP109 = 2.50000000E-01;
                } 
                _TMP108 = _TMP109;
            } else {
                if (_haveSteepLine1) { 
                    _TMP110 = 2.50000000E-01;
                } else {
                    _TMP110 = 0.00000000E+00;
                } 
                _TMP108 = _TMP110;
            } 
            _TMP107 = _TMP108;
        } else {
            _TMP107 = 0.00000000E+00;
        } 
        _a0854 = float(_TMP107);
        _TMP853 = _TMP7.xyz + _a0854*(_TMP104 - _TMP7.xyz);
        _dst[1] = _TMP853;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP111 = 2.50000000E-01;
        } else {
            _TMP111 = 0.00000000E+00;
        } 
        _a0858 = float(_TMP111);
        _TMP857 = _TMP7.xyz + _a0858*(_TMP104 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP112 = 7.50000000E-01;
        } else {
            _TMP112 = 0.00000000E+00;
        } 
        _a0862 = float(_TMP112);
        _TMP861 = _TMP7.xyz + _a0862*(_TMP104 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP115 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP116 = 7.50000000E-01;
                    } else {
                        _TMP116 = 5.00000000E-01;
                    } 
                    _TMP115 = _TMP116;
                } 
                _TMP114 = _TMP115;
            } else {
                _TMP114 = 8.67770463E-02;
            } 
            _TMP113 = _TMP114;
        } else {
            _TMP113 = 0.00000000E+00;
        } 
        _a0866 = float(_TMP113);
        _TMP865 = _TMP7.xyz + _a0866*(_TMP104 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP118 = 1.00000000E+00;
            } else {
                _TMP118 = 6.84853256E-01;
            } 
            _TMP117 = _TMP118;
        } else {
            _TMP117 = 0.00000000E+00;
        } 
        _a0870 = float(_TMP117);
        _TMP869 = _TMP723 + _a0870*(_TMP104 - _TMP723);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP121 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP122 = 7.50000000E-01;
                    } else {
                        _TMP122 = 5.00000000E-01;
                    } 
                    _TMP121 = _TMP122;
                } 
                _TMP120 = _TMP121;
            } else {
                _TMP120 = 8.67770463E-02;
            } 
            _TMP119 = _TMP120;
        } else {
            _TMP119 = 0.00000000E+00;
        } 
        _a0874 = float(_TMP119);
        _TMP873 = _TMP727 + _a0874*(_TMP104 - _TMP727);
        _dst[10] = _TMP873;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP123 = 7.50000000E-01;
        } else {
            _TMP123 = 0.00000000E+00;
        } 
        _a0878 = float(_TMP123);
        _TMP877 = _TMP731 + _a0878*(_TMP104 - _TMP731);
        _dst[11] = _TMP877;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP124 = 2.50000000E-01;
        } else {
            _TMP124 = 0.00000000E+00;
        } 
        _a0882 = float(_TMP124);
        _TMP881 = _TMP735 + _a0882*(_TMP104 - _TMP735);
        _diff0886 = _TMP6.xyz - _TMP5.xyz;
        _Y0886 = dot(_diff0886, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0886 = 5.31519055E-01*(_diff0886.z - _Y0886);
        _Cr0886 = 6.78149998E-01*(_diff0886.x - _Y0886);
        _a0890 = _Y0886*_Y0886 + _Cb0886*_Cb0886 + _Cr0886*_Cr0886;
        _TMP212 = inversesqrt(_a0890);
        _TMP885 = 1.00000000E+00/_TMP212;
        _diff0894 = _TMP4.xyz - _TMP9.xyz;
        _Y0894 = dot(_diff0894, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0894 = 5.31519055E-01*(_diff0894.z - _Y0894);
        _Cr0894 = 6.78149998E-01*(_diff0894.x - _Y0894);
        _a0898 = _Y0894*_Y0894 + _Cb0894*_Cb0894 + _Cr0894*_Cr0894;
        _TMP212 = inversesqrt(_a0898);
        _TMP893 = 1.00000000E+00/_TMP212;
        _haveShallowLine1 = 2.20000005E+00*_TMP885 <= _TMP893 && _TMP261 != _TMP293 && _TMP265 != _TMP293;
        _haveSteepLine1 = 2.20000005E+00*_TMP893 <= _TMP885 && _TMP261 != _TMP277 && _TMP273 != _TMP277;
        _needBlend1 = _blendResult.x != 0;
        _diff0904 = _TMP7.xyz - _TMP5.xyz;
        _Y0904 = dot(_diff0904, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0904 = 5.31519055E-01*(_diff0904.z - _Y0904);
        _Cr0904 = 6.78149998E-01*(_diff0904.x - _Y0904);
        _a0908 = _Y0904*_Y0904 + _Cb0904*_Cb0904 + _Cr0904*_Cr0904;
        _TMP212 = inversesqrt(_a0908);
        _TMP903 = 1.00000000E+00/_TMP212;
        _TMP125 = _TMP903 < 1.17647059E-01;
        _diff0914 = _TMP7.xyz - _TMP9.xyz;
        _Y0914 = dot(_diff0914, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0914 = 5.31519055E-01*(_diff0914.z - _Y0914);
        _Cr0914 = 6.78149998E-01*(_diff0914.x - _Y0914);
        _a0918 = _Y0914*_Y0914 + _Cb0914*_Cb0914 + _Cr0914*_Cr0914;
        _TMP212 = inversesqrt(_a0918);
        _TMP913 = 1.00000000E+00/_TMP212;
        _TMP126 = _TMP913 < 1.17647059E-01;
        _diff0924 = _TMP5.xyz - _TMP4.xyz;
        _Y0924 = dot(_diff0924, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0924 = 5.31519055E-01*(_diff0924.z - _Y0924);
        _Cr0924 = 6.78149998E-01*(_diff0924.x - _Y0924);
        _a0928 = _Y0924*_Y0924 + _Cb0924*_Cb0924 + _Cr0924*_Cr0924;
        _TMP212 = inversesqrt(_a0928);
        _TMP923 = 1.00000000E+00/_TMP212;
        _TMP127 = _TMP923 < 1.17647059E-01;
        _diff0934 = _TMP4.xyz - _TMP3.xyz;
        _Y0934 = dot(_diff0934, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0934 = 5.31519055E-01*(_diff0934.z - _Y0934);
        _Cr0934 = 6.78149998E-01*(_diff0934.x - _Y0934);
        _a0938 = _Y0934*_Y0934 + _Cb0934*_Cb0934 + _Cr0934*_Cr0934;
        _TMP212 = inversesqrt(_a0938);
        _TMP933 = 1.00000000E+00/_TMP212;
        _TMP128 = _TMP933 < 1.17647059E-01;
        _diff0944 = _TMP3.xyz - _TMP6.xyz;
        _Y0944 = dot(_diff0944, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0944 = 5.31519055E-01*(_diff0944.z - _Y0944);
        _Cr0944 = 6.78149998E-01*(_diff0944.x - _Y0944);
        _a0948 = _Y0944*_Y0944 + _Cb0944*_Cb0944 + _Cr0944*_Cr0944;
        _TMP212 = inversesqrt(_a0948);
        _TMP943 = 1.00000000E+00/_TMP212;
        _TMP129 = _TMP943 < 1.17647059E-01;
        _diff0954 = _TMP6.xyz - _TMP9.xyz;
        _Y0954 = dot(_diff0954, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0954 = 5.31519055E-01*(_diff0954.z - _Y0954);
        _Cr0954 = 6.78149998E-01*(_diff0954.x - _Y0954);
        _a0958 = _Y0954*_Y0954 + _Cb0954*_Cb0954 + _Cr0954*_Cr0954;
        _TMP212 = inversesqrt(_a0958);
        _TMP953 = 1.00000000E+00/_TMP212;
        _TMP130 = _TMP953 < 1.17647059E-01;
        _diff0964 = _TMP7.xyz - _TMP3.xyz;
        _Y0964 = dot(_diff0964, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0964 = 5.31519055E-01*(_diff0964.z - _Y0964);
        _Cr0964 = 6.78149998E-01*(_diff0964.x - _Y0964);
        _a0968 = _Y0964*_Y0964 + _Cb0964*_Cb0964 + _Cr0964*_Cr0964;
        _TMP212 = inversesqrt(_a0968);
        _TMP963 = 1.00000000E+00/_TMP212;
        _TMP131 = _TMP963 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.x >= 2 || !(_blendResult.w != 0 && !_TMP125 || _blendResult.y != 0 && !_TMP126 || _TMP127 && _TMP128 && _TMP129 && _TMP130 && !_TMP131);
        _diff0972 = _TMP7.xyz - _TMP6.xyz;
        _Y0972 = dot(_diff0972, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0972 = 5.31519055E-01*(_diff0972.z - _Y0972);
        _Cr0972 = 6.78149998E-01*(_diff0972.x - _Y0972);
        _a0976 = _Y0972*_Y0972 + _Cb0972*_Cb0972 + _Cr0972*_Cr0972;
        _TMP212 = inversesqrt(_a0976);
        _TMP971 = 1.00000000E+00/_TMP212;
        _diff0980 = _TMP7.xyz - _TMP4.xyz;
        _Y0980 = dot(_diff0980, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0980 = 5.31519055E-01*(_diff0980.z - _Y0980);
        _Cr0980 = 6.78149998E-01*(_diff0980.x - _Y0980);
        _a0984 = _Y0980*_Y0980 + _Cb0980*_Cb0980 + _Cr0980*_Cr0980;
        _TMP212 = inversesqrt(_a0984);
        _TMP979 = 1.00000000E+00/_TMP212;
        if (_TMP971 <= _TMP979) { 
            _TMP132 = _TMP6.xyz;
        } else {
            _TMP132 = _TMP4.xyz;
        } 
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP137 = 3.33333343E-01;
                } else {
                    _TMP137 = 2.50000000E-01;
                } 
                _TMP136 = _TMP137;
            } else {
                if (_haveSteepLine1) { 
                    _TMP138 = 2.50000000E-01;
                } else {
                    _TMP138 = 0.00000000E+00;
                } 
                _TMP136 = _TMP138;
            } 
            _TMP135 = _TMP136;
        } else {
            _TMP135 = 0.00000000E+00;
        } 
        _a0988 = float(_TMP135);
        _TMP987 = _TMP7.xyz + _a0988*(_TMP132 - _TMP7.xyz);
        _dst[0] = _TMP987;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP139 = 2.50000000E-01;
        } else {
            _TMP139 = 0.00000000E+00;
        } 
        _a0992 = float(_TMP139);
        _TMP991 = _TMP747 + _a0992*(_TMP132 - _TMP747);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP140 = 7.50000000E-01;
        } else {
            _TMP140 = 0.00000000E+00;
        } 
        _a0996 = float(_TMP140);
        _TMP995 = _TMP7.xyz + _a0996*(_TMP132 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP143 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP144 = 7.50000000E-01;
                    } else {
                        _TMP144 = 5.00000000E-01;
                    } 
                    _TMP143 = _TMP144;
                } 
                _TMP142 = _TMP143;
            } else {
                _TMP142 = 8.67770463E-02;
            } 
            _TMP141 = _TMP142;
        } else {
            _TMP141 = 0.00000000E+00;
        } 
        _a1000 = float(_TMP141);
        _TMP999 = _TMP7.xyz + _a1000*(_TMP132 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP146 = 1.00000000E+00;
            } else {
                _TMP146 = 6.84853256E-01;
            } 
            _TMP145 = _TMP146;
        } else {
            _TMP145 = 0.00000000E+00;
        } 
        _a1004 = float(_TMP145);
        _TMP1003 = _TMP857 + _a1004*(_TMP132 - _TMP857);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP149 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP150 = 7.50000000E-01;
                    } else {
                        _TMP150 = 5.00000000E-01;
                    } 
                    _TMP149 = _TMP150;
                } 
                _TMP148 = _TMP149;
            } else {
                _TMP148 = 8.67770463E-02;
            } 
            _TMP147 = _TMP148;
        } else {
            _TMP147 = 0.00000000E+00;
        } 
        _a1008 = float(_TMP147);
        _TMP1007 = _TMP861 + _a1008*(_TMP132 - _TMP861);
        _dst[7] = _TMP1007;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP151 = 7.50000000E-01;
        } else {
            _TMP151 = 0.00000000E+00;
        } 
        _a1012 = float(_TMP151);
        _TMP1011 = _TMP865 + _a1012*(_TMP132 - _TMP865);
        _dst[8] = _TMP1011;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP152 = 2.50000000E-01;
        } else {
            _TMP152 = 0.00000000E+00;
        } 
        _a1016 = float(_TMP152);
        _TMP1015 = _TMP869 + _a1016*(_TMP132 - _TMP869);
        _dst[9] = _TMP1015;
        _diff1020 = _TMP10.xyz - _TMP3.xyz;
        _Y1020 = dot(_diff1020, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1020 = 5.31519055E-01*(_diff1020.z - _Y1020);
        _Cr1020 = 6.78149998E-01*(_diff1020.x - _Y1020);
        _a1024 = _Y1020*_Y1020 + _Cb1020*_Cb1020 + _Cr1020*_Cr1020;
        _TMP212 = inversesqrt(_a1024);
        _TMP1019 = 1.00000000E+00/_TMP212;
        _diff1028 = _TMP6.xyz - _TMP11.xyz;
        _Y1028 = dot(_diff1028, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1028 = 5.31519055E-01*(_diff1028.z - _Y1028);
        _Cr1028 = 6.78149998E-01*(_diff1028.x - _Y1028);
        _a1032 = _Y1028*_Y1028 + _Cb1028*_Cb1028 + _Cr1028*_Cr1028;
        _TMP212 = inversesqrt(_a1032);
        _TMP1027 = 1.00000000E+00/_TMP212;
        _haveShallowLine1 = 2.20000005E+00*_TMP1019 <= _TMP1027 && _TMP261 != _TMP285 && _TMP289 != _TMP285;
        _haveSteepLine1 = 2.20000005E+00*_TMP1027 <= _TMP1019 && _TMP261 != _TMP269 && _TMP265 != _TMP269;
        _needBlend1 = _blendResult.w != 0;
        _diff1038 = _TMP7.xyz - _TMP3.xyz;
        _Y1038 = dot(_diff1038, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1038 = 5.31519055E-01*(_diff1038.z - _Y1038);
        _Cr1038 = 6.78149998E-01*(_diff1038.x - _Y1038);
        _a1042 = _Y1038*_Y1038 + _Cb1038*_Cb1038 + _Cr1038*_Cr1038;
        _TMP212 = inversesqrt(_a1042);
        _TMP1037 = 1.00000000E+00/_TMP212;
        _TMP153 = _TMP1037 < 1.17647059E-01;
        _diff1048 = _TMP7.xyz - _TMP11.xyz;
        _Y1048 = dot(_diff1048, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1048 = 5.31519055E-01*(_diff1048.z - _Y1048);
        _Cr1048 = 6.78149998E-01*(_diff1048.x - _Y1048);
        _a1052 = _Y1048*_Y1048 + _Cb1048*_Cb1048 + _Cr1048*_Cr1048;
        _TMP212 = inversesqrt(_a1052);
        _TMP1047 = 1.00000000E+00/_TMP212;
        _TMP154 = _TMP1047 < 1.17647059E-01;
        _diff1058 = _TMP3.xyz - _TMP6.xyz;
        _Y1058 = dot(_diff1058, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1058 = 5.31519055E-01*(_diff1058.z - _Y1058);
        _Cr1058 = 6.78149998E-01*(_diff1058.x - _Y1058);
        _a1062 = _Y1058*_Y1058 + _Cb1058*_Cb1058 + _Cr1058*_Cr1058;
        _TMP212 = inversesqrt(_a1062);
        _TMP1057 = 1.00000000E+00/_TMP212;
        _TMP155 = _TMP1057 < 1.17647059E-01;
        _diff1068 = _TMP6.xyz - _TMP9.xyz;
        _Y1068 = dot(_diff1068, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1068 = 5.31519055E-01*(_diff1068.z - _Y1068);
        _Cr1068 = 6.78149998E-01*(_diff1068.x - _Y1068);
        _a1072 = _Y1068*_Y1068 + _Cb1068*_Cb1068 + _Cr1068*_Cr1068;
        _TMP212 = inversesqrt(_a1072);
        _TMP1067 = 1.00000000E+00/_TMP212;
        _TMP156 = _TMP1067 < 1.17647059E-01;
        _diff1078 = _TMP9.xyz - _TMP10.xyz;
        _Y1078 = dot(_diff1078, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1078 = 5.31519055E-01*(_diff1078.z - _Y1078);
        _Cr1078 = 6.78149998E-01*(_diff1078.x - _Y1078);
        _a1082 = _Y1078*_Y1078 + _Cb1078*_Cb1078 + _Cr1078*_Cr1078;
        _TMP212 = inversesqrt(_a1082);
        _TMP1077 = 1.00000000E+00/_TMP212;
        _TMP157 = _TMP1077 < 1.17647059E-01;
        _diff1088 = _TMP10.xyz - _TMP11.xyz;
        _Y1088 = dot(_diff1088, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1088 = 5.31519055E-01*(_diff1088.z - _Y1088);
        _Cr1088 = 6.78149998E-01*(_diff1088.x - _Y1088);
        _a1092 = _Y1088*_Y1088 + _Cb1088*_Cb1088 + _Cr1088*_Cr1088;
        _TMP212 = inversesqrt(_a1092);
        _TMP1087 = 1.00000000E+00/_TMP212;
        _TMP158 = _TMP1087 < 1.17647059E-01;
        _diff1098 = _TMP7.xyz - _TMP9.xyz;
        _Y1098 = dot(_diff1098, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1098 = 5.31519055E-01*(_diff1098.z - _Y1098);
        _Cr1098 = 6.78149998E-01*(_diff1098.x - _Y1098);
        _a1102 = _Y1098*_Y1098 + _Cb1098*_Cb1098 + _Cr1098*_Cr1098;
        _TMP212 = inversesqrt(_a1102);
        _TMP1097 = 1.00000000E+00/_TMP212;
        _TMP159 = _TMP1097 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.w >= 2 || !(_blendResult.z != 0 && !_TMP153 || _blendResult.x != 0 && !_TMP154 || _TMP155 && _TMP156 && _TMP157 && _TMP158 && !_TMP159);
        _diff1106 = _TMP7.xyz - _TMP10.xyz;
        _Y1106 = dot(_diff1106, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1106 = 5.31519055E-01*(_diff1106.z - _Y1106);
        _Cr1106 = 6.78149998E-01*(_diff1106.x - _Y1106);
        _a1110 = _Y1106*_Y1106 + _Cb1106*_Cb1106 + _Cr1106*_Cr1106;
        _TMP212 = inversesqrt(_a1110);
        _TMP1105 = 1.00000000E+00/_TMP212;
        _diff1114 = _TMP7.xyz - _TMP6.xyz;
        _Y1114 = dot(_diff1114, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1114 = 5.31519055E-01*(_diff1114.z - _Y1114);
        _Cr1114 = 6.78149998E-01*(_diff1114.x - _Y1114);
        _a1118 = _Y1114*_Y1114 + _Cb1114*_Cb1114 + _Cr1114*_Cr1114;
        _TMP212 = inversesqrt(_a1118);
        _TMP1113 = 1.00000000E+00/_TMP212;
        if (_TMP1105 <= _TMP1113) { 
            _TMP160 = _TMP10.xyz;
        } else {
            _TMP160 = _TMP6.xyz;
        } 
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                if (_haveSteepLine1) { 
                    _TMP165 = 3.33333343E-01;
                } else {
                    _TMP165 = 2.50000000E-01;
                } 
                _TMP164 = _TMP165;
            } else {
                if (_haveSteepLine1) { 
                    _TMP166 = 2.50000000E-01;
                } else {
                    _TMP166 = 0.00000000E+00;
                } 
                _TMP164 = _TMP166;
            } 
            _TMP163 = _TMP164;
        } else {
            _TMP163 = 0.00000000E+00;
        } 
        _a1122 = float(_TMP163);
        _TMP1121 = _TMP7.xyz + _a1122*(_TMP160 - _TMP7.xyz);
        _dst[3] = _TMP1121;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP167 = 2.50000000E-01;
        } else {
            _TMP167 = 0.00000000E+00;
        } 
        _a1126 = float(_TMP167);
        _TMP1125 = _TMP881 + _a1126*(_TMP160 - _TMP881);
        _dst[12] = _TMP1125;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP168 = 7.50000000E-01;
        } else {
            _TMP168 = 0.00000000E+00;
        } 
        _a1130 = float(_TMP168);
        _TMP1129 = _TMP739 + _a1130*(_TMP160 - _TMP739);
        _dst[13] = _TMP1129;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP171 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP172 = 7.50000000E-01;
                    } else {
                        _TMP172 = 5.00000000E-01;
                    } 
                    _TMP171 = _TMP172;
                } 
                _TMP170 = _TMP171;
            } else {
                _TMP170 = 8.67770463E-02;
            } 
            _TMP169 = _TMP170;
        } else {
            _TMP169 = 0.00000000E+00;
        } 
        _a1134 = float(_TMP169);
        _TMP1133 = _TMP743 + _a1134*(_TMP160 - _TMP743);
        _dst[14] = _TMP1133;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP174 = 1.00000000E+00;
            } else {
                _TMP174 = 6.84853256E-01;
            } 
            _TMP173 = _TMP174;
        } else {
            _TMP173 = 0.00000000E+00;
        } 
        _a1138 = float(_TMP173);
        _TMP1137 = _TMP991 + _a1138*(_TMP160 - _TMP991);
        _dst[15] = _TMP1137;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP177 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP178 = 7.50000000E-01;
                    } else {
                        _TMP178 = 5.00000000E-01;
                    } 
                    _TMP177 = _TMP178;
                } 
                _TMP176 = _TMP177;
            } else {
                _TMP176 = 8.67770463E-02;
            } 
            _TMP175 = _TMP176;
        } else {
            _TMP175 = 0.00000000E+00;
        } 
        _a1142 = float(_TMP175);
        _TMP1141 = _TMP995 + _a1142*(_TMP160 - _TMP995);
        _dst[4] = _TMP1141;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP179 = 7.50000000E-01;
        } else {
            _TMP179 = 0.00000000E+00;
        } 
        _a1146 = float(_TMP179);
        _TMP1145 = _TMP999 + _a1146*(_TMP160 - _TMP999);
        _dst[5] = _TMP1145;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP180 = 2.50000000E-01;
        } else {
            _TMP180 = 0.00000000E+00;
        } 
        _a1150 = float(_TMP180);
        _TMP1149 = _TMP1003 + _a1150*(_TMP160 - _TMP1003);
        _dst[6] = _TMP1149;
    } 
    _TMP181 = float((_f.x >= 2.50000000E-01));
    _TMP1161 = _dst[6] + _TMP181*(_dst[7] - _dst[6]);
    _TMP183 = float((_f.x >= 7.50000000E-01));
    _TMP1167 = _dst[8] + _TMP183*(_dst[9] - _dst[8]);
    _TMP185 = float((_f.x >= 5.00000000E-01));
    _TMP1173 = _TMP1161 + _TMP185*(_TMP1167 - _TMP1161);
    _TMP187 = float((_f.x >= 2.50000000E-01));
    _TMP1179 = _dst[5] + _TMP187*(_dst[0] - _dst[5]);
    _TMP189 = float((_f.x >= 7.50000000E-01));
    _TMP1185 = _dst[1] + _TMP189*(_dst[10] - _dst[1]);
    _TMP191 = float((_f.x >= 5.00000000E-01));
    _TMP1191 = _TMP1179 + _TMP191*(_TMP1185 - _TMP1179);
    _TMP193 = float((_f.y >= 2.50000000E-01));
    _TMP1197 = _TMP1173 + _TMP193*(_TMP1191 - _TMP1173);
    _TMP195 = float((_f.x >= 2.50000000E-01));
    _TMP1203 = _dst[4] + _TMP195*(_dst[3] - _dst[4]);
    _TMP197 = float((_f.x >= 7.50000000E-01));
    _TMP1209 = _dst[2] + _TMP197*(_dst[11] - _dst[2]);
    _TMP199 = float((_f.x >= 5.00000000E-01));
    _TMP1215 = _TMP1203 + _TMP199*(_TMP1209 - _TMP1203);
    _TMP201 = float((_f.x >= 2.50000000E-01));
    _TMP1221 = _dst[15] + _TMP201*(_dst[14] - _dst[15]);
    _TMP203 = float((_f.x >= 7.50000000E-01));
    _TMP1227 = _dst[13] + _TMP203*(_dst[12] - _dst[13]);
    _TMP205 = float((_f.x >= 5.00000000E-01));
    _TMP1233 = _TMP1221 + _TMP205*(_TMP1227 - _TMP1221);
    _TMP207 = float((_f.y >= 7.50000000E-01));
    _TMP1239 = _TMP1215 + _TMP207*(_TMP1233 - _TMP1215);
    _TMP209 = float((_f.y >= 5.00000000E-01));
    _TMP1245 = _TMP1197 + _TMP209*(_TMP1239 - _TMP1197);
    _ret_0 = vec4(_TMP1245.x, _TMP1245.y, _TMP1245.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
