// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     vec2 _tex_coord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct prev {
    vec2 _texture_size1;
    vec2 _tex_coord;
float _placeholder37;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
prev _PASSPREV51;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform COMPAT_PRECISION vec2 PassPrev5TextureSize;
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 PassPrev5TexCoord;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ps = 1.00000000E+00/PassPrev5TextureSize;
    _OUT._t1 = PassPrev5TexCoord.xxxy + vec4(0.00000000E+00, -_ps.x, -2.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t2 = PassPrev5TexCoord.xyxy + vec4(_ps.x, 0.00000000E+00, 2.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t3 = PassPrev5TexCoord.xyxy + vec4(0.00000000E+00, -_ps.y, 0.00000000E+00, -2.00000000E+00*_ps.y);
    _OUT._t4 = PassPrev5TexCoord.xyxy + vec4(0.00000000E+00, _ps.y, 0.00000000E+00, 2.00000000E+00*_ps.y);
    _ret_0._position1 = _r0007;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    gl_Position = _r0007;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t21;
COMPAT_VARYING     vec4 _t11;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec2 _tex_coord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct prev {
    vec2 _texture_size1;
    vec2 _tex_coord;
float _placeholder38;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t11;
    vec4 _t21;
    vec4 _t3;
    vec4 _t4;
};
vec3 _TMP32;
vec3 _TMP40;
vec3 _TMP31;
vec3 _TMP30;
vec3 _TMP29;
vec3 _TMP28;
vec3 _TMP27;
vec3 _TMP26;
vec3 _TMP39;
vec3 _TMP38;
vec3 _TMP37;
vec3 _TMP36;
vec3 _TMP35;
float _TMP25;
float _TMP24;
vec3 _TMP17;
vec3 _TMP18;
vec3 _TMP19;
vec3 _TMP20;
vec3 _TMP21;
vec3 _TMP22;
vec3 _TMP23;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec3 _TMP0;
vec3 _TMP3;
vec3 _TMP6;
vec3 _TMP7;
vec3 _TMP4;
vec3 _TMP5;
vec3 _TMP1;
vec3 _TMP2;
vec4 _TMP34;
vec4 _TMP43;
vec4 _TMP42;
vec4 _TMP41;
vec4 _TMP33;
uniform sampler2D Texture;
input_dummy _IN1;
prev _PASSPREV51;
vec2 _x0054;
vec2 _x0056;
vec2 _c0058;
vec2 _c0060;
vec4 _TMP61;
vec4 _a0064;
vec4 _c0064;
vec4 _a0066;
vec4 _TMP73;
vec4 _a0076;
vec4 _c0076;
vec4 _a0078;
vec4 _TMP85;
vec4 _a0088;
vec4 _c0088;
vec4 _a0090;
vec4 _TMP97;
vec4 _a0100;
vec4 _c0100;
vec4 _a0102;
vec4 _TMP109;
vec4 _a0112;
vec4 _c0112;
vec4 _a0114;
vec4 _TMP121;
vec4 _a0124;
vec4 _c0124;
vec4 _a0126;
vec3 _TMP480152[4];
vec3 _m0152;
vec3 _t0152;
vec3 _TMP155;
vec3 _y0156;
vec3 _TMP167;
vec3 _a0168;
vec3 _TMP480174[4];
vec3 _m0174;
vec3 _t0174;
vec3 _TMP177;
vec3 _y0178;
vec3 _TMP189;
vec3 _a0190;
vec3 _TMP211;
vec3 _x0212;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform sampler2D PassPrev5Texture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _E;
    vec2 _fc;
    vec2 _fp;
    vec4 _hn;
    vec4 _vn;
    vec2 _w;
    vec3 _a;
    vec3 _b;
    _E = COMPAT_TEXTURE(Texture, TEX0.xy);
    _x0054 = TEX0.xy*TextureSize;
    _fc = fract(_x0054);
    _x0056 = 3.00000000E+00*_fc;
    _fp = floor(_x0056);
    _c0058 = TEX0.xy + vec2(_fp.x - 1.00000000E+00, 0.00000000E+00)/TextureSize;
    _hn = COMPAT_TEXTURE(Texture, _c0058);
    _c0060 = TEX0.xy + vec2(0.00000000E+00, _fp.y - 1.00000000E+00)/TextureSize;
    _vn = COMPAT_TEXTURE(Texture, _c0060);
    _a0064 = _E*8.00000000E+01 + 5.00000000E-01;
    _a0066 = _a0064/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP41 = abs(_a0066);
    _TMP42 = fract(_TMP41);
    _TMP43 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0064 = _TMP42*_TMP43;
    _TMP33 = vec4(_a0064.x < 0.00000000E+00 ? (-_c0064).x : _c0064.x, _a0064.y < 0.00000000E+00 ? (-_c0064).y : _c0064.y, _a0064.z < 0.00000000E+00 ? (-_c0064).z : _c0064.z, _a0064.w < 0.00000000E+00 ? (-_c0064).w : _c0064.w);
    _TMP61 = floor(_TMP33);
    _a0076 = _hn*8.00000000E+01 + 5.00000000E-01;
    _a0078 = _a0076/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP41 = abs(_a0078);
    _TMP42 = fract(_TMP41);
    _TMP43 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0076 = _TMP42*_TMP43;
    _TMP33 = vec4(_a0076.x < 0.00000000E+00 ? (-_c0076).x : _c0076.x, _a0076.y < 0.00000000E+00 ? (-_c0076).y : _c0076.y, _a0076.z < 0.00000000E+00 ? (-_c0076).z : _c0076.z, _a0076.w < 0.00000000E+00 ? (-_c0076).w : _c0076.w);
    _TMP73 = floor(_TMP33);
    _a0088 = _vn*8.00000000E+01 + 5.00000000E-01;
    _a0090 = _a0088/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP41 = abs(_a0090);
    _TMP42 = fract(_TMP41);
    _TMP43 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0088 = _TMP42*_TMP43;
    _TMP33 = vec4(_a0088.x < 0.00000000E+00 ? (-_c0088).x : _c0088.x, _a0088.y < 0.00000000E+00 ? (-_c0088).y : _c0088.y, _a0088.z < 0.00000000E+00 ? (-_c0088).z : _c0088.z, _a0088.w < 0.00000000E+00 ? (-_c0088).w : _c0088.w);
    _TMP85 = floor(_TMP33);
    _a0100 = _E*8.88888836E+00 + 5.55550009E-02;
    _a0102 = _a0100/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP41 = abs(_a0102);
    _TMP42 = fract(_TMP41);
    _TMP43 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0100 = _TMP42*_TMP43;
    _TMP34 = vec4(_a0100.x < 0.00000000E+00 ? (-_c0100).x : _c0100.x, _a0100.y < 0.00000000E+00 ? (-_c0100).y : _c0100.y, _a0100.z < 0.00000000E+00 ? (-_c0100).z : _c0100.z, _a0100.w < 0.00000000E+00 ? (-_c0100).w : _c0100.w);
    _TMP97 = floor(_TMP34);
    _a0112 = _hn*8.88888836E+00 + 5.55550009E-02;
    _a0114 = _a0112/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP41 = abs(_a0114);
    _TMP42 = fract(_TMP41);
    _TMP43 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0112 = _TMP42*_TMP43;
    _TMP34 = vec4(_a0112.x < 0.00000000E+00 ? (-_c0112).x : _c0112.x, _a0112.y < 0.00000000E+00 ? (-_c0112).y : _c0112.y, _a0112.z < 0.00000000E+00 ? (-_c0112).z : _c0112.z, _a0112.w < 0.00000000E+00 ? (-_c0112).w : _c0112.w);
    _TMP109 = floor(_TMP34);
    _a0124 = _vn*8.88888836E+00 + 5.55550009E-02;
    _a0126 = _a0124/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP41 = abs(_a0126);
    _TMP42 = fract(_TMP41);
    _TMP43 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0124 = _TMP42*_TMP43;
    _TMP34 = vec4(_a0124.x < 0.00000000E+00 ? (-_c0124).x : _c0124.x, _a0124.y < 0.00000000E+00 ? (-_c0124).y : _c0124.y, _a0124.z < 0.00000000E+00 ? (-_c0124).z : _c0124.z, _a0124.w < 0.00000000E+00 ? (-_c0124).w : _c0124.w);
    _TMP121 = floor(_TMP34);
    if (_fp.y == 0.00000000E+00) { 
        if (_fp.x == 0.00000000E+00) { 
            _TMP1 = vec3(_TMP61.x, _TMP73.y, _TMP85.w);
        } else {
            if (_fp.x == 1.00000000E+00) { 
                _TMP2 = vec3(_TMP97.x, 0.00000000E+00, _TMP121.z);
            } else {
                _TMP2 = vec3(_TMP61.y, _TMP73.x, _TMP85.z);
            } 
            _TMP1 = _TMP2;
        } 
        _TMP0 = _TMP1;
    } else {
        if (_fp.y == 1.00000000E+00) { 
            if (_fp.x == 0.00000000E+00) { 
                _TMP4 = vec3(_TMP97.w, _TMP109.y, 0.00000000E+00);
            } else {
                if (_fp.x == 1.00000000E+00) { 
                    _TMP5 = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
                } else {
                    _TMP5 = vec3(_TMP97.y, _TMP109.w, 0.00000000E+00);
                } 
                _TMP4 = _TMP5;
            } 
            _TMP3 = _TMP4;
        } else {
            if (_fp.x == 0.00000000E+00) { 
                _TMP6 = vec3(_TMP61.w, _TMP73.z, _TMP85.x);
            } else {
                if (_fp.x == 1.00000000E+00) { 
                    _TMP7 = vec3(_TMP97.z, 0.00000000E+00, _TMP121.x);
                } else {
                    _TMP7 = vec3(_TMP61.z, _TMP73.w, _TMP85.y);
                } 
                _TMP6 = _TMP7;
            } 
            _TMP3 = _TMP6;
        } 
        _TMP0 = _TMP3;
    } 
    _TMP8 = COMPAT_TEXTURE(PassPrev5Texture, TEX1.xw);
    _TMP9 = COMPAT_TEXTURE(PassPrev5Texture, TEX3.xy);
    _TMP10 = COMPAT_TEXTURE(PassPrev5Texture, TEX3.zw);
    _TMP11 = COMPAT_TEXTURE(PassPrev5Texture, TEX4.xy);
    _TMP12 = COMPAT_TEXTURE(PassPrev5Texture, TEX4.zw);
    _TMP13 = COMPAT_TEXTURE(PassPrev5Texture, TEX1.yw);
    _TMP14 = COMPAT_TEXTURE(PassPrev5Texture, TEX1.zw);
    _TMP15 = COMPAT_TEXTURE(PassPrev5Texture, TEX2.xy);
    _TMP16 = COMPAT_TEXTURE(PassPrev5Texture, TEX2.zw);
    if (_TMP0.x == 1.00000000E+00) { 
        _TMP17 = _TMP13.xyz;
    } else {
        if (_TMP0.x == 2.00000000E+00) { 
            _TMP18 = _TMP14.xyz;
        } else {
            if (_TMP0.x == 3.00000000E+00) { 
                _TMP19 = _TMP15.xyz;
            } else {
                if (_TMP0.x == 4.00000000E+00) { 
                    _TMP20 = _TMP16.xyz;
                } else {
                    if (_TMP0.x == 5.00000000E+00) { 
                        _TMP21 = _TMP9.xyz;
                    } else {
                        if (_TMP0.x == 6.00000000E+00) { 
                            _TMP22 = _TMP10.xyz;
                        } else {
                            if (_TMP0.x == 7.00000000E+00) { 
                                _TMP23 = _TMP11.xyz;
                            } else {
                                _TMP23 = _TMP12.xyz;
                            } 
                            _TMP22 = _TMP23;
                        } 
                        _TMP21 = _TMP22;
                    } 
                    _TMP20 = _TMP21;
                } 
                _TMP19 = _TMP20;
            } 
            _TMP18 = _TMP19;
        } 
        _TMP17 = _TMP18;
    } 
    _w = 2.00000000E+00*_fc - 1.00000000E+00;
    if (_TMP0.y == 0.00000000E+00) { 
        _TMP24 = _w.x;
    } else {
        _TMP24 = 0.00000000E+00;
    } 
    if (_TMP0.z == 0.00000000E+00) { 
        _TMP25 = _w.y;
    } else {
        _TMP25 = 0.00000000E+00;
    } 
    _TMP480152[0] = _TMP13.xyz - _TMP14.xyz;
    _TMP480152[1] = _TMP8.xyz - _TMP13.xyz;
    _TMP480152[2] = _TMP15.xyz - _TMP8.xyz;
    _TMP480152[3] = _TMP16.xyz - _TMP15.xyz;
    _TMP35 = vec3(float((5.00000000E-01 >= _TMP8.x)), float((5.00000000E-01 >= _TMP8.y)), float((5.00000000E-01 >= _TMP8.z)));
    _y0156 = 1.00000000E+00 - _TMP8.xyz;
    _TMP155 = _TMP8.xyz + _TMP35*(_y0156 - _TMP8.xyz);
    _TMP36 = abs(_TMP480152[1]);
    _TMP37 = abs(_TMP480152[2]);
    _TMP38 = min(_TMP36, _TMP37);
    _TMP39 = min(_TMP155, _TMP38);
    _m0152 = 2.00000000E+00*_TMP39;
    _t0152 = (7.00000000E+00*(_TMP480152[1] + _TMP480152[2]) - 3.00000000E+00*(_TMP480152[0] + _TMP480152[3]))/1.60000000E+01;
    _a0168 = -_m0152;
    _TMP40 = min(_m0152, _t0152);
    _TMP167 = max(_a0168, _TMP40);
    _TMP480174[0] = _TMP9.xyz - _TMP10.xyz;
    _TMP480174[1] = _TMP8.xyz - _TMP9.xyz;
    _TMP480174[2] = _TMP11.xyz - _TMP8.xyz;
    _TMP480174[3] = _TMP12.xyz - _TMP11.xyz;
    _TMP35 = vec3(float((5.00000000E-01 >= _TMP8.x)), float((5.00000000E-01 >= _TMP8.y)), float((5.00000000E-01 >= _TMP8.z)));
    _y0178 = 1.00000000E+00 - _TMP8.xyz;
    _TMP177 = _TMP8.xyz + _TMP35*(_y0178 - _TMP8.xyz);
    _TMP36 = abs(_TMP480174[1]);
    _TMP37 = abs(_TMP480174[2]);
    _TMP38 = min(_TMP36, _TMP37);
    _TMP39 = min(_TMP177, _TMP38);
    _m0174 = 2.00000000E+00*_TMP39;
    _t0174 = (7.00000000E+00*(_TMP480174[1] + _TMP480174[2]) - 3.00000000E+00*(_TMP480174[0] + _TMP480174[3]))/1.60000000E+01;
    _a0190 = -_m0174;
    _TMP40 = min(_m0174, _t0174);
    _TMP189 = max(_a0190, _TMP40);
    _TMP26 = min(_TMP9.xyz, _TMP13.xyz);
    _TMP27 = min(_TMP26, _TMP8.xyz);
    _TMP28 = min(_TMP27, _TMP15.xyz);
    _a = min(_TMP28, _TMP11.xyz);
    _TMP29 = max(_TMP9.xyz, _TMP13.xyz);
    _TMP30 = max(_TMP29, _TMP8.xyz);
    _TMP31 = max(_TMP30, _TMP15.xyz);
    _b = max(_TMP31, _TMP11.xyz);
    _x0212 = _TMP8.xyz + _TMP24*_TMP167 + _TMP25*_TMP189;
    _TMP40 = min(_b, _x0212);
    _TMP211 = max(_a, _TMP40);
    if (_TMP0.x != 0.00000000E+00) { 
        _TMP32 = _TMP17;
    } else {
        _TMP32 = _TMP211;
    } 
    FragColor.xyz = _TMP32;
    return;
} 
#endif
