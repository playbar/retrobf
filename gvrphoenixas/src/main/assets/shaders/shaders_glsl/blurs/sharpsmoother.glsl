// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0016;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _x;
    float _y;
    vec2 _dg1;
    vec2 _dg2;
    vec2 _dx;
    vec2 _dy;
    vec2 _TMP4;
    vec2 _TMP5;
    vec2 _TMP6;
    vec2 _TMP7;
    vec2 _TMP8;
    vec2 _TMP9;
    vec2 _TMP10;
    vec2 _TMP11;
    out_vertex _TMP12;
    _x = 1.00000000E+00/TextureSize.x;
    _y = 1.00000000E+00/TextureSize.y;
    _dg1 = vec2(_x, _y);
    _dg2 = vec2(-_x, _y);
    _dx = vec2(_x, 0.00000000E+00);
    _dy = vec2(0.00000000E+00, _y);
    _r0016 = VertexCoord.x*MVPMatrix[0];
    _r0016 = _r0016 + VertexCoord.y*MVPMatrix[1];
    _r0016 = _r0016 + VertexCoord.z*MVPMatrix[2];
    _r0016 = _r0016 + VertexCoord.w*MVPMatrix[3];
    _TMP10 = TexCoord.xy - _dg1;
    _TMP11 = TexCoord.xy - _dy;
    _TMP12._t1 = vec4(_TMP10.x, _TMP10.y, _TMP11.x, _TMP11.y);
    _TMP8 = TexCoord.xy - _dg2;
    _TMP9 = TexCoord.xy + _dx;
    _TMP12._t2 = vec4(_TMP8.x, _TMP8.y, _TMP9.x, _TMP9.y);
    _TMP6 = TexCoord.xy + _dg1;
    _TMP7 = TexCoord.xy + _dy;
    _TMP12._t3 = vec4(_TMP6.x, _TMP6.y, _TMP7.x, _TMP7.y);
    _TMP4 = TexCoord.xy + _dg2;
    _TMP5 = TexCoord.xy - _dx;
    _TMP12._t4 = vec4(_TMP4.x, _TMP4.y, _TMP5.x, _TMP5.y);
    _ret_0._position1 = _r0016;
    _ret_0._texCoord = TexCoord.xy;
    _ret_0._t1 = _TMP12._t1;
    _ret_0._t2 = _TMP12._t2;
    _ret_0._t3 = _TMP12._t3;
    _ret_0._t4 = _TMP12._t4;
    gl_Position = _r0016;
    TEX0.xy = TexCoord.xy;
    TEX1 = _TMP12._t1;
    TEX2 = _TMP12._t2;
    TEX3 = _TMP12._t3;
    TEX4 = _TMP12._t4;
    return;
    TEX0.xy = _ret_0._texCoord;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
float _TMP18;
float _TMP17;
float _TMP22;
float _TMP16;
vec3 _TMP15;
vec3 _TMP14;
float _TMP21;
float _TMP20;
float _TMP19;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec3 _a0048;
vec3 _a0062;
float _TMP63;
float _x0064;
vec3 _a0072;
vec3 _a0086;
float _TMP87;
float _x0088;
vec3 _a0096;
vec3 _a0110;
float _TMP111;
float _x0112;
vec3 _a0120;
vec3 _a0134;
float _TMP135;
float _x0136;
vec3 _a0144;
vec3 _a0158;
float _TMP159;
float _x0160;
vec3 _a0168;
vec3 _a0182;
float _TMP183;
float _x0184;
vec3 _a0192;
vec3 _a0206;
float _TMP207;
float _x0208;
vec3 _a0216;
vec3 _a0230;
float _TMP231;
float _x0232;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _w00;
    float _w22;
    float _w20;
    float _w02;
    vec3 _TMP26;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xy);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX2.xy);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.xy);
    _a0048 = _TMP4.xyz - _TMP1.xyz;
    _TMP14 = abs(_a0048);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0062 = _TMP4.xyz + _TMP1.xyz;
    _TMP18 = dot(_a0062, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0064 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0064);
    _TMP63 = max(-7.00000003E-02, _TMP22);
    _a0072 = _TMP4.xyz - _TMP5.xyz;
    _TMP14 = abs(_a0072);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0086 = _TMP4.xyz + _TMP5.xyz;
    _TMP18 = dot(_a0086, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0088 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0088);
    _TMP87 = max(-7.00000003E-02, _TMP22);
    _a0096 = _TMP4.xyz - _TMP7.xyz;
    _TMP14 = abs(_a0096);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0110 = _TMP4.xyz + _TMP7.xyz;
    _TMP18 = dot(_a0110, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0112 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0112);
    _TMP111 = max(-7.00000003E-02, _TMP22);
    _a0120 = _TMP4.xyz - _TMP3.xyz;
    _TMP14 = abs(_a0120);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0134 = _TMP4.xyz + _TMP3.xyz;
    _TMP18 = dot(_a0134, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0136 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0136);
    _TMP135 = max(-7.00000003E-02, _TMP22);
    _a0144 = _TMP4.xyz - _TMP0.xyz;
    _TMP14 = abs(_a0144);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0158 = _TMP4.xyz + _TMP0.xyz;
    _TMP18 = dot(_a0158, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0160 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0160);
    _TMP159 = max(-7.00000003E-02, _TMP22);
    _w00 = _TMP159*7.50000000E-01;
    _a0168 = _TMP4.xyz - _TMP8.xyz;
    _TMP14 = abs(_a0168);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0182 = _TMP4.xyz + _TMP8.xyz;
    _TMP18 = dot(_a0182, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0184 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0184);
    _TMP183 = max(-7.00000003E-02, _TMP22);
    _w22 = _TMP183*7.50000000E-01;
    _a0192 = _TMP4.xyz - _TMP2.xyz;
    _TMP14 = abs(_a0192);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0206 = _TMP4.xyz + _TMP2.xyz;
    _TMP18 = dot(_a0206, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0208 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0208);
    _TMP207 = max(-7.00000003E-02, _TMP22);
    _w20 = _TMP207*7.50000000E-01;
    _a0216 = _TMP4.xyz - _TMP6.xyz;
    _TMP14 = abs(_a0216);
    _TMP19 = pow(_TMP14.x, 1.42857146E+00);
    _TMP20 = pow(_TMP14.y, 1.42857146E+00);
    _TMP21 = pow(_TMP14.z, 1.42857146E+00);
    _TMP15 = vec3(_TMP19, _TMP20, _TMP21);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP17 = pow(_TMP16, 6.99999988E-01);
    _a0230 = _TMP4.xyz + _TMP6.xyz;
    _TMP18 = dot(_a0230, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0232 = 5.50000012E-01 - (2.91981721E+00*_TMP17)/(_TMP18 + 3.00000012E-01);
    _TMP22 = min(1.00000001E-01, _x0232);
    _TMP231 = max(-7.00000003E-02, _TMP22);
    _w02 = _TMP231*7.50000000E-01;
    _TMP26 = _TMP63*_TMP1.xyz + _TMP87*_TMP5.xyz + _TMP111*_TMP7.xyz + _TMP135*_TMP3.xyz + _w00*_TMP0.xyz + _w22*_TMP8.xyz + _w20*_TMP2.xyz + _w02*_TMP6.xyz + ((((((((1.00000000E+00 - _TMP63) - _TMP87) - _TMP111) - _TMP135) - _w00) - _w22) - _w20) - _w02)*_TMP4.xyz;
    _ret_0 = vec4(_TMP26.x, _TMP26.y, _TMP26.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
