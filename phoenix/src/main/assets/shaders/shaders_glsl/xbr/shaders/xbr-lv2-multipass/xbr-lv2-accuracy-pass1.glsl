// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct prev {
    vec2 _video_size1;
    vec2 _texture_size1;
float _placeholder31;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
};
out_vertex _co1;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _co1._position1 = _r0006;
    _co1._color1 = COLOR;
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _co1._texCoord1 = TexCoord.xy;
    _co1._t1 = TexCoord.xyyy + vec4(0.00000000E+00, -_ps.y, 0.00000000E+00, _ps.y);
    _co1._t2 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _co1._t1;
    TEX2 = _co1._t2;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     float _frame_rotation;
struct prev {
    vec2 _video_size;
    vec2 _texture_size;
float _placeholder32;
};
struct input_dummy {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
};
vec4 _ret_0;
float _TMP15;
float _TMP24;
float _TMP26;
vec3 _TMP12;
vec3 _TMP11;
vec3 _TMP10;
vec3 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
float _TMP19;
float _TMP27;
float _TMP28;
float _TMP18;
float _TMP17;
vec4 _TMP16;
vec4 _TMP25;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
prev _PASSPREV21;
input_dummy _IN1;
vec2 _x0040;
vec4 _x0052;
vec4 _TMP53;
vec4 _x0060;
vec4 _TMP61;
vec4 _x0068;
vec4 _TMP69;
vec4 _x0076;
vec4 _TMP77;
vec4 _TMP85;
vec4 _x0090;
vec4 _info0092;
float _x0094;
float _x0098;
float _x0102;
float _x0104;
float _x0108;
float _x0112;
float _x0114;
float _x0118;
float _x0122;
vec4 _info0124;
float _x0126;
float _x0130;
float _x0134;
float _x0136;
float _x0140;
float _x0144;
float _x0146;
float _x0150;
float _x0154;
vec4 _info0156;
float _x0158;
float _x0162;
float _x0166;
float _x0168;
float _x0172;
float _x0176;
float _x0178;
float _x0182;
float _x0186;
vec4 _info0188;
float _x0190;
float _x0194;
float _x0198;
float _x0200;
float _x0204;
float _x0208;
float _x0210;
float _x0214;
float _x0218;
float _TMP221;
float _rmean0222;
vec3 _diff0222;
vec3 _K0222;
vec3 _a0224;
float _TMP229;
float _rmean0230;
vec3 _diff0230;
vec3 _K0230;
vec3 _a0232;
float _TMP237;
float _rmean0238;
vec3 _diff0238;
vec3 _K0238;
vec3 _a0240;
float _TMP245;
float _rmean0246;
vec3 _diff0246;
vec3 _K0246;
vec3 _a0248;
float _TMP255;
float _rmean0256;
vec3 _diff0256;
vec3 _K0256;
vec3 _a0258;
float _TMP263;
float _rmean0264;
vec3 _diff0264;
vec3 _K0264;
vec3 _a0266;
float _TMP271;
float _rmean0272;
vec3 _diff0272;
vec3 _K0272;
vec3 _a0274;
float _TMP279;
float _rmean0280;
vec3 _diff0280;
vec3 _K0280;
vec3 _a0282;
float _t0294;
float _t0298;
float _t0302;
float _t0306;
float _TMP309;
float _rmean0310;
vec3 _diff0310;
vec3 _K0310;
vec3 _a0312;
float _TMP317;
float _rmean0318;
vec3 _diff0318;
vec3 _K0318;
vec3 _a0320;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform sampler2D PassPrev2Texture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _px;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec3 _res1;
    vec3 _res2;
    vec2 _fp;
    vec4 _fx45i;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _info1;
    vec4 _maximos;
    vec3 _res;
    _x0040 = TEX0.xy*TextureSize;
    _fp = fract(_x0040);
    _TMP0 = COMPAT_TEXTURE(PassPrev2Texture, TEX1.xy);
    _TMP1 = COMPAT_TEXTURE(PassPrev2Texture, TEX2.xw);
    _TMP2 = COMPAT_TEXTURE(PassPrev2Texture, TEX2.yw);
    _TMP3 = COMPAT_TEXTURE(PassPrev2Texture, TEX2.zw);
    _TMP4 = COMPAT_TEXTURE(PassPrev2Texture, TEX1.xw);
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _x0052 = (((_fx + vec4( 2.50000000E-01, 2.50000000E-01, 2.50000000E-01, 2.50000000E-01)) - vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01)) - vec4( 2.50000000E-01, 2.50000000E-01, 2.50000000E-01, 2.50000000E-01))/vec4( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01, 5.00000000E-01);
    _TMP25 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0052);
    _TMP53 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP25);
    _x0060 = ((_fx + vec4( 2.50000000E-01, 2.50000000E-01, 2.50000000E-01, 2.50000000E-01)) - vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01))/vec4( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01, 5.00000000E-01);
    _TMP25 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0060);
    _TMP61 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP25);
    _x0068 = ((_fx_left + vec4( 1.25000000E-01, 2.50000000E-01, 1.25000000E-01, 2.50000000E-01)) - vec4( 1.00000000E+00, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00))/vec4( 2.50000000E-01, 5.00000000E-01, 2.50000000E-01, 5.00000000E-01);
    _TMP25 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0068);
    _TMP69 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP25);
    _x0076 = ((_fx_up + vec4( 2.50000000E-01, 1.25000000E-01, 2.50000000E-01, 1.25000000E-01)) - vec4( 2.00000000E+00, 0.00000000E+00, -1.00000000E+00, 5.00000000E-01))/vec4( 5.00000000E-01, 2.50000000E-01, 5.00000000E-01, 2.50000000E-01);
    _TMP25 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0076);
    _TMP77 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP25);
    _info1 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP16 = _info1*vec4( 2.55000000E+02, 2.55000000E+02, 2.55000000E+02, 2.55000000E+02);
    _x0090 = _TMP16 + 5.00000000E-01;
    _TMP85 = floor(_x0090);
    _x0094 = _TMP85.x/2.00000000E+00;
    if (_x0094 < 0.00000000E+00) { 
        _x0098 = -_x0094;
        _TMP28 = floor(_x0098);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0094);
    } 
    _TMP17 = _x0094 - _TMP27;
    _x0102 = _TMP17 + 5.00000000E-01;
    _info0092.w = floor(_x0102);
    _x0104 = _TMP27/2.00000000E+00;
    if (_x0104 < 0.00000000E+00) { 
        _x0108 = -_x0104;
        _TMP28 = floor(_x0108);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0104);
    } 
    _TMP18 = _x0104 - _TMP27;
    _x0112 = _TMP18 + 5.00000000E-01;
    _info0092.z = floor(_x0112);
    _x0114 = _TMP27/2.00000000E+00;
    if (_x0114 < 0.00000000E+00) { 
        _x0118 = -_x0114;
        _TMP28 = floor(_x0118);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0114);
    } 
    _TMP19 = _x0114 - _TMP27;
    _x0122 = _TMP19 + 5.00000000E-01;
    _info0092.y = floor(_x0122);
    _info0092.x = _TMP27;
    _x0126 = _TMP85.y/2.00000000E+00;
    if (_x0126 < 0.00000000E+00) { 
        _x0130 = -_x0126;
        _TMP28 = floor(_x0130);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0126);
    } 
    _TMP17 = _x0126 - _TMP27;
    _x0134 = _TMP17 + 5.00000000E-01;
    _info0124.w = floor(_x0134);
    _x0136 = _TMP27/2.00000000E+00;
    if (_x0136 < 0.00000000E+00) { 
        _x0140 = -_x0136;
        _TMP28 = floor(_x0140);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0136);
    } 
    _TMP18 = _x0136 - _TMP27;
    _x0144 = _TMP18 + 5.00000000E-01;
    _info0124.z = floor(_x0144);
    _x0146 = _TMP27/2.00000000E+00;
    if (_x0146 < 0.00000000E+00) { 
        _x0150 = -_x0146;
        _TMP28 = floor(_x0150);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0146);
    } 
    _TMP19 = _x0146 - _TMP27;
    _x0154 = _TMP19 + 5.00000000E-01;
    _info0124.y = floor(_x0154);
    _info0124.x = _TMP27;
    _x0158 = _TMP85.z/2.00000000E+00;
    if (_x0158 < 0.00000000E+00) { 
        _x0162 = -_x0158;
        _TMP28 = floor(_x0162);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0158);
    } 
    _TMP17 = _x0158 - _TMP27;
    _x0166 = _TMP17 + 5.00000000E-01;
    _info0156.w = floor(_x0166);
    _x0168 = _TMP27/2.00000000E+00;
    if (_x0168 < 0.00000000E+00) { 
        _x0172 = -_x0168;
        _TMP28 = floor(_x0172);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0168);
    } 
    _TMP18 = _x0168 - _TMP27;
    _x0176 = _TMP18 + 5.00000000E-01;
    _info0156.z = floor(_x0176);
    _x0178 = _TMP27/2.00000000E+00;
    if (_x0178 < 0.00000000E+00) { 
        _x0182 = -_x0178;
        _TMP28 = floor(_x0182);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0178);
    } 
    _TMP19 = _x0178 - _TMP27;
    _x0186 = _TMP19 + 5.00000000E-01;
    _info0156.y = floor(_x0186);
    _info0156.x = _TMP27;
    _x0190 = _TMP85.w/2.00000000E+00;
    if (_x0190 < 0.00000000E+00) { 
        _x0194 = -_x0190;
        _TMP28 = floor(_x0194);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0190);
    } 
    _TMP17 = _x0190 - _TMP27;
    _x0198 = _TMP17 + 5.00000000E-01;
    _info0188.w = floor(_x0198);
    _x0200 = _TMP27/2.00000000E+00;
    if (_x0200 < 0.00000000E+00) { 
        _x0204 = -_x0200;
        _TMP28 = floor(_x0204);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0200);
    } 
    _TMP18 = _x0200 - _TMP27;
    _x0208 = _TMP18 + 5.00000000E-01;
    _info0188.z = floor(_x0208);
    _x0210 = _TMP27/2.00000000E+00;
    if (_x0210 < 0.00000000E+00) { 
        _x0214 = -_x0210;
        _TMP28 = floor(_x0214);
        _TMP27 = -_TMP28;
    } else {
        _TMP27 = floor(_x0210);
    } 
    _TMP19 = _x0210 - _TMP27;
    _x0218 = _TMP19 + 5.00000000E-01;
    _info0188.y = floor(_x0218);
    _info0188.x = _TMP27;
    _fx45i = _info0188*_TMP53;
    _fx45 = _info0092*_TMP61;
    _fx30 = _info0124*_TMP69;
    _fx60 = _info0156*_TMP77;
    _rmean0222 = (_TMP2.x + _TMP3.x)/2.00000000E+00;
    _diff0222 = _TMP2.xyz - _TMP3.xyz;
    _K0222 = vec3(1.70000000E+01 + _rmean0222, 2.00000000E+01, 3.00000000E+00 - _rmean0222);
    _a0224 = _K0222*_diff0222;
    _TMP24 = dot(_a0224, _diff0222);
    _TMP26 = inversesqrt(_TMP24);
    _TMP221 = 1.00000000E+00/_TMP26;
    _rmean0230 = (_TMP2.x + _TMP0.x)/2.00000000E+00;
    _diff0230 = _TMP2.xyz - _TMP0.xyz;
    _K0230 = vec3(1.70000000E+01 + _rmean0230, 2.00000000E+01, 3.00000000E+00 - _rmean0230);
    _a0232 = _K0230*_diff0230;
    _TMP24 = dot(_a0232, _diff0230);
    _TMP26 = inversesqrt(_TMP24);
    _TMP229 = 1.00000000E+00/_TMP26;
    _rmean0238 = (_TMP2.x + _TMP1.x)/2.00000000E+00;
    _diff0238 = _TMP2.xyz - _TMP1.xyz;
    _K0238 = vec3(1.70000000E+01 + _rmean0238, 2.00000000E+01, 3.00000000E+00 - _rmean0238);
    _a0240 = _K0238*_diff0238;
    _TMP24 = dot(_a0240, _diff0238);
    _TMP26 = inversesqrt(_TMP24);
    _TMP237 = 1.00000000E+00/_TMP26;
    _rmean0246 = (_TMP2.x + _TMP4.x)/2.00000000E+00;
    _diff0246 = _TMP2.xyz - _TMP4.xyz;
    _K0246 = vec3(1.70000000E+01 + _rmean0246, 2.00000000E+01, 3.00000000E+00 - _rmean0246);
    _a0248 = _K0246*_diff0246;
    _TMP24 = dot(_a0248, _diff0246);
    _TMP26 = inversesqrt(_TMP24);
    _TMP245 = 1.00000000E+00/_TMP26;
    _TMP5 = vec4(_TMP221, _TMP229, _TMP237, _TMP245);
    _rmean0256 = (_TMP2.x + _TMP4.x)/2.00000000E+00;
    _diff0256 = _TMP2.xyz - _TMP4.xyz;
    _K0256 = vec3(1.70000000E+01 + _rmean0256, 2.00000000E+01, 3.00000000E+00 - _rmean0256);
    _a0258 = _K0256*_diff0256;
    _TMP24 = dot(_a0258, _diff0256);
    _TMP26 = inversesqrt(_TMP24);
    _TMP255 = 1.00000000E+00/_TMP26;
    _rmean0264 = (_TMP2.x + _TMP3.x)/2.00000000E+00;
    _diff0264 = _TMP2.xyz - _TMP3.xyz;
    _K0264 = vec3(1.70000000E+01 + _rmean0264, 2.00000000E+01, 3.00000000E+00 - _rmean0264);
    _a0266 = _K0264*_diff0264;
    _TMP24 = dot(_a0266, _diff0264);
    _TMP26 = inversesqrt(_TMP24);
    _TMP263 = 1.00000000E+00/_TMP26;
    _rmean0272 = (_TMP2.x + _TMP0.x)/2.00000000E+00;
    _diff0272 = _TMP2.xyz - _TMP0.xyz;
    _K0272 = vec3(1.70000000E+01 + _rmean0272, 2.00000000E+01, 3.00000000E+00 - _rmean0272);
    _a0274 = _K0272*_diff0272;
    _TMP24 = dot(_a0274, _diff0272);
    _TMP26 = inversesqrt(_TMP24);
    _TMP271 = 1.00000000E+00/_TMP26;
    _rmean0280 = (_TMP2.x + _TMP1.x)/2.00000000E+00;
    _diff0280 = _TMP2.xyz - _TMP1.xyz;
    _K0280 = vec3(1.70000000E+01 + _rmean0280, 2.00000000E+01, 3.00000000E+00 - _rmean0280);
    _a0282 = _K0280*_diff0280;
    _TMP24 = dot(_a0282, _diff0280);
    _TMP26 = inversesqrt(_TMP24);
    _TMP279 = 1.00000000E+00/_TMP26;
    _TMP6 = vec4(_TMP255, _TMP263, _TMP271, _TMP279);
    _px = bvec4(_TMP5.x <= _TMP6.x, _TMP5.y <= _TMP6.y, _TMP5.z <= _TMP6.z, _TMP5.w <= _TMP6.w);
    _TMP7 = max(_fx30, _fx60);
    _TMP8 = max(_fx45, _fx45i);
    _maximos = max(_TMP7, _TMP8);
    _t0294 = float(_px.x);
    _TMP9 = _TMP4.xyz + _t0294*(_TMP3.xyz - _TMP4.xyz);
    _res1 = _TMP2.xyz + _maximos.x*(_TMP9 - _TMP2.xyz);
    _t0298 = float(_px.z);
    _TMP10 = _TMP0.xyz + _t0298*(_TMP1.xyz - _TMP0.xyz);
    _res1 = _res1 + _maximos.z*(_TMP10 - _res1);
    _t0302 = float(_px.y);
    _TMP11 = _TMP3.xyz + _t0302*(_TMP0.xyz - _TMP3.xyz);
    _res2 = _TMP2.xyz + _maximos.y*(_TMP11 - _TMP2.xyz);
    _t0306 = float(_px.w);
    _TMP12 = _TMP1.xyz + _t0306*(_TMP4.xyz - _TMP1.xyz);
    _res2 = _res2 + _maximos.w*(_TMP12 - _res2);
    _rmean0310 = (_TMP2.x + _res1.x)/2.00000000E+00;
    _diff0310 = _TMP2.xyz - _res1;
    _K0310 = vec3(1.70000000E+01 + _rmean0310, 2.00000000E+01, 3.00000000E+00 - _rmean0310);
    _a0312 = _K0310*_diff0310;
    _TMP24 = dot(_a0312, _diff0310);
    _TMP26 = inversesqrt(_TMP24);
    _TMP309 = 1.00000000E+00/_TMP26;
    _rmean0318 = (_TMP2.x + _res2.x)/2.00000000E+00;
    _diff0318 = _TMP2.xyz - _res2;
    _K0318 = vec3(1.70000000E+01 + _rmean0318, 2.00000000E+01, 3.00000000E+00 - _rmean0318);
    _a0320 = _K0318*_diff0318;
    _TMP24 = dot(_a0320, _diff0318);
    _TMP26 = inversesqrt(_TMP24);
    _TMP317 = 1.00000000E+00/_TMP26;
    _TMP15 = float((_TMP317 >= _TMP309));
    _res = _res1 + _TMP15*(_res2 - _res1);
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
