// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color;
struct output_dummy {
    vec4 _color;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _otexCoord;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _otexCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    gl_Position = _r0005;
    TEX0.xy = _otexCoord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color;
struct output_dummy {
    vec4 _color;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
float _TMP58;
vec3 _TMP57;
float _TMP56;
vec3 _TMP55;
float _TMP54;
vec3 _TMP53;
float _TMP52;
float _TMP50;
vec3 _TMP51;
vec3 _TMP49;
float _TMP48;
float _TMP46;
vec3 _TMP47;
vec3 _TMP45;
float _TMP44;
vec3 _TMP43;
float _TMP42;
vec3 _TMP41;
float _TMP40;
vec3 _TMP39;
float _TMP38;
vec3 _TMP37;
float _TMP36;
vec3 _TMP35;
float _TMP34;
vec3 _TMP33;
float _TMP32;
vec3 _TMP31;
float _TMP30;
vec3 _TMP29;
float _TMP28;
vec3 _TMP27;
float _TMP26;
vec3 _TMP25;
float _TMP24;
vec3 _TMP23;
float _TMP22;
vec3 _TMP21;
float _TMP20;
vec3 _TMP19;
float _TMP18;
vec3 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
uniform sampler2D Texture;
vec2 _c0065;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _c0083;
vec2 _c0085;
vec2 _c0087;
vec2 _c0089;
vec2 _c0091;
vec2 _c0093;
vec2 _c0095;
vec3 _a0097;
vec3 _a0101;
vec3 _a0105;
vec3 _a0109;
vec3 _a0113;
vec3 _a0117;
vec3 _a0121;
vec3 _a0125;
vec3 _a0129;
vec3 _a0133;
vec3 _a0137;
vec3 _a0141;
vec3 _a0145;
vec3 _a0149;
vec3 _a0153;
vec3 _a0157;
vec3 _a0163;
vec3 _a0167;
vec3 _a0173;
vec3 _a0177;
vec3 _a0181;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _dx;
    float _dy;
    vec4 _yx;
    vec4 _xh;
    vec4 _yv;
    vec4 _ox;
    vec3 _c11;
    float _m1;
    float _m2;
    float _h1;
    float _h2;
    float _h3;
    float _h4;
    float _v1;
    float _v2;
    float _v3;
    float _v4;
    vec3 _t1;
    vec3 _t2;
    vec3 _t3;
    float _k00;
    float _k20;
    float _k22;
    float _k02;
    float _kr1;
    float _kr2;
    float _w1;
    float _w2;
    float _w3;
    float _w4;
    float _k1;
    float _k2;
    float _k3;
    output_dummy _OUT;
    vec3 _TMP61;
    _dx = 2.50000000E-01/TextureSize.x;
    _dy = 2.50000000E-01/TextureSize.y;
    _yx = vec4(_dx, _dy, -_dx, -_dy);
    _xh = vec4(3.00000000E+00*_dx, _dy, -3.00000000E+00*_dx, -_dy);
    _yv = vec4(_dx, 3.00000000E+00*_dy, -_dx, -3.00000000E+00*_dy);
    _ox = 2.00000000E+00*_yx;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0065 = TEX0.xy + _yx.zw;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0065);
    _c0067 = TEX0.xy + _yx.xw;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = TEX0.xy + _yx.xy;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0069);
    _c0071 = TEX0.xy + _yx.zy;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0071);
    _c0073 = TEX0.xy + _xh.zw;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0073);
    _c0075 = TEX0.xy + _xh.xw;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0075);
    _c0077 = TEX0.xy + _xh.xy;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0077);
    _c0079 = TEX0.xy + _xh.zy;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0079);
    _c0081 = TEX0.xy + _yv.zw;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0081);
    _c0083 = TEX0.xy + _yv.xw;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0083);
    _c0085 = TEX0.xy + _yv.xy;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0085);
    _c0087 = TEX0.xy + _yv.zy;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0087);
    _c0089 = TEX0.xy + _ox.zw;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0089);
    _c0091 = TEX0.xy + _ox.xw;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0091);
    _c0093 = TEX0.xy + _ox.xy;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0093);
    _c0095 = TEX0.xy + _ox.zy;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0095);
    _a0097 = _TMP1.xyz - _TMP3.xyz;
    _TMP17 = abs(_a0097);
    _TMP18 = dot(_TMP17, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _m1 = 1.00000000E+00/(_TMP18 + 9.99999975E-06);
    _a0101 = _TMP4.xyz - _TMP2.xyz;
    _TMP19 = abs(_a0101);
    _TMP20 = dot(_TMP19, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _m2 = 1.00000000E+00/(_TMP20 + 9.99999975E-06);
    _a0105 = _TMP1.xyz - _TMP7.xyz;
    _TMP21 = abs(_a0105);
    _TMP22 = dot(_TMP21, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h1 = 1.00000000E+00/(_TMP22 + 9.99999975E-06);
    _a0109 = _TMP4.xyz - _TMP6.xyz;
    _TMP23 = abs(_a0109);
    _TMP24 = dot(_TMP23, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h2 = 1.00000000E+00/(_TMP24 + 9.99999975E-06);
    _a0113 = _TMP5.xyz - _TMP3.xyz;
    _TMP25 = abs(_a0113);
    _TMP26 = dot(_TMP25, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h3 = 1.00000000E+00/(_TMP26 + 9.99999975E-06);
    _a0117 = _TMP8.xyz - _TMP2.xyz;
    _TMP27 = abs(_a0117);
    _TMP28 = dot(_TMP27, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h4 = 1.00000000E+00/(_TMP28 + 9.99999975E-06);
    _a0121 = _TMP1.xyz - _TMP11.xyz;
    _TMP29 = abs(_a0121);
    _TMP30 = dot(_TMP29, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v1 = 1.00000000E+00/(_TMP30 + 9.99999975E-06);
    _a0125 = _TMP4.xyz - _TMP10.xyz;
    _TMP31 = abs(_a0125);
    _TMP32 = dot(_TMP31, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v2 = 1.00000000E+00/(_TMP32 + 9.99999975E-06);
    _a0129 = _TMP9.xyz - _TMP3.xyz;
    _TMP33 = abs(_a0129);
    _TMP34 = dot(_TMP33, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v3 = 1.00000000E+00/(_TMP34 + 9.99999975E-06);
    _a0133 = _TMP12.xyz - _TMP2.xyz;
    _TMP35 = abs(_a0133);
    _TMP36 = dot(_TMP35, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v4 = 1.00000000E+00/(_TMP36 + 9.99999975E-06);
    _t1 = (5.00000000E-01*(_m1*(_TMP1.xyz + _TMP3.xyz) + _m2*(_TMP4.xyz + _TMP2.xyz)))/(_m1 + _m2);
    _t2 = (5.00000000E-01*(_h1*(_TMP1.xyz + _TMP7.xyz) + _h2*(_TMP4.xyz + _TMP6.xyz) + _h3*(_TMP5.xyz + _TMP3.xyz) + _h4*(_TMP8.xyz + _TMP2.xyz)))/(_h1 + _h2 + _h3 + _h4);
    _t3 = (5.00000000E-01*(_v1*(_TMP1.xyz + _TMP11.xyz) + _v2*(_TMP4.xyz + _TMP10.xyz) + _v3*(_TMP9.xyz + _TMP3.xyz) + _v4*(_TMP12.xyz + _TMP2.xyz)))/(_v1 + _v2 + _v3 + _v4);
    _a0137 = _TMP13.xyz - _TMP0.xyz;
    _TMP37 = abs(_a0137);
    _TMP38 = dot(_TMP37, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k00 = _TMP38 + 9.99999975E-06;
    _a0141 = _TMP14.xyz - _TMP0.xyz;
    _TMP39 = abs(_a0141);
    _TMP40 = dot(_TMP39, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k20 = _TMP40 + 9.99999975E-06;
    _a0145 = _TMP15.xyz - _TMP0.xyz;
    _TMP41 = abs(_a0145);
    _TMP42 = dot(_TMP41, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k22 = _TMP42 + 9.99999975E-06;
    _a0149 = _TMP16.xyz - _TMP0.xyz;
    _TMP43 = abs(_a0149);
    _TMP44 = dot(_TMP43, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k02 = _TMP44 + 9.99999975E-06;
    _a0153 = _TMP1.xyz - _TMP3.xyz;
    _TMP45 = abs(_a0153);
    _TMP46 = dot(_TMP45, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _a0157 = _TMP13.xyz - _TMP15.xyz;
    _TMP47 = abs(_a0157);
    _TMP48 = dot(_TMP47, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _kr1 = min(_TMP46, _TMP48);
    _a0163 = _TMP4.xyz - _TMP2.xyz;
    _TMP49 = abs(_a0163);
    _TMP50 = dot(_TMP49, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _a0167 = _TMP14.xyz - _TMP16.xyz;
    _TMP51 = abs(_a0167);
    _TMP52 = dot(_TMP51, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _kr2 = min(_TMP50, _TMP52);
    _w1 = _kr2;
    if (_k22 < _k00) { 
        _w1 = 0.00000000E+00;
    } 
    _w2 = _kr1;
    if (_k02 < _k20) { 
        _w2 = 0.00000000E+00;
    } 
    _w3 = _kr2;
    if (_k00 < _k22) { 
        _w3 = 0.00000000E+00;
    } 
    _w4 = _kr1;
    if (_k20 < _k02) { 
        _w4 = 0.00000000E+00;
    } 
    _c11 = (_w1*_TMP13.xyz + _w2*_TMP14.xyz + _w3*_TMP15.xyz + _w4*_TMP16.xyz + 1.00000005E-03*_TMP0.xyz)/(_w1 + _w2 + _w3 + _w4 + 1.00000005E-03);
    _a0173 = _t1 - _c11;
    _TMP53 = abs(_a0173);
    _TMP54 = dot(_TMP53, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k1 = 1.00000000E+00/(_TMP54 + 9.99999975E-06);
    _a0177 = _t2 - _c11;
    _TMP55 = abs(_a0177);
    _TMP56 = dot(_TMP55, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k2 = 1.00000000E+00/(_TMP56 + 9.99999975E-06);
    _a0181 = _t3 - _c11;
    _TMP57 = abs(_a0181);
    _TMP58 = dot(_TMP57, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k3 = 1.00000000E+00/(_TMP58 + 9.99999975E-06);
    _TMP61 = (_k1*_t1 + _k2*_t2 + _k3*_t3)/(_k1 + _k2 + _k3);
    _OUT._color = vec4(_TMP61.x, _TMP61.y, _TMP61.z, 1.00000000E+00);
    FragColor = _OUT._color;
    return;
} 
#endif
