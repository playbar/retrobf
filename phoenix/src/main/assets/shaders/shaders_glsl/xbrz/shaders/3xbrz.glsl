// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP83;
float _TMP81;
float _TMP79;
float _TMP77;
float _TMP75;
float _TMP73;
float _TMP71;
float _TMP69;
float _TMP105;
float _TMP104;
float _TMP101;
float _TMP102;
float _TMP103;
float _TMP98;
float _TMP99;
float _TMP100;
float _TMP95;
float _TMP96;
float _TMP97;
vec3 _TMP92;
float _TMP106;
bool _TMP91;
bool _TMP90;
bool _TMP89;
bool _TMP88;
bool _TMP87;
bool _TMP86;
bool _TMP85;
bvec4 _TMP84;
int _TMP67;
int _TMP68;
int _TMP55;
int _TMP56;
int _TMP43;
int _TMP44;
int _TMP31;
int _TMP32;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0113;
float _TMP156;
float _TMP160;
float _TMP164;
float _TMP168;
float _TMP172;
float _TMP176;
float _TMP180;
float _TMP184;
float _TMP188;
float _TMP192;
vec3 _diff0193;
float _Y0193;
float _Cb0193;
float _Cr0193;
float _a0197;
float _TMP200;
vec3 _diff0201;
float _Y0201;
float _Cb0201;
float _Cr0201;
float _a0205;
float _TMP208;
vec3 _diff0209;
float _Y0209;
float _Cb0209;
float _Cr0209;
float _a0213;
float _TMP216;
vec3 _diff0217;
float _Y0217;
float _Cb0217;
float _Cr0217;
float _a0221;
float _TMP224;
vec3 _diff0225;
float _Y0225;
float _Cb0225;
float _Cr0225;
float _a0229;
float _TMP232;
vec3 _diff0233;
float _Y0233;
float _Cb0233;
float _Cr0233;
float _a0237;
float _TMP240;
vec3 _diff0241;
float _Y0241;
float _Cb0241;
float _Cr0241;
float _a0245;
float _TMP248;
vec3 _diff0249;
float _Y0249;
float _Cb0249;
float _Cr0249;
float _a0253;
float _TMP256;
vec3 _diff0257;
float _Y0257;
float _Cb0257;
float _Cr0257;
float _a0261;
float _TMP264;
vec3 _diff0265;
float _Y0265;
float _Cb0265;
float _Cr0265;
float _a0269;
float _TMP272;
vec3 _diff0273;
float _Y0273;
float _Cb0273;
float _Cr0273;
float _a0277;
float _TMP280;
vec3 _diff0281;
float _Y0281;
float _Cb0281;
float _Cr0281;
float _a0285;
float _TMP288;
vec3 _diff0289;
float _Y0289;
float _Cb0289;
float _Cr0289;
float _a0293;
float _TMP296;
vec3 _diff0297;
float _Y0297;
float _Cb0297;
float _Cr0297;
float _a0301;
float _TMP304;
vec3 _diff0305;
float _Y0305;
float _Cb0305;
float _Cr0305;
float _a0309;
float _TMP312;
vec3 _diff0313;
float _Y0313;
float _Cb0313;
float _Cr0313;
float _a0317;
float _TMP320;
vec3 _diff0321;
float _Y0321;
float _Cb0321;
float _Cr0321;
float _a0325;
float _TMP328;
vec3 _diff0329;
float _Y0329;
float _Cb0329;
float _Cr0329;
float _a0333;
float _TMP336;
vec3 _diff0337;
float _Y0337;
float _Cb0337;
float _Cr0337;
float _a0341;
float _TMP344;
vec3 _diff0345;
float _Y0345;
float _Cb0345;
float _Cr0345;
float _a0349;
float _TMP352;
vec3 _diff0353;
float _Y0353;
float _Cb0353;
float _Cr0353;
float _a0357;
float _TMP360;
vec3 _diff0361;
float _Y0361;
float _Cb0361;
float _Cr0361;
float _a0365;
float _TMP368;
vec3 _diff0369;
float _Y0369;
float _Cb0369;
float _Cr0369;
float _a0373;
float _TMP376;
vec3 _diff0377;
float _Y0377;
float _Cb0377;
float _Cr0377;
float _a0381;
float _TMP384;
vec3 _diff0385;
float _Y0385;
float _Cb0385;
float _Cr0385;
float _a0389;
float _TMP392;
vec3 _diff0393;
float _Y0393;
float _Cb0393;
float _Cr0393;
float _a0397;
float _TMP400;
vec3 _diff0401;
float _Y0401;
float _Cb0401;
float _Cr0401;
float _a0405;
float _TMP408;
vec3 _diff0409;
float _Y0409;
float _Cb0409;
float _Cr0409;
float _a0413;
float _TMP416;
vec3 _diff0417;
float _Y0417;
float _Cb0417;
float _Cr0417;
float _a0421;
float _TMP424;
vec3 _diff0425;
float _Y0425;
float _Cb0425;
float _Cr0425;
float _a0429;
float _TMP432;
vec3 _diff0433;
float _Y0433;
float _Cb0433;
float _Cr0433;
float _a0437;
float _TMP440;
vec3 _diff0441;
float _Y0441;
float _Cb0441;
float _Cr0441;
float _a0445;
float _TMP448;
vec3 _diff0449;
float _Y0449;
float _Cb0449;
float _Cr0449;
float _a0453;
float _TMP456;
vec3 _diff0457;
float _Y0457;
float _Cb0457;
float _Cr0457;
float _a0461;
float _TMP464;
vec3 _diff0465;
float _Y0465;
float _Cb0465;
float _Cr0465;
float _a0469;
float _TMP472;
vec3 _diff0473;
float _Y0473;
float _Cb0473;
float _Cr0473;
float _a0477;
float _TMP480;
vec3 _diff0481;
float _Y0481;
float _Cb0481;
float _Cr0481;
float _a0485;
float _TMP488;
vec3 _diff0489;
float _Y0489;
float _Cb0489;
float _Cr0489;
float _a0493;
float _TMP496;
vec3 _diff0497;
float _Y0497;
float _Cb0497;
float _Cr0497;
float _a0501;
float _TMP504;
vec3 _diff0505;
float _Y0505;
float _Cb0505;
float _Cr0505;
float _a0509;
bool _haveShallowLine0512;
bool _haveSteepLine0512;
bool _needBlend0512;
bool _doLineBlend0512;
float _TMP513;
float _TMP517;
float _TMP521;
float _TMP525;
float _TMP529;
float _TMP533;
vec3 _diff0534;
float _Y0534;
float _Cb0534;
float _Cr0534;
float _a0538;
float _TMP541;
vec3 _diff0542;
float _Y0542;
float _Cb0542;
float _Cr0542;
float _a0546;
float _TMP551;
vec3 _diff0552;
float _Y0552;
float _Cb0552;
float _Cr0552;
float _a0556;
float _TMP561;
vec3 _diff0562;
float _Y0562;
float _Cb0562;
float _Cr0562;
float _a0566;
float _TMP571;
vec3 _diff0572;
float _Y0572;
float _Cb0572;
float _Cr0572;
float _a0576;
float _TMP581;
vec3 _diff0582;
float _Y0582;
float _Cb0582;
float _Cr0582;
float _a0586;
float _TMP591;
vec3 _diff0592;
float _Y0592;
float _Cb0592;
float _Cr0592;
float _a0596;
float _TMP601;
vec3 _diff0602;
float _Y0602;
float _Cb0602;
float _Cr0602;
float _a0606;
float _TMP611;
vec3 _diff0612;
float _Y0612;
float _Cb0612;
float _Cr0612;
float _a0616;
float _TMP619;
vec3 _diff0620;
float _Y0620;
float _Cb0620;
float _Cr0620;
float _a0624;
float _TMP627;
vec3 _diff0628;
float _Y0628;
float _Cb0628;
float _Cr0628;
float _a0632;
vec3 _TMP635;
float _a0636;
vec3 _TMP639;
float _a0640;
vec3 _TMP643;
float _a0644;
vec3 _TMP647;
float _a0648;
vec3 _TMP651;
float _a0652;
bool _haveShallowLine0655;
bool _haveSteepLine0655;
bool _needBlend0655;
bool _doLineBlend0655;
float _TMP656;
float _TMP660;
float _TMP664;
float _TMP668;
float _TMP672;
float _TMP676;
vec3 _diff0677;
float _Y0677;
float _Cb0677;
float _Cr0677;
float _a0681;
float _TMP684;
vec3 _diff0685;
float _Y0685;
float _Cb0685;
float _Cr0685;
float _a0689;
float _TMP694;
vec3 _diff0695;
float _Y0695;
float _Cb0695;
float _Cr0695;
float _a0699;
float _TMP704;
vec3 _diff0705;
float _Y0705;
float _Cb0705;
float _Cr0705;
float _a0709;
float _TMP714;
vec3 _diff0715;
float _Y0715;
float _Cb0715;
float _Cr0715;
float _a0719;
float _TMP724;
vec3 _diff0725;
float _Y0725;
float _Cb0725;
float _Cr0725;
float _a0729;
float _TMP734;
vec3 _diff0735;
float _Y0735;
float _Cb0735;
float _Cr0735;
float _a0739;
float _TMP744;
vec3 _diff0745;
float _Y0745;
float _Cb0745;
float _Cr0745;
float _a0749;
float _TMP754;
vec3 _diff0755;
float _Y0755;
float _Cb0755;
float _Cr0755;
float _a0759;
float _TMP762;
vec3 _diff0763;
float _Y0763;
float _Cb0763;
float _Cr0763;
float _a0767;
float _TMP770;
vec3 _diff0771;
float _Y0771;
float _Cb0771;
float _Cr0771;
float _a0775;
vec3 _TMP778;
float _a0779;
vec3 _TMP782;
float _a0783;
vec3 _TMP786;
float _a0787;
vec3 _TMP790;
float _a0791;
vec3 _TMP794;
float _a0795;
bool _haveShallowLine0798;
bool _haveSteepLine0798;
bool _needBlend0798;
bool _doLineBlend0798;
float _TMP799;
float _TMP803;
float _TMP807;
float _TMP811;
float _TMP815;
float _TMP819;
vec3 _diff0820;
float _Y0820;
float _Cb0820;
float _Cr0820;
float _a0824;
float _TMP827;
vec3 _diff0828;
float _Y0828;
float _Cb0828;
float _Cr0828;
float _a0832;
float _TMP837;
vec3 _diff0838;
float _Y0838;
float _Cb0838;
float _Cr0838;
float _a0842;
float _TMP847;
vec3 _diff0848;
float _Y0848;
float _Cb0848;
float _Cr0848;
float _a0852;
float _TMP857;
vec3 _diff0858;
float _Y0858;
float _Cb0858;
float _Cr0858;
float _a0862;
float _TMP867;
vec3 _diff0868;
float _Y0868;
float _Cb0868;
float _Cr0868;
float _a0872;
float _TMP877;
vec3 _diff0878;
float _Y0878;
float _Cb0878;
float _Cr0878;
float _a0882;
float _TMP887;
vec3 _diff0888;
float _Y0888;
float _Cb0888;
float _Cr0888;
float _a0892;
float _TMP897;
vec3 _diff0898;
float _Y0898;
float _Cb0898;
float _Cr0898;
float _a0902;
float _TMP905;
vec3 _diff0906;
float _Y0906;
float _Cb0906;
float _Cr0906;
float _a0910;
float _TMP913;
vec3 _diff0914;
float _Y0914;
float _Cb0914;
float _Cr0914;
float _a0918;
vec3 _TMP921;
float _a0922;
vec3 _TMP925;
float _a0926;
vec3 _TMP929;
float _a0930;
vec3 _TMP933;
float _a0934;
vec3 _TMP937;
float _a0938;
bool _haveShallowLine0941;
bool _haveSteepLine0941;
bool _needBlend0941;
bool _doLineBlend0941;
float _TMP942;
float _TMP946;
float _TMP950;
float _TMP954;
float _TMP958;
float _TMP962;
vec3 _diff0963;
float _Y0963;
float _Cb0963;
float _Cr0963;
float _a0967;
float _TMP970;
vec3 _diff0971;
float _Y0971;
float _Cb0971;
float _Cr0971;
float _a0975;
float _TMP980;
vec3 _diff0981;
float _Y0981;
float _Cb0981;
float _Cr0981;
float _a0985;
float _TMP990;
vec3 _diff0991;
float _Y0991;
float _Cb0991;
float _Cr0991;
float _a0995;
float _TMP1000;
vec3 _diff1001;
float _Y1001;
float _Cb1001;
float _Cr1001;
float _a1005;
float _TMP1010;
vec3 _diff1011;
float _Y1011;
float _Cb1011;
float _Cr1011;
float _a1015;
float _TMP1020;
vec3 _diff1021;
float _Y1021;
float _Cb1021;
float _Cr1021;
float _a1025;
float _TMP1030;
vec3 _diff1031;
float _Y1031;
float _Cb1031;
float _Cr1031;
float _a1035;
float _TMP1040;
vec3 _diff1041;
float _Y1041;
float _Cb1041;
float _Cr1041;
float _a1045;
float _TMP1048;
vec3 _diff1049;
float _Y1049;
float _Cb1049;
float _Cr1049;
float _a1053;
float _TMP1056;
vec3 _diff1057;
float _Y1057;
float _Cb1057;
float _Cr1057;
float _a1061;
vec3 _TMP1064;
float _a1065;
vec3 _TMP1068;
float _a1069;
vec3 _TMP1072;
float _a1073;
vec3 _TMP1076;
float _a1077;
vec3 _TMP1080;
float _a1081;
bool _TMP1084;
vec3 _TMP1092;
vec3 _TMP1098;
vec3 _TMP1104;
vec3 _TMP1110;
vec3 _TMP1116;
vec3 _TMP1122;
vec3 _TMP1128;
vec3 _TMP1134;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _f;
    ivec4 _blendResult;
    float _dist_03_011;
    float _dist_00_021;
    bool _dominantGradient1;
    float _dist_04_001;
    float _dist_05_031;
    bool _dominantGradient2;
    float _dist_00_081;
    float _dist_07_011;
    bool _dominantGradient3;
    float _dist_05_071;
    float _dist_06_001;
    bool _dominantGradient4;
    vec3 _dst1[9];
    _x0113 = TEX0.xy*TextureSize;
    _f = fract(_x0113);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _TMP156 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP160 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP164 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP168 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP172 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP176 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP180 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP184 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP188 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _blendResult = ivec4(0, 0, 0, 0);
    if (!(_TMP156 == _TMP160 && _TMP168 == _TMP164 || _TMP156 == _TMP168 && _TMP160 == _TMP164)) { 
        _diff0193 = _TMP9.xyz - _TMP7.xyz;
        _Y0193 = dot(_diff0193, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0193 = 5.31519055E-01*(_diff0193.z - _Y0193);
        _Cr0193 = 6.78149998E-01*(_diff0193.x - _Y0193);
        _a0197 = _Y0193*_Y0193 + _Cb0193*_Cb0193 + _Cr0193*_Cr0193;
        _TMP106 = inversesqrt(_a0197);
        _TMP192 = 1.00000000E+00/_TMP106;
        _diff0201 = _TMP7.xyz - _TMP5.xyz;
        _Y0201 = dot(_diff0201, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0201 = 5.31519055E-01*(_diff0201.z - _Y0201);
        _Cr0201 = 6.78149998E-01*(_diff0201.x - _Y0201);
        _a0205 = _Y0201*_Y0201 + _Cb0201*_Cb0201 + _Cr0201*_Cr0201;
        _TMP106 = inversesqrt(_a0205);
        _TMP200 = 1.00000000E+00/_TMP106;
        _diff0209 = _TMP13.xyz - _TMP11.xyz;
        _Y0209 = dot(_diff0209, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0209 = 5.31519055E-01*(_diff0209.z - _Y0209);
        _Cr0209 = 6.78149998E-01*(_diff0209.x - _Y0209);
        _a0213 = _Y0209*_Y0209 + _Cb0209*_Cb0209 + _Cr0209*_Cr0209;
        _TMP106 = inversesqrt(_a0213);
        _TMP208 = 1.00000000E+00/_TMP106;
        _diff0217 = _TMP11.xyz - _TMP19.xyz;
        _Y0217 = dot(_diff0217, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0217 = 5.31519055E-01*(_diff0217.z - _Y0217);
        _Cr0217 = 6.78149998E-01*(_diff0217.x - _Y0217);
        _a0221 = _Y0217*_Y0217 + _Cb0217*_Cb0217 + _Cr0217*_Cr0217;
        _TMP106 = inversesqrt(_a0221);
        _TMP216 = 1.00000000E+00/_TMP106;
        _diff0225 = _TMP10.xyz - _TMP8.xyz;
        _Y0225 = dot(_diff0225, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0225 = 5.31519055E-01*(_diff0225.z - _Y0225);
        _Cr0225 = 6.78149998E-01*(_diff0225.x - _Y0225);
        _a0229 = _Y0225*_Y0225 + _Cb0225*_Cb0225 + _Cr0225*_Cr0225;
        _TMP106 = inversesqrt(_a0229);
        _TMP224 = 1.00000000E+00/_TMP106;
        _dist_03_011 = _TMP192 + _TMP200 + _TMP208 + _TMP216 + 4.00000000E+00*_TMP224;
        _diff0233 = _TMP6.xyz - _TMP10.xyz;
        _Y0233 = dot(_diff0233, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0233 = 5.31519055E-01*(_diff0233.z - _Y0233);
        _Cr0233 = 6.78149998E-01*(_diff0233.x - _Y0233);
        _a0237 = _Y0233*_Y0233 + _Cb0233*_Cb0233 + _Cr0233*_Cr0233;
        _TMP106 = inversesqrt(_a0237);
        _TMP232 = 1.00000000E+00/_TMP106;
        _diff0241 = _TMP10.xyz - _TMP14.xyz;
        _Y0241 = dot(_diff0241, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0241 = 5.31519055E-01*(_diff0241.z - _Y0241);
        _Cr0241 = 6.78149998E-01*(_diff0241.x - _Y0241);
        _a0245 = _Y0241*_Y0241 + _Cb0241*_Cb0241 + _Cr0241*_Cr0241;
        _TMP106 = inversesqrt(_a0245);
        _TMP240 = 1.00000000E+00/_TMP106;
        _diff0249 = _TMP4.xyz - _TMP8.xyz;
        _Y0249 = dot(_diff0249, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0249 = 5.31519055E-01*(_diff0249.z - _Y0249);
        _Cr0249 = 6.78149998E-01*(_diff0249.x - _Y0249);
        _a0253 = _Y0249*_Y0249 + _Cb0249*_Cb0249 + _Cr0249*_Cr0249;
        _TMP106 = inversesqrt(_a0253);
        _TMP248 = 1.00000000E+00/_TMP106;
        _diff0257 = _TMP8.xyz - _TMP20.xyz;
        _Y0257 = dot(_diff0257, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0257 = 5.31519055E-01*(_diff0257.z - _Y0257);
        _Cr0257 = 6.78149998E-01*(_diff0257.x - _Y0257);
        _a0261 = _Y0257*_Y0257 + _Cb0257*_Cb0257 + _Cr0257*_Cr0257;
        _TMP106 = inversesqrt(_a0261);
        _TMP256 = 1.00000000E+00/_TMP106;
        _diff0265 = _TMP7.xyz - _TMP11.xyz;
        _Y0265 = dot(_diff0265, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0265 = 5.31519055E-01*(_diff0265.z - _Y0265);
        _Cr0265 = 6.78149998E-01*(_diff0265.x - _Y0265);
        _a0269 = _Y0265*_Y0265 + _Cb0265*_Cb0265 + _Cr0265*_Cr0265;
        _TMP106 = inversesqrt(_a0269);
        _TMP264 = 1.00000000E+00/_TMP106;
        _dist_00_021 = _TMP232 + _TMP240 + _TMP248 + _TMP256 + 4.00000000E+00*_TMP264;
        _dominantGradient1 = 3.59999990E+00*_dist_03_011 < _dist_00_021;
        if (_dist_03_011 < _dist_00_021 && _TMP156 != _TMP160 && _TMP156 != _TMP168) { 
            if (_dominantGradient1) { 
                _TMP32 = 2;
            } else {
                _TMP32 = 1;
            } 
            _TMP31 = _TMP32;
        } else {
            _TMP31 = 0;
        } 
        _blendResult.z = _TMP31;
    } 
    if (!(_TMP176 == _TMP156 && _TMP172 == _TMP168 || _TMP176 == _TMP172 && _TMP156 == _TMP168)) { 
        _diff0273 = _TMP17.xyz - _TMP6.xyz;
        _Y0273 = dot(_diff0273, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0273 = 5.31519055E-01*(_diff0273.z - _Y0273);
        _Cr0273 = 6.78149998E-01*(_diff0273.x - _Y0273);
        _a0277 = _Y0273*_Y0273 + _Cb0273*_Cb0273 + _Cr0273*_Cr0273;
        _TMP106 = inversesqrt(_a0277);
        _TMP272 = 1.00000000E+00/_TMP106;
        _diff0281 = _TMP6.xyz - _TMP4.xyz;
        _Y0281 = dot(_diff0281, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0281 = 5.31519055E-01*(_diff0281.z - _Y0281);
        _Cr0281 = 6.78149998E-01*(_diff0281.x - _Y0281);
        _a0285 = _Y0281*_Y0281 + _Cb0281*_Cb0281 + _Cr0281*_Cr0281;
        _TMP106 = inversesqrt(_a0285);
        _TMP280 = 1.00000000E+00/_TMP106;
        _diff0289 = _TMP12.xyz - _TMP10.xyz;
        _Y0289 = dot(_diff0289, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0289 = 5.31519055E-01*(_diff0289.z - _Y0289);
        _Cr0289 = 6.78149998E-01*(_diff0289.x - _Y0289);
        _a0293 = _Y0289*_Y0289 + _Cb0289*_Cb0289 + _Cr0289*_Cr0289;
        _TMP106 = inversesqrt(_a0293);
        _TMP288 = 1.00000000E+00/_TMP106;
        _diff0297 = _TMP10.xyz - _TMP8.xyz;
        _Y0297 = dot(_diff0297, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0297 = 5.31519055E-01*(_diff0297.z - _Y0297);
        _Cr0297 = 6.78149998E-01*(_diff0297.x - _Y0297);
        _a0301 = _Y0297*_Y0297 + _Cb0297*_Cb0297 + _Cr0297*_Cr0297;
        _TMP106 = inversesqrt(_a0301);
        _TMP296 = 1.00000000E+00/_TMP106;
        _diff0305 = _TMP9.xyz - _TMP7.xyz;
        _Y0305 = dot(_diff0305, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0305 = 5.31519055E-01*(_diff0305.z - _Y0305);
        _Cr0305 = 6.78149998E-01*(_diff0305.x - _Y0305);
        _a0309 = _Y0305*_Y0305 + _Cb0305*_Cb0305 + _Cr0305*_Cr0305;
        _TMP106 = inversesqrt(_a0309);
        _TMP304 = 1.00000000E+00/_TMP106;
        _dist_04_001 = _TMP272 + _TMP280 + _TMP288 + _TMP296 + 4.00000000E+00*_TMP304;
        _diff0313 = _TMP16.xyz - _TMP9.xyz;
        _Y0313 = dot(_diff0313, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0313 = 5.31519055E-01*(_diff0313.z - _Y0313);
        _Cr0313 = 6.78149998E-01*(_diff0313.x - _Y0313);
        _a0317 = _Y0313*_Y0313 + _Cb0313*_Cb0313 + _Cr0313*_Cr0313;
        _TMP106 = inversesqrt(_a0317);
        _TMP312 = 1.00000000E+00/_TMP106;
        _diff0321 = _TMP9.xyz - _TMP13.xyz;
        _Y0321 = dot(_diff0321, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0321 = 5.31519055E-01*(_diff0321.z - _Y0321);
        _Cr0321 = 6.78149998E-01*(_diff0321.x - _Y0321);
        _a0325 = _Y0321*_Y0321 + _Cb0321*_Cb0321 + _Cr0321*_Cr0321;
        _TMP106 = inversesqrt(_a0325);
        _TMP320 = 1.00000000E+00/_TMP106;
        _diff0329 = _TMP3.xyz - _TMP7.xyz;
        _Y0329 = dot(_diff0329, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0329 = 5.31519055E-01*(_diff0329.z - _Y0329);
        _Cr0329 = 6.78149998E-01*(_diff0329.x - _Y0329);
        _a0333 = _Y0329*_Y0329 + _Cb0329*_Cb0329 + _Cr0329*_Cr0329;
        _TMP106 = inversesqrt(_a0333);
        _TMP328 = 1.00000000E+00/_TMP106;
        _diff0337 = _TMP7.xyz - _TMP11.xyz;
        _Y0337 = dot(_diff0337, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0337 = 5.31519055E-01*(_diff0337.z - _Y0337);
        _Cr0337 = 6.78149998E-01*(_diff0337.x - _Y0337);
        _a0341 = _Y0337*_Y0337 + _Cb0337*_Cb0337 + _Cr0337*_Cr0337;
        _TMP106 = inversesqrt(_a0341);
        _TMP336 = 1.00000000E+00/_TMP106;
        _diff0345 = _TMP6.xyz - _TMP10.xyz;
        _Y0345 = dot(_diff0345, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0345 = 5.31519055E-01*(_diff0345.z - _Y0345);
        _Cr0345 = 6.78149998E-01*(_diff0345.x - _Y0345);
        _a0349 = _Y0345*_Y0345 + _Cb0345*_Cb0345 + _Cr0345*_Cr0345;
        _TMP106 = inversesqrt(_a0349);
        _TMP344 = 1.00000000E+00/_TMP106;
        _dist_05_031 = _TMP312 + _TMP320 + _TMP328 + _TMP336 + 4.00000000E+00*_TMP344;
        _dominantGradient2 = 3.59999990E+00*_dist_05_031 < _dist_04_001;
        if (_dist_04_001 > _dist_05_031 && _TMP156 != _TMP176 && _TMP156 != _TMP168) { 
            if (_dominantGradient2) { 
                _TMP44 = 2;
            } else {
                _TMP44 = 1;
            } 
            _TMP43 = _TMP44;
        } else {
            _TMP43 = 0;
        } 
        _blendResult.w = _TMP43;
    } 
    if (!(_TMP184 == _TMP188 && _TMP156 == _TMP160 || _TMP184 == _TMP156 && _TMP188 == _TMP160)) { 
        _diff0353 = _TMP6.xyz - _TMP4.xyz;
        _Y0353 = dot(_diff0353, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0353 = 5.31519055E-01*(_diff0353.z - _Y0353);
        _Cr0353 = 6.78149998E-01*(_diff0353.x - _Y0353);
        _a0357 = _Y0353*_Y0353 + _Cb0353*_Cb0353 + _Cr0353*_Cr0353;
        _TMP106 = inversesqrt(_a0357);
        _TMP352 = 1.00000000E+00/_TMP106;
        _diff0361 = _TMP4.xyz - _TMP2.xyz;
        _Y0361 = dot(_diff0361, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0361 = 5.31519055E-01*(_diff0361.z - _Y0361);
        _Cr0361 = 6.78149998E-01*(_diff0361.x - _Y0361);
        _a0365 = _Y0361*_Y0361 + _Cb0361*_Cb0361 + _Cr0361*_Cr0361;
        _TMP106 = inversesqrt(_a0365);
        _TMP360 = 1.00000000E+00/_TMP106;
        _diff0369 = _TMP10.xyz - _TMP8.xyz;
        _Y0369 = dot(_diff0369, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0369 = 5.31519055E-01*(_diff0369.z - _Y0369);
        _Cr0369 = 6.78149998E-01*(_diff0369.x - _Y0369);
        _a0373 = _Y0369*_Y0369 + _Cb0369*_Cb0369 + _Cr0369*_Cr0369;
        _TMP106 = inversesqrt(_a0373);
        _TMP368 = 1.00000000E+00/_TMP106;
        _diff0377 = _TMP8.xyz - _TMP18.xyz;
        _Y0377 = dot(_diff0377, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0377 = 5.31519055E-01*(_diff0377.z - _Y0377);
        _Cr0377 = 6.78149998E-01*(_diff0377.x - _Y0377);
        _a0381 = _Y0377*_Y0377 + _Cb0377*_Cb0377 + _Cr0377*_Cr0377;
        _TMP106 = inversesqrt(_a0381);
        _TMP376 = 1.00000000E+00/_TMP106;
        _diff0385 = _TMP7.xyz - _TMP5.xyz;
        _Y0385 = dot(_diff0385, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0385 = 5.31519055E-01*(_diff0385.z - _Y0385);
        _Cr0385 = 6.78149998E-01*(_diff0385.x - _Y0385);
        _a0389 = _Y0385*_Y0385 + _Cb0385*_Cb0385 + _Cr0385*_Cr0385;
        _TMP106 = inversesqrt(_a0389);
        _TMP384 = 1.00000000E+00/_TMP106;
        _dist_00_081 = _TMP352 + _TMP360 + _TMP368 + _TMP376 + 4.00000000E+00*_TMP384;
        _diff0393 = _TMP3.xyz - _TMP7.xyz;
        _Y0393 = dot(_diff0393, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0393 = 5.31519055E-01*(_diff0393.z - _Y0393);
        _Cr0393 = 6.78149998E-01*(_diff0393.x - _Y0393);
        _a0397 = _Y0393*_Y0393 + _Cb0393*_Cb0393 + _Cr0393*_Cr0393;
        _TMP106 = inversesqrt(_a0397);
        _TMP392 = 1.00000000E+00/_TMP106;
        _diff0401 = _TMP7.xyz - _TMP11.xyz;
        _Y0401 = dot(_diff0401, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0401 = 5.31519055E-01*(_diff0401.z - _Y0401);
        _Cr0401 = 6.78149998E-01*(_diff0401.x - _Y0401);
        _a0405 = _Y0401*_Y0401 + _Cb0401*_Cb0401 + _Cr0401*_Cr0401;
        _TMP106 = inversesqrt(_a0405);
        _TMP400 = 1.00000000E+00/_TMP106;
        _diff0409 = _TMP1.xyz - _TMP5.xyz;
        _Y0409 = dot(_diff0409, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0409 = 5.31519055E-01*(_diff0409.z - _Y0409);
        _Cr0409 = 6.78149998E-01*(_diff0409.x - _Y0409);
        _a0413 = _Y0409*_Y0409 + _Cb0409*_Cb0409 + _Cr0409*_Cr0409;
        _TMP106 = inversesqrt(_a0413);
        _TMP408 = 1.00000000E+00/_TMP106;
        _diff0417 = _TMP5.xyz - _TMP19.xyz;
        _Y0417 = dot(_diff0417, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0417 = 5.31519055E-01*(_diff0417.z - _Y0417);
        _Cr0417 = 6.78149998E-01*(_diff0417.x - _Y0417);
        _a0421 = _Y0417*_Y0417 + _Cb0417*_Cb0417 + _Cr0417*_Cr0417;
        _TMP106 = inversesqrt(_a0421);
        _TMP416 = 1.00000000E+00/_TMP106;
        _diff0425 = _TMP4.xyz - _TMP8.xyz;
        _Y0425 = dot(_diff0425, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0425 = 5.31519055E-01*(_diff0425.z - _Y0425);
        _Cr0425 = 6.78149998E-01*(_diff0425.x - _Y0425);
        _a0429 = _Y0425*_Y0425 + _Cb0425*_Cb0425 + _Cr0425*_Cr0425;
        _TMP106 = inversesqrt(_a0429);
        _TMP424 = 1.00000000E+00/_TMP106;
        _dist_07_011 = _TMP392 + _TMP400 + _TMP408 + _TMP416 + 4.00000000E+00*_TMP424;
        _dominantGradient3 = 3.59999990E+00*_dist_07_011 < _dist_00_081;
        if (_dist_00_081 > _dist_07_011 && _TMP156 != _TMP184 && _TMP156 != _TMP160) { 
            if (_dominantGradient3) { 
                _TMP56 = 2;
            } else {
                _TMP56 = 1;
            } 
            _TMP55 = _TMP56;
        } else {
            _TMP55 = 0;
        } 
        _blendResult.y = _TMP55;
    } 
    if (!(_TMP180 == _TMP184 && _TMP176 == _TMP156 || _TMP180 == _TMP176 && _TMP184 == _TMP156)) { 
        _diff0433 = _TMP16.xyz - _TMP3.xyz;
        _Y0433 = dot(_diff0433, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0433 = 5.31519055E-01*(_diff0433.z - _Y0433);
        _Cr0433 = 6.78149998E-01*(_diff0433.x - _Y0433);
        _a0437 = _Y0433*_Y0433 + _Cb0433*_Cb0433 + _Cr0433*_Cr0433;
        _TMP106 = inversesqrt(_a0437);
        _TMP432 = 1.00000000E+00/_TMP106;
        _diff0441 = _TMP3.xyz - _TMP1.xyz;
        _Y0441 = dot(_diff0441, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0441 = 5.31519055E-01*(_diff0441.z - _Y0441);
        _Cr0441 = 6.78149998E-01*(_diff0441.x - _Y0441);
        _a0445 = _Y0441*_Y0441 + _Cb0441*_Cb0441 + _Cr0441*_Cr0441;
        _TMP106 = inversesqrt(_a0445);
        _TMP440 = 1.00000000E+00/_TMP106;
        _diff0449 = _TMP9.xyz - _TMP7.xyz;
        _Y0449 = dot(_diff0449, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0449 = 5.31519055E-01*(_diff0449.z - _Y0449);
        _Cr0449 = 6.78149998E-01*(_diff0449.x - _Y0449);
        _a0453 = _Y0449*_Y0449 + _Cb0449*_Cb0449 + _Cr0449*_Cr0449;
        _TMP106 = inversesqrt(_a0453);
        _TMP448 = 1.00000000E+00/_TMP106;
        _diff0457 = _TMP7.xyz - _TMP5.xyz;
        _Y0457 = dot(_diff0457, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0457 = 5.31519055E-01*(_diff0457.z - _Y0457);
        _Cr0457 = 6.78149998E-01*(_diff0457.x - _Y0457);
        _a0461 = _Y0457*_Y0457 + _Cb0457*_Cb0457 + _Cr0457*_Cr0457;
        _TMP106 = inversesqrt(_a0461);
        _TMP456 = 1.00000000E+00/_TMP106;
        _diff0465 = _TMP6.xyz - _TMP4.xyz;
        _Y0465 = dot(_diff0465, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0465 = 5.31519055E-01*(_diff0465.z - _Y0465);
        _Cr0465 = 6.78149998E-01*(_diff0465.x - _Y0465);
        _a0469 = _Y0465*_Y0465 + _Cb0465*_Cb0465 + _Cr0465*_Cr0465;
        _TMP106 = inversesqrt(_a0469);
        _TMP464 = 1.00000000E+00/_TMP106;
        _dist_05_071 = _TMP432 + _TMP440 + _TMP448 + _TMP456 + 4.00000000E+00*_TMP464;
        _diff0473 = _TMP15.xyz - _TMP6.xyz;
        _Y0473 = dot(_diff0473, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0473 = 5.31519055E-01*(_diff0473.z - _Y0473);
        _Cr0473 = 6.78149998E-01*(_diff0473.x - _Y0473);
        _a0477 = _Y0473*_Y0473 + _Cb0473*_Cb0473 + _Cr0473*_Cr0473;
        _TMP106 = inversesqrt(_a0477);
        _TMP472 = 1.00000000E+00/_TMP106;
        _diff0481 = _TMP6.xyz - _TMP10.xyz;
        _Y0481 = dot(_diff0481, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0481 = 5.31519055E-01*(_diff0481.z - _Y0481);
        _Cr0481 = 6.78149998E-01*(_diff0481.x - _Y0481);
        _a0485 = _Y0481*_Y0481 + _Cb0481*_Cb0481 + _Cr0481*_Cr0481;
        _TMP106 = inversesqrt(_a0485);
        _TMP480 = 1.00000000E+00/_TMP106;
        _diff0489 = _TMP0.xyz - _TMP4.xyz;
        _Y0489 = dot(_diff0489, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0489 = 5.31519055E-01*(_diff0489.z - _Y0489);
        _Cr0489 = 6.78149998E-01*(_diff0489.x - _Y0489);
        _a0493 = _Y0489*_Y0489 + _Cb0489*_Cb0489 + _Cr0489*_Cr0489;
        _TMP106 = inversesqrt(_a0493);
        _TMP488 = 1.00000000E+00/_TMP106;
        _diff0497 = _TMP4.xyz - _TMP8.xyz;
        _Y0497 = dot(_diff0497, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0497 = 5.31519055E-01*(_diff0497.z - _Y0497);
        _Cr0497 = 6.78149998E-01*(_diff0497.x - _Y0497);
        _a0501 = _Y0497*_Y0497 + _Cb0497*_Cb0497 + _Cr0497*_Cr0497;
        _TMP106 = inversesqrt(_a0501);
        _TMP496 = 1.00000000E+00/_TMP106;
        _diff0505 = _TMP3.xyz - _TMP7.xyz;
        _Y0505 = dot(_diff0505, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0505 = 5.31519055E-01*(_diff0505.z - _Y0505);
        _Cr0505 = 6.78149998E-01*(_diff0505.x - _Y0505);
        _a0509 = _Y0505*_Y0505 + _Cb0505*_Cb0505 + _Cr0505*_Cr0505;
        _TMP106 = inversesqrt(_a0509);
        _TMP504 = 1.00000000E+00/_TMP106;
        _dist_06_001 = _TMP472 + _TMP480 + _TMP488 + _TMP496 + 4.00000000E+00*_TMP504;
        _dominantGradient4 = 3.59999990E+00*_dist_05_071 < _dist_06_001;
        if (_dist_05_071 < _dist_06_001 && _TMP156 != _TMP176 && _TMP156 != _TMP184) { 
            if (_dominantGradient4) { 
                _TMP68 = 2;
            } else {
                _TMP68 = 1;
            } 
            _TMP67 = _TMP68;
        } else {
            _TMP67 = 0;
        } 
        _blendResult.x = _TMP67;
    } 
    _dst1[0] = _TMP7.xyz;
    _dst1[1] = _TMP7.xyz;
    _dst1[2] = _TMP7.xyz;
    _dst1[3] = _TMP7.xyz;
    _dst1[4] = _TMP7.xyz;
    _dst1[5] = _TMP7.xyz;
    _dst1[6] = _TMP7.xyz;
    _dst1[7] = _TMP7.xyz;
    _dst1[8] = _TMP7.xyz;
    _TMP84 = bvec4(_blendResult.x != 0, _blendResult.y != 0, _blendResult.z != 0, _blendResult.w != 0);
    _TMP1084 = _TMP84.x || _TMP84.y || _TMP84.z || _TMP84.w;
    if (_TMP1084) { 
        _TMP513 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP517 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP521 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP525 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP529 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0534 = _TMP8.xyz - _TMP9.xyz;
        _Y0534 = dot(_diff0534, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0534 = 5.31519055E-01*(_diff0534.z - _Y0534);
        _Cr0534 = 6.78149998E-01*(_diff0534.x - _Y0534);
        _a0538 = _Y0534*_Y0534 + _Cb0534*_Cb0534 + _Cr0534*_Cr0534;
        _TMP106 = inversesqrt(_a0538);
        _TMP533 = 1.00000000E+00/_TMP106;
        _diff0542 = _TMP10.xyz - _TMP5.xyz;
        _Y0542 = dot(_diff0542, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0542 = 5.31519055E-01*(_diff0542.z - _Y0542);
        _Cr0542 = 6.78149998E-01*(_diff0542.x - _Y0542);
        _a0546 = _Y0542*_Y0542 + _Cb0542*_Cb0542 + _Cr0542*_Cr0542;
        _TMP106 = inversesqrt(_a0546);
        _TMP541 = 1.00000000E+00/_TMP106;
        _haveShallowLine0512 = 2.20000005E+00*_TMP533 <= _TMP541 && _TMP513 != _TMP517 && _TMP521 != _TMP517;
        _haveSteepLine0512 = 2.20000005E+00*_TMP541 <= _TMP533 && _TMP513 != _TMP529 && _TMP525 != _TMP529;
        _needBlend0512 = _blendResult.z != 0;
        _diff0552 = _TMP7.xyz - _TMP9.xyz;
        _Y0552 = dot(_diff0552, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0552 = 5.31519055E-01*(_diff0552.z - _Y0552);
        _Cr0552 = 6.78149998E-01*(_diff0552.x - _Y0552);
        _a0556 = _Y0552*_Y0552 + _Cb0552*_Cb0552 + _Cr0552*_Cr0552;
        _TMP106 = inversesqrt(_a0556);
        _TMP551 = 1.00000000E+00/_TMP106;
        _TMP85 = _TMP551 < 1.17647059E-01;
        _diff0562 = _TMP7.xyz - _TMP5.xyz;
        _Y0562 = dot(_diff0562, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0562 = 5.31519055E-01*(_diff0562.z - _Y0562);
        _Cr0562 = 6.78149998E-01*(_diff0562.x - _Y0562);
        _a0566 = _Y0562*_Y0562 + _Cb0562*_Cb0562 + _Cr0562*_Cr0562;
        _TMP106 = inversesqrt(_a0566);
        _TMP561 = 1.00000000E+00/_TMP106;
        _TMP86 = _TMP561 < 1.17647059E-01;
        _diff0572 = _TMP9.xyz - _TMP10.xyz;
        _Y0572 = dot(_diff0572, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0572 = 5.31519055E-01*(_diff0572.z - _Y0572);
        _Cr0572 = 6.78149998E-01*(_diff0572.x - _Y0572);
        _a0576 = _Y0572*_Y0572 + _Cb0572*_Cb0572 + _Cr0572*_Cr0572;
        _TMP106 = inversesqrt(_a0576);
        _TMP571 = 1.00000000E+00/_TMP106;
        _TMP87 = _TMP571 < 1.17647059E-01;
        _diff0582 = _TMP10.xyz - _TMP11.xyz;
        _Y0582 = dot(_diff0582, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0582 = 5.31519055E-01*(_diff0582.z - _Y0582);
        _Cr0582 = 6.78149998E-01*(_diff0582.x - _Y0582);
        _a0586 = _Y0582*_Y0582 + _Cb0582*_Cb0582 + _Cr0582*_Cr0582;
        _TMP106 = inversesqrt(_a0586);
        _TMP581 = 1.00000000E+00/_TMP106;
        _TMP88 = _TMP581 < 1.17647059E-01;
        _diff0592 = _TMP11.xyz - _TMP8.xyz;
        _Y0592 = dot(_diff0592, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0592 = 5.31519055E-01*(_diff0592.z - _Y0592);
        _Cr0592 = 6.78149998E-01*(_diff0592.x - _Y0592);
        _a0596 = _Y0592*_Y0592 + _Cb0592*_Cb0592 + _Cr0592*_Cr0592;
        _TMP106 = inversesqrt(_a0596);
        _TMP591 = 1.00000000E+00/_TMP106;
        _TMP89 = _TMP591 < 1.17647059E-01;
        _diff0602 = _TMP8.xyz - _TMP5.xyz;
        _Y0602 = dot(_diff0602, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0602 = 5.31519055E-01*(_diff0602.z - _Y0602);
        _Cr0602 = 6.78149998E-01*(_diff0602.x - _Y0602);
        _a0606 = _Y0602*_Y0602 + _Cb0602*_Cb0602 + _Cr0602*_Cr0602;
        _TMP106 = inversesqrt(_a0606);
        _TMP601 = 1.00000000E+00/_TMP106;
        _TMP90 = _TMP601 < 1.17647059E-01;
        _diff0612 = _TMP7.xyz - _TMP11.xyz;
        _Y0612 = dot(_diff0612, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0612 = 5.31519055E-01*(_diff0612.z - _Y0612);
        _Cr0612 = 6.78149998E-01*(_diff0612.x - _Y0612);
        _a0616 = _Y0612*_Y0612 + _Cb0612*_Cb0612 + _Cr0612*_Cr0612;
        _TMP106 = inversesqrt(_a0616);
        _TMP611 = 1.00000000E+00/_TMP106;
        _TMP91 = _TMP611 < 1.17647059E-01;
        _doLineBlend0512 = _blendResult.z >= 2 || !(_blendResult.y != 0 && !_TMP85 || _blendResult.w != 0 && !_TMP86 || _TMP87 && _TMP88 && _TMP89 && _TMP90 && !_TMP91);
        _diff0620 = _TMP7.xyz - _TMP8.xyz;
        _Y0620 = dot(_diff0620, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0620 = 5.31519055E-01*(_diff0620.z - _Y0620);
        _Cr0620 = 6.78149998E-01*(_diff0620.x - _Y0620);
        _a0624 = _Y0620*_Y0620 + _Cb0620*_Cb0620 + _Cr0620*_Cr0620;
        _TMP106 = inversesqrt(_a0624);
        _TMP619 = 1.00000000E+00/_TMP106;
        _diff0628 = _TMP7.xyz - _TMP10.xyz;
        _Y0628 = dot(_diff0628, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0628 = 5.31519055E-01*(_diff0628.z - _Y0628);
        _Cr0628 = 6.78149998E-01*(_diff0628.x - _Y0628);
        _a0632 = _Y0628*_Y0628 + _Cb0628*_Cb0628 + _Cr0628*_Cr0628;
        _TMP106 = inversesqrt(_a0632);
        _TMP627 = 1.00000000E+00/_TMP106;
        if (_TMP619 <= _TMP627) { 
            _TMP92 = _TMP8.xyz;
        } else {
            _TMP92 = _TMP10.xyz;
        } 
        if (_needBlend0512 && _doLineBlend0512) { 
            if (_haveSteepLine0512) { 
                _TMP96 = 7.50000000E-01;
            } else {
                if (_haveShallowLine0512) { 
                    _TMP97 = 2.50000000E-01;
                } else {
                    _TMP97 = 1.25000000E-01;
                } 
                _TMP96 = _TMP97;
            } 
            _TMP95 = _TMP96;
        } else {
            _TMP95 = 0.00000000E+00;
        } 
        _a0636 = float(_TMP95);
        _TMP635 = _TMP7.xyz + _a0636*(_TMP92 - _TMP7.xyz);
        if (_needBlend0512) { 
            if (_doLineBlend0512) { 
                if (!_haveShallowLine0512 && !_haveSteepLine0512) { 
                    _TMP100 = 8.75000000E-01;
                } else {
                    _TMP100 = 1.00000000E+00;
                } 
                _TMP99 = _TMP100;
            } else {
                _TMP99 = 4.54593956E-01;
            } 
            _TMP98 = _TMP99;
        } else {
            _TMP98 = 0.00000000E+00;
        } 
        _a0640 = float(_TMP98);
        _TMP639 = _TMP7.xyz + _a0640*(_TMP92 - _TMP7.xyz);
        if (_needBlend0512 && _doLineBlend0512) { 
            if (_haveShallowLine0512) { 
                _TMP102 = 7.50000000E-01;
            } else {
                if (_haveSteepLine0512) { 
                    _TMP103 = 2.50000000E-01;
                } else {
                    _TMP103 = 1.25000000E-01;
                } 
                _TMP102 = _TMP103;
            } 
            _TMP101 = _TMP102;
        } else {
            _TMP101 = 0.00000000E+00;
        } 
        _a0644 = float(_TMP101);
        _TMP643 = _TMP7.xyz + _a0644*(_TMP92 - _TMP7.xyz);
        if (_needBlend0512 && _doLineBlend0512 && _haveShallowLine0512) { 
            _TMP104 = 2.50000000E-01;
        } else {
            _TMP104 = 0.00000000E+00;
        } 
        _a0648 = float(_TMP104);
        _TMP647 = _TMP7.xyz + _a0648*(_TMP92 - _TMP7.xyz);
        if (_needBlend0512 && _doLineBlend0512 && _haveSteepLine0512) { 
            _TMP105 = 2.50000000E-01;
        } else {
            _TMP105 = 0.00000000E+00;
        } 
        _a0652 = float(_TMP105);
        _TMP651 = _TMP7.xyz + _a0652*(_TMP92 - _TMP7.xyz);
        _TMP656 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP660 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP664 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP668 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP672 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0677 = _TMP4.xyz - _TMP11.xyz;
        _Y0677 = dot(_diff0677, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0677 = 5.31519055E-01*(_diff0677.z - _Y0677);
        _Cr0677 = 6.78149998E-01*(_diff0677.x - _Y0677);
        _a0681 = _Y0677*_Y0677 + _Cb0677*_Cb0677 + _Cr0677*_Cr0677;
        _TMP106 = inversesqrt(_a0681);
        _TMP676 = 1.00000000E+00/_TMP106;
        _diff0685 = _TMP8.xyz - _TMP3.xyz;
        _Y0685 = dot(_diff0685, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0685 = 5.31519055E-01*(_diff0685.z - _Y0685);
        _Cr0685 = 6.78149998E-01*(_diff0685.x - _Y0685);
        _a0689 = _Y0685*_Y0685 + _Cb0685*_Cb0685 + _Cr0685*_Cr0685;
        _TMP106 = inversesqrt(_a0689);
        _TMP684 = 1.00000000E+00/_TMP106;
        _haveShallowLine0655 = 2.20000005E+00*_TMP676 <= _TMP684 && _TMP656 != _TMP660 && _TMP664 != _TMP660;
        _haveSteepLine0655 = 2.20000005E+00*_TMP684 <= _TMP676 && _TMP656 != _TMP672 && _TMP668 != _TMP672;
        _needBlend0655 = _blendResult.y != 0;
        _diff0695 = _TMP7.xyz - _TMP11.xyz;
        _Y0695 = dot(_diff0695, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0695 = 5.31519055E-01*(_diff0695.z - _Y0695);
        _Cr0695 = 6.78149998E-01*(_diff0695.x - _Y0695);
        _a0699 = _Y0695*_Y0695 + _Cb0695*_Cb0695 + _Cr0695*_Cr0695;
        _TMP106 = inversesqrt(_a0699);
        _TMP694 = 1.00000000E+00/_TMP106;
        _TMP85 = _TMP694 < 1.17647059E-01;
        _diff0705 = _TMP7.xyz - _TMP3.xyz;
        _Y0705 = dot(_diff0705, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0705 = 5.31519055E-01*(_diff0705.z - _Y0705);
        _Cr0705 = 6.78149998E-01*(_diff0705.x - _Y0705);
        _a0709 = _Y0705*_Y0705 + _Cb0705*_Cb0705 + _Cr0705*_Cr0705;
        _TMP106 = inversesqrt(_a0709);
        _TMP704 = 1.00000000E+00/_TMP106;
        _TMP86 = _TMP704 < 1.17647059E-01;
        _diff0715 = _TMP11.xyz - _TMP8.xyz;
        _Y0715 = dot(_diff0715, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0715 = 5.31519055E-01*(_diff0715.z - _Y0715);
        _Cr0715 = 6.78149998E-01*(_diff0715.x - _Y0715);
        _a0719 = _Y0715*_Y0715 + _Cb0715*_Cb0715 + _Cr0715*_Cr0715;
        _TMP106 = inversesqrt(_a0719);
        _TMP714 = 1.00000000E+00/_TMP106;
        _TMP87 = _TMP714 < 1.17647059E-01;
        _diff0725 = _TMP8.xyz - _TMP5.xyz;
        _Y0725 = dot(_diff0725, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0725 = 5.31519055E-01*(_diff0725.z - _Y0725);
        _Cr0725 = 6.78149998E-01*(_diff0725.x - _Y0725);
        _a0729 = _Y0725*_Y0725 + _Cb0725*_Cb0725 + _Cr0725*_Cr0725;
        _TMP106 = inversesqrt(_a0729);
        _TMP724 = 1.00000000E+00/_TMP106;
        _TMP88 = _TMP724 < 1.17647059E-01;
        _diff0735 = _TMP5.xyz - _TMP4.xyz;
        _Y0735 = dot(_diff0735, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0735 = 5.31519055E-01*(_diff0735.z - _Y0735);
        _Cr0735 = 6.78149998E-01*(_diff0735.x - _Y0735);
        _a0739 = _Y0735*_Y0735 + _Cb0735*_Cb0735 + _Cr0735*_Cr0735;
        _TMP106 = inversesqrt(_a0739);
        _TMP734 = 1.00000000E+00/_TMP106;
        _TMP89 = _TMP734 < 1.17647059E-01;
        _diff0745 = _TMP4.xyz - _TMP3.xyz;
        _Y0745 = dot(_diff0745, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0745 = 5.31519055E-01*(_diff0745.z - _Y0745);
        _Cr0745 = 6.78149998E-01*(_diff0745.x - _Y0745);
        _a0749 = _Y0745*_Y0745 + _Cb0745*_Cb0745 + _Cr0745*_Cr0745;
        _TMP106 = inversesqrt(_a0749);
        _TMP744 = 1.00000000E+00/_TMP106;
        _TMP90 = _TMP744 < 1.17647059E-01;
        _diff0755 = _TMP7.xyz - _TMP5.xyz;
        _Y0755 = dot(_diff0755, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0755 = 5.31519055E-01*(_diff0755.z - _Y0755);
        _Cr0755 = 6.78149998E-01*(_diff0755.x - _Y0755);
        _a0759 = _Y0755*_Y0755 + _Cb0755*_Cb0755 + _Cr0755*_Cr0755;
        _TMP106 = inversesqrt(_a0759);
        _TMP754 = 1.00000000E+00/_TMP106;
        _TMP91 = _TMP754 < 1.17647059E-01;
        _doLineBlend0655 = _blendResult.y >= 2 || !(_blendResult.x != 0 && !_TMP85 || _blendResult.z != 0 && !_TMP86 || _TMP87 && _TMP88 && _TMP89 && _TMP90 && !_TMP91);
        _diff0763 = _TMP7.xyz - _TMP4.xyz;
        _Y0763 = dot(_diff0763, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0763 = 5.31519055E-01*(_diff0763.z - _Y0763);
        _Cr0763 = 6.78149998E-01*(_diff0763.x - _Y0763);
        _a0767 = _Y0763*_Y0763 + _Cb0763*_Cb0763 + _Cr0763*_Cr0763;
        _TMP106 = inversesqrt(_a0767);
        _TMP762 = 1.00000000E+00/_TMP106;
        _diff0771 = _TMP7.xyz - _TMP8.xyz;
        _Y0771 = dot(_diff0771, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0771 = 5.31519055E-01*(_diff0771.z - _Y0771);
        _Cr0771 = 6.78149998E-01*(_diff0771.x - _Y0771);
        _a0775 = _Y0771*_Y0771 + _Cb0771*_Cb0771 + _Cr0771*_Cr0771;
        _TMP106 = inversesqrt(_a0775);
        _TMP770 = 1.00000000E+00/_TMP106;
        if (_TMP762 <= _TMP770) { 
            _TMP92 = _TMP4.xyz;
        } else {
            _TMP92 = _TMP8.xyz;
        } 
        if (_needBlend0655 && _doLineBlend0655) { 
            if (_haveSteepLine0655) { 
                _TMP96 = 7.50000000E-01;
            } else {
                if (_haveShallowLine0655) { 
                    _TMP97 = 2.50000000E-01;
                } else {
                    _TMP97 = 1.25000000E-01;
                } 
                _TMP96 = _TMP97;
            } 
            _TMP95 = _TMP96;
        } else {
            _TMP95 = 0.00000000E+00;
        } 
        _a0779 = float(_TMP95);
        _TMP778 = _TMP7.xyz + _a0779*(_TMP92 - _TMP7.xyz);
        if (_needBlend0655) { 
            if (_doLineBlend0655) { 
                if (!_haveShallowLine0655 && !_haveSteepLine0655) { 
                    _TMP100 = 8.75000000E-01;
                } else {
                    _TMP100 = 1.00000000E+00;
                } 
                _TMP99 = _TMP100;
            } else {
                _TMP99 = 4.54593956E-01;
            } 
            _TMP98 = _TMP99;
        } else {
            _TMP98 = 0.00000000E+00;
        } 
        _a0783 = float(_TMP98);
        _TMP782 = _TMP651 + _a0783*(_TMP92 - _TMP651);
        if (_needBlend0655 && _doLineBlend0655) { 
            if (_haveShallowLine0655) { 
                _TMP102 = 7.50000000E-01;
            } else {
                if (_haveSteepLine0655) { 
                    _TMP103 = 2.50000000E-01;
                } else {
                    _TMP103 = 1.25000000E-01;
                } 
                _TMP102 = _TMP103;
            } 
            _TMP101 = _TMP102;
        } else {
            _TMP101 = 0.00000000E+00;
        } 
        _a0787 = float(_TMP101);
        _TMP786 = _TMP635 + _a0787*(_TMP92 - _TMP635);
        if (_needBlend0655 && _doLineBlend0655 && _haveShallowLine0655) { 
            _TMP104 = 2.50000000E-01;
        } else {
            _TMP104 = 0.00000000E+00;
        } 
        _a0791 = float(_TMP104);
        _TMP790 = _TMP639 + _a0791*(_TMP92 - _TMP639);
        if (_needBlend0655 && _doLineBlend0655 && _haveSteepLine0655) { 
            _TMP105 = 2.50000000E-01;
        } else {
            _TMP105 = 0.00000000E+00;
        } 
        _a0795 = float(_TMP105);
        _TMP794 = _TMP7.xyz + _a0795*(_TMP92 - _TMP7.xyz);
        _TMP799 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP803 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP807 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP811 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP815 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0820 = _TMP6.xyz - _TMP5.xyz;
        _Y0820 = dot(_diff0820, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0820 = 5.31519055E-01*(_diff0820.z - _Y0820);
        _Cr0820 = 6.78149998E-01*(_diff0820.x - _Y0820);
        _a0824 = _Y0820*_Y0820 + _Cb0820*_Cb0820 + _Cr0820*_Cr0820;
        _TMP106 = inversesqrt(_a0824);
        _TMP819 = 1.00000000E+00/_TMP106;
        _diff0828 = _TMP4.xyz - _TMP9.xyz;
        _Y0828 = dot(_diff0828, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0828 = 5.31519055E-01*(_diff0828.z - _Y0828);
        _Cr0828 = 6.78149998E-01*(_diff0828.x - _Y0828);
        _a0832 = _Y0828*_Y0828 + _Cb0828*_Cb0828 + _Cr0828*_Cr0828;
        _TMP106 = inversesqrt(_a0832);
        _TMP827 = 1.00000000E+00/_TMP106;
        _haveShallowLine0798 = 2.20000005E+00*_TMP819 <= _TMP827 && _TMP799 != _TMP803 && _TMP807 != _TMP803;
        _haveSteepLine0798 = 2.20000005E+00*_TMP827 <= _TMP819 && _TMP799 != _TMP815 && _TMP811 != _TMP815;
        _needBlend0798 = _blendResult.x != 0;
        _diff0838 = _TMP7.xyz - _TMP5.xyz;
        _Y0838 = dot(_diff0838, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0838 = 5.31519055E-01*(_diff0838.z - _Y0838);
        _Cr0838 = 6.78149998E-01*(_diff0838.x - _Y0838);
        _a0842 = _Y0838*_Y0838 + _Cb0838*_Cb0838 + _Cr0838*_Cr0838;
        _TMP106 = inversesqrt(_a0842);
        _TMP837 = 1.00000000E+00/_TMP106;
        _TMP85 = _TMP837 < 1.17647059E-01;
        _diff0848 = _TMP7.xyz - _TMP9.xyz;
        _Y0848 = dot(_diff0848, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0848 = 5.31519055E-01*(_diff0848.z - _Y0848);
        _Cr0848 = 6.78149998E-01*(_diff0848.x - _Y0848);
        _a0852 = _Y0848*_Y0848 + _Cb0848*_Cb0848 + _Cr0848*_Cr0848;
        _TMP106 = inversesqrt(_a0852);
        _TMP847 = 1.00000000E+00/_TMP106;
        _TMP86 = _TMP847 < 1.17647059E-01;
        _diff0858 = _TMP5.xyz - _TMP4.xyz;
        _Y0858 = dot(_diff0858, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0858 = 5.31519055E-01*(_diff0858.z - _Y0858);
        _Cr0858 = 6.78149998E-01*(_diff0858.x - _Y0858);
        _a0862 = _Y0858*_Y0858 + _Cb0858*_Cb0858 + _Cr0858*_Cr0858;
        _TMP106 = inversesqrt(_a0862);
        _TMP857 = 1.00000000E+00/_TMP106;
        _TMP87 = _TMP857 < 1.17647059E-01;
        _diff0868 = _TMP4.xyz - _TMP3.xyz;
        _Y0868 = dot(_diff0868, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0868 = 5.31519055E-01*(_diff0868.z - _Y0868);
        _Cr0868 = 6.78149998E-01*(_diff0868.x - _Y0868);
        _a0872 = _Y0868*_Y0868 + _Cb0868*_Cb0868 + _Cr0868*_Cr0868;
        _TMP106 = inversesqrt(_a0872);
        _TMP867 = 1.00000000E+00/_TMP106;
        _TMP88 = _TMP867 < 1.17647059E-01;
        _diff0878 = _TMP3.xyz - _TMP6.xyz;
        _Y0878 = dot(_diff0878, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0878 = 5.31519055E-01*(_diff0878.z - _Y0878);
        _Cr0878 = 6.78149998E-01*(_diff0878.x - _Y0878);
        _a0882 = _Y0878*_Y0878 + _Cb0878*_Cb0878 + _Cr0878*_Cr0878;
        _TMP106 = inversesqrt(_a0882);
        _TMP877 = 1.00000000E+00/_TMP106;
        _TMP89 = _TMP877 < 1.17647059E-01;
        _diff0888 = _TMP6.xyz - _TMP9.xyz;
        _Y0888 = dot(_diff0888, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0888 = 5.31519055E-01*(_diff0888.z - _Y0888);
        _Cr0888 = 6.78149998E-01*(_diff0888.x - _Y0888);
        _a0892 = _Y0888*_Y0888 + _Cb0888*_Cb0888 + _Cr0888*_Cr0888;
        _TMP106 = inversesqrt(_a0892);
        _TMP887 = 1.00000000E+00/_TMP106;
        _TMP90 = _TMP887 < 1.17647059E-01;
        _diff0898 = _TMP7.xyz - _TMP3.xyz;
        _Y0898 = dot(_diff0898, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0898 = 5.31519055E-01*(_diff0898.z - _Y0898);
        _Cr0898 = 6.78149998E-01*(_diff0898.x - _Y0898);
        _a0902 = _Y0898*_Y0898 + _Cb0898*_Cb0898 + _Cr0898*_Cr0898;
        _TMP106 = inversesqrt(_a0902);
        _TMP897 = 1.00000000E+00/_TMP106;
        _TMP91 = _TMP897 < 1.17647059E-01;
        _doLineBlend0798 = _blendResult.x >= 2 || !(_blendResult.w != 0 && !_TMP85 || _blendResult.y != 0 && !_TMP86 || _TMP87 && _TMP88 && _TMP89 && _TMP90 && !_TMP91);
        _diff0906 = _TMP7.xyz - _TMP6.xyz;
        _Y0906 = dot(_diff0906, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0906 = 5.31519055E-01*(_diff0906.z - _Y0906);
        _Cr0906 = 6.78149998E-01*(_diff0906.x - _Y0906);
        _a0910 = _Y0906*_Y0906 + _Cb0906*_Cb0906 + _Cr0906*_Cr0906;
        _TMP106 = inversesqrt(_a0910);
        _TMP905 = 1.00000000E+00/_TMP106;
        _diff0914 = _TMP7.xyz - _TMP4.xyz;
        _Y0914 = dot(_diff0914, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0914 = 5.31519055E-01*(_diff0914.z - _Y0914);
        _Cr0914 = 6.78149998E-01*(_diff0914.x - _Y0914);
        _a0918 = _Y0914*_Y0914 + _Cb0914*_Cb0914 + _Cr0914*_Cr0914;
        _TMP106 = inversesqrt(_a0918);
        _TMP913 = 1.00000000E+00/_TMP106;
        if (_TMP905 <= _TMP913) { 
            _TMP92 = _TMP6.xyz;
        } else {
            _TMP92 = _TMP4.xyz;
        } 
        if (_needBlend0798 && _doLineBlend0798) { 
            if (_haveSteepLine0798) { 
                _TMP96 = 7.50000000E-01;
            } else {
                if (_haveShallowLine0798) { 
                    _TMP97 = 2.50000000E-01;
                } else {
                    _TMP97 = 1.25000000E-01;
                } 
                _TMP96 = _TMP97;
            } 
            _TMP95 = _TMP96;
        } else {
            _TMP95 = 0.00000000E+00;
        } 
        _a0922 = float(_TMP95);
        _TMP921 = _TMP7.xyz + _a0922*(_TMP92 - _TMP7.xyz);
        if (_needBlend0798) { 
            if (_doLineBlend0798) { 
                if (!_haveShallowLine0798 && !_haveSteepLine0798) { 
                    _TMP100 = 8.75000000E-01;
                } else {
                    _TMP100 = 1.00000000E+00;
                } 
                _TMP99 = _TMP100;
            } else {
                _TMP99 = 4.54593956E-01;
            } 
            _TMP98 = _TMP99;
        } else {
            _TMP98 = 0.00000000E+00;
        } 
        _a0926 = float(_TMP98);
        _TMP925 = _TMP794 + _a0926*(_TMP92 - _TMP794);
        if (_needBlend0798 && _doLineBlend0798) { 
            if (_haveShallowLine0798) { 
                _TMP102 = 7.50000000E-01;
            } else {
                if (_haveSteepLine0798) { 
                    _TMP103 = 2.50000000E-01;
                } else {
                    _TMP103 = 1.25000000E-01;
                } 
                _TMP102 = _TMP103;
            } 
            _TMP101 = _TMP102;
        } else {
            _TMP101 = 0.00000000E+00;
        } 
        _a0930 = float(_TMP101);
        _TMP929 = _TMP778 + _a0930*(_TMP92 - _TMP778);
        if (_needBlend0798 && _doLineBlend0798 && _haveShallowLine0798) { 
            _TMP104 = 2.50000000E-01;
        } else {
            _TMP104 = 0.00000000E+00;
        } 
        _a0934 = float(_TMP104);
        _TMP933 = _TMP782 + _a0934*(_TMP92 - _TMP782);
        if (_needBlend0798 && _doLineBlend0798 && _haveSteepLine0798) { 
            _TMP105 = 2.50000000E-01;
        } else {
            _TMP105 = 0.00000000E+00;
        } 
        _a0938 = float(_TMP105);
        _TMP937 = _TMP647 + _a0938*(_TMP92 - _TMP647);
        _TMP942 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP946 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP950 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP954 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP958 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0963 = _TMP10.xyz - _TMP3.xyz;
        _Y0963 = dot(_diff0963, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0963 = 5.31519055E-01*(_diff0963.z - _Y0963);
        _Cr0963 = 6.78149998E-01*(_diff0963.x - _Y0963);
        _a0967 = _Y0963*_Y0963 + _Cb0963*_Cb0963 + _Cr0963*_Cr0963;
        _TMP106 = inversesqrt(_a0967);
        _TMP962 = 1.00000000E+00/_TMP106;
        _diff0971 = _TMP6.xyz - _TMP11.xyz;
        _Y0971 = dot(_diff0971, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0971 = 5.31519055E-01*(_diff0971.z - _Y0971);
        _Cr0971 = 6.78149998E-01*(_diff0971.x - _Y0971);
        _a0975 = _Y0971*_Y0971 + _Cb0971*_Cb0971 + _Cr0971*_Cr0971;
        _TMP106 = inversesqrt(_a0975);
        _TMP970 = 1.00000000E+00/_TMP106;
        _haveShallowLine0941 = 2.20000005E+00*_TMP962 <= _TMP970 && _TMP942 != _TMP946 && _TMP950 != _TMP946;
        _haveSteepLine0941 = 2.20000005E+00*_TMP970 <= _TMP962 && _TMP942 != _TMP958 && _TMP954 != _TMP958;
        _needBlend0941 = _blendResult.w != 0;
        _diff0981 = _TMP7.xyz - _TMP3.xyz;
        _Y0981 = dot(_diff0981, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0981 = 5.31519055E-01*(_diff0981.z - _Y0981);
        _Cr0981 = 6.78149998E-01*(_diff0981.x - _Y0981);
        _a0985 = _Y0981*_Y0981 + _Cb0981*_Cb0981 + _Cr0981*_Cr0981;
        _TMP106 = inversesqrt(_a0985);
        _TMP980 = 1.00000000E+00/_TMP106;
        _TMP85 = _TMP980 < 1.17647059E-01;
        _diff0991 = _TMP7.xyz - _TMP11.xyz;
        _Y0991 = dot(_diff0991, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0991 = 5.31519055E-01*(_diff0991.z - _Y0991);
        _Cr0991 = 6.78149998E-01*(_diff0991.x - _Y0991);
        _a0995 = _Y0991*_Y0991 + _Cb0991*_Cb0991 + _Cr0991*_Cr0991;
        _TMP106 = inversesqrt(_a0995);
        _TMP990 = 1.00000000E+00/_TMP106;
        _TMP86 = _TMP990 < 1.17647059E-01;
        _diff1001 = _TMP3.xyz - _TMP6.xyz;
        _Y1001 = dot(_diff1001, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1001 = 5.31519055E-01*(_diff1001.z - _Y1001);
        _Cr1001 = 6.78149998E-01*(_diff1001.x - _Y1001);
        _a1005 = _Y1001*_Y1001 + _Cb1001*_Cb1001 + _Cr1001*_Cr1001;
        _TMP106 = inversesqrt(_a1005);
        _TMP1000 = 1.00000000E+00/_TMP106;
        _TMP87 = _TMP1000 < 1.17647059E-01;
        _diff1011 = _TMP6.xyz - _TMP9.xyz;
        _Y1011 = dot(_diff1011, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1011 = 5.31519055E-01*(_diff1011.z - _Y1011);
        _Cr1011 = 6.78149998E-01*(_diff1011.x - _Y1011);
        _a1015 = _Y1011*_Y1011 + _Cb1011*_Cb1011 + _Cr1011*_Cr1011;
        _TMP106 = inversesqrt(_a1015);
        _TMP1010 = 1.00000000E+00/_TMP106;
        _TMP88 = _TMP1010 < 1.17647059E-01;
        _diff1021 = _TMP9.xyz - _TMP10.xyz;
        _Y1021 = dot(_diff1021, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1021 = 5.31519055E-01*(_diff1021.z - _Y1021);
        _Cr1021 = 6.78149998E-01*(_diff1021.x - _Y1021);
        _a1025 = _Y1021*_Y1021 + _Cb1021*_Cb1021 + _Cr1021*_Cr1021;
        _TMP106 = inversesqrt(_a1025);
        _TMP1020 = 1.00000000E+00/_TMP106;
        _TMP89 = _TMP1020 < 1.17647059E-01;
        _diff1031 = _TMP10.xyz - _TMP11.xyz;
        _Y1031 = dot(_diff1031, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1031 = 5.31519055E-01*(_diff1031.z - _Y1031);
        _Cr1031 = 6.78149998E-01*(_diff1031.x - _Y1031);
        _a1035 = _Y1031*_Y1031 + _Cb1031*_Cb1031 + _Cr1031*_Cr1031;
        _TMP106 = inversesqrt(_a1035);
        _TMP1030 = 1.00000000E+00/_TMP106;
        _TMP90 = _TMP1030 < 1.17647059E-01;
        _diff1041 = _TMP7.xyz - _TMP9.xyz;
        _Y1041 = dot(_diff1041, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1041 = 5.31519055E-01*(_diff1041.z - _Y1041);
        _Cr1041 = 6.78149998E-01*(_diff1041.x - _Y1041);
        _a1045 = _Y1041*_Y1041 + _Cb1041*_Cb1041 + _Cr1041*_Cr1041;
        _TMP106 = inversesqrt(_a1045);
        _TMP1040 = 1.00000000E+00/_TMP106;
        _TMP91 = _TMP1040 < 1.17647059E-01;
        _doLineBlend0941 = _blendResult.w >= 2 || !(_blendResult.z != 0 && !_TMP85 || _blendResult.x != 0 && !_TMP86 || _TMP87 && _TMP88 && _TMP89 && _TMP90 && !_TMP91);
        _diff1049 = _TMP7.xyz - _TMP10.xyz;
        _Y1049 = dot(_diff1049, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1049 = 5.31519055E-01*(_diff1049.z - _Y1049);
        _Cr1049 = 6.78149998E-01*(_diff1049.x - _Y1049);
        _a1053 = _Y1049*_Y1049 + _Cb1049*_Cb1049 + _Cr1049*_Cr1049;
        _TMP106 = inversesqrt(_a1053);
        _TMP1048 = 1.00000000E+00/_TMP106;
        _diff1057 = _TMP7.xyz - _TMP6.xyz;
        _Y1057 = dot(_diff1057, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1057 = 5.31519055E-01*(_diff1057.z - _Y1057);
        _Cr1057 = 6.78149998E-01*(_diff1057.x - _Y1057);
        _a1061 = _Y1057*_Y1057 + _Cb1057*_Cb1057 + _Cr1057*_Cr1057;
        _TMP106 = inversesqrt(_a1061);
        _TMP1056 = 1.00000000E+00/_TMP106;
        if (_TMP1048 <= _TMP1056) { 
            _TMP92 = _TMP10.xyz;
        } else {
            _TMP92 = _TMP6.xyz;
        } 
        if (_needBlend0941 && _doLineBlend0941) { 
            if (_haveSteepLine0941) { 
                _TMP96 = 7.50000000E-01;
            } else {
                if (_haveShallowLine0941) { 
                    _TMP97 = 2.50000000E-01;
                } else {
                    _TMP97 = 1.25000000E-01;
                } 
                _TMP96 = _TMP97;
            } 
            _TMP95 = _TMP96;
        } else {
            _TMP95 = 0.00000000E+00;
        } 
        _a1065 = float(_TMP95);
        _TMP1064 = _TMP643 + _a1065*(_TMP92 - _TMP643);
        if (_needBlend0941) { 
            if (_doLineBlend0941) { 
                if (!_haveShallowLine0941 && !_haveSteepLine0941) { 
                    _TMP100 = 8.75000000E-01;
                } else {
                    _TMP100 = 1.00000000E+00;
                } 
                _TMP99 = _TMP100;
            } else {
                _TMP99 = 4.54593956E-01;
            } 
            _TMP98 = _TMP99;
        } else {
            _TMP98 = 0.00000000E+00;
        } 
        _a1069 = float(_TMP98);
        _TMP1068 = _TMP937 + _a1069*(_TMP92 - _TMP937);
        if (_needBlend0941 && _doLineBlend0941) { 
            if (_haveShallowLine0941) { 
                _TMP102 = 7.50000000E-01;
            } else {
                if (_haveSteepLine0941) { 
                    _TMP103 = 2.50000000E-01;
                } else {
                    _TMP103 = 1.25000000E-01;
                } 
                _TMP102 = _TMP103;
            } 
            _TMP101 = _TMP102;
        } else {
            _TMP101 = 0.00000000E+00;
        } 
        _a1073 = float(_TMP101);
        _TMP1072 = _TMP921 + _a1073*(_TMP92 - _TMP921);
        if (_needBlend0941 && _doLineBlend0941 && _haveShallowLine0941) { 
            _TMP104 = 2.50000000E-01;
        } else {
            _TMP104 = 0.00000000E+00;
        } 
        _a1077 = float(_TMP104);
        _TMP1076 = _TMP925 + _a1077*(_TMP92 - _TMP925);
        if (_needBlend0941 && _doLineBlend0941 && _haveSteepLine0941) { 
            _TMP105 = 2.50000000E-01;
        } else {
            _TMP105 = 0.00000000E+00;
        } 
        _a1081 = float(_TMP105);
        _TMP1080 = _TMP790 + _a1081*(_TMP92 - _TMP790);
        _dst1[0] = _TMP7.xyz;
        _dst1[8] = _TMP933;
        _dst1[7] = _TMP929;
        _dst1[6] = _TMP1076;
        _dst1[5] = _TMP1072;
        _dst1[4] = _TMP1068;
        _dst1[3] = _TMP1064;
        _dst1[2] = _TMP1080;
        _dst1[1] = _TMP786;
    } 
    _TMP69 = float((_f.x >= 6.66666687E-01));
    _TMP1092 = _dst1[7] + _TMP69*(_dst1[8] - _dst1[7]);
    _TMP71 = float((_f.x >= 3.33333343E-01));
    _TMP1098 = _dst1[6] + _TMP71*(_TMP1092 - _dst1[6]);
    _TMP73 = float((_f.x >= 6.66666687E-01));
    _TMP1104 = _dst1[0] + _TMP73*(_dst1[1] - _dst1[0]);
    _TMP75 = float((_f.x >= 3.33333343E-01));
    _TMP1110 = _dst1[5] + _TMP75*(_TMP1104 - _dst1[5]);
    _TMP77 = float((_f.x >= 6.66666687E-01));
    _TMP1116 = _dst1[3] + _TMP77*(_dst1[2] - _dst1[3]);
    _TMP79 = float((_f.x >= 3.33333343E-01));
    _TMP1122 = _dst1[4] + _TMP79*(_TMP1116 - _dst1[4]);
    _TMP81 = float((_f.y >= 6.66666687E-01));
    _TMP1128 = _TMP1110 + _TMP81*(_TMP1122 - _TMP1110);
    _TMP83 = float((_f.y >= 3.33333343E-01));
    _TMP1134 = _TMP1098 + _TMP83*(_TMP1128 - _TMP1098);
    _ret_0 = vec4(_TMP1134.x, _TMP1134.y, _TMP1134.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
