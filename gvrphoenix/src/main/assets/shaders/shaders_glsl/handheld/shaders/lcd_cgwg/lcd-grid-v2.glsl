// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texture_size;
float _placeholder26;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _otexCoord;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0007;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texture_size;
float _placeholder33;
};
struct output_dummy {
    vec4 _col;
};
vec3 _TMP16;
float _TMP19;
float _TMP18;
float _TMP17;
vec3 _TMP15;
vec4 _TMP14;
vec3 _TMP13;
vec4 _TMP12;
vec3 _TMP11;
vec4 _TMP10;
vec3 _TMP9;
vec4 _TMP8;
float _TMP22;
float _TMP7;
float _TMP6;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP2;
vec2 _TMP1;
input_dummy _IN1;
uniform sampler2D Texture;
vec2 _x0030;
float _x0032;
float _TMP33;
float _x0034;
float _TMP39;
float _x0040;
float _z20046;
float _zn0046;
float _ret0046;
float _z20048;
float _zn0048;
float _ret0048;
float _TMP51;
float _x0052;
float _TMP57;
float _x0058;
float _z20064;
float _zn0064;
float _ret0064;
float _z20066;
float _zn0066;
float _ret0066;
float _x0068;
float _TMP69;
float _x0070;
float _TMP75;
float _x0076;
float _z20082;
float _zn0082;
float _ret0082;
float _z20084;
float _zn0084;
float _ret0084;
float _x0086;
float _TMP87;
float _x0088;
float _TMP93;
float _x0094;
float _z20100;
float _zn0100;
float _ret0100;
float _z20102;
float _zn0102;
float _ret0102;
float _x0104;
float _TMP105;
float _x0106;
float _TMP111;
float _x0112;
float _z20118;
float _zn0118;
float _ret0118;
float _z20120;
float _zn0120;
float _ret0120;
float _x0122;
float _TMP123;
float _x0124;
float _TMP129;
float _x0130;
float _z20136;
float _zn0136;
float _ret0136;
float _z20138;
float _zn0138;
float _ret0138;
float _TMP141;
float _x0142;
float _TMP147;
float _x0148;
float _z20154;
float _zn0154;
float _ret0154;
float _z20156;
float _zn0156;
float _ret0156;
float _x0158;
float _TMP159;
float _x0160;
float _TMP165;
float _x0166;
float _z20172;
float _zn0172;
float _ret0172;
float _z20174;
float _zn0174;
float _ret0174;
vec2 _c0178;
vec2 _c0180;
vec2 _c0182;
vec3 _r0184;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _texelSize;
    vec2 _range;
    ivec2 _tli;
    vec3 _lcol;
    vec3 _rcol;
    float _subpix;
    float _rsubpix;
    float _tcol;
    float _bcol;
    vec3 _topLeftColor;
    vec3 _bottomRightColor;
    vec3 _bottomLeftColor;
    vec3 _topRightColor;
    vec3 _averageColor;
    output_dummy _OUT;
    _texelSize = 1.00000000E+00/TextureSize;
    _range = InputSize/(OutputSize*TextureSize);
    _x0030 = TEX0.xy/_texelSize - vec2( 4.99900013E-01, 4.99900013E-01);
    _TMP1 = floor(_x0030);
    _tli = ivec2(int(_TMP1.x), int(_TMP1.y));
    _subpix = ((TEX0.x/_texelSize.x - 4.99900013E-01) - float(_tli.x))*3.00000000E+00;
    _rsubpix = (_range.x/_texelSize.x)*3.00000000E+00;
    _x0032 = _subpix + 1.00000000E+00;
    _x0034 = (_x0032 - _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0034);
    _TMP33 = max(-1.00000000E+00, _TMP22);
    _x0040 = (_x0032 + _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0040);
    _TMP39 = max(-1.00000000E+00, _TMP22);
    _z20046 = _TMP39*_TMP39;
    _zn0046 = _TMP39*_z20046;
    _ret0046 = _TMP39 + _zn0046*-6.66666687E-01;
    _zn0046 = _zn0046*_z20046;
    _ret0046 = _ret0046 + _zn0046*-2.00000003E-01;
    _zn0046 = _zn0046*_z20046;
    _ret0046 = _ret0046 + _zn0046*5.71428597E-01;
    _zn0046 = _zn0046*_z20046;
    _ret0046 = _ret0046 + _zn0046*-1.11111112E-01;
    _zn0046 = _zn0046*_z20046;
    _ret0046 = _ret0046 + _zn0046*-1.81818187E-01;
    _zn0046 = _zn0046*_z20046;
    _ret0046 = _ret0046 + _zn0046*7.69230798E-02;
    _z20048 = _TMP33*_TMP33;
    _zn0048 = _TMP33*_z20048;
    _ret0048 = _TMP33 + _zn0048*-6.66666687E-01;
    _zn0048 = _zn0048*_z20048;
    _ret0048 = _ret0048 + _zn0048*-2.00000003E-01;
    _zn0048 = _zn0048*_z20048;
    _ret0048 = _ret0048 + _zn0048*5.71428597E-01;
    _zn0048 = _zn0048*_z20048;
    _ret0048 = _ret0048 + _zn0048*-1.11111112E-01;
    _zn0048 = _zn0048*_z20048;
    _ret0048 = _ret0048 + _zn0048*-1.81818187E-01;
    _zn0048 = _zn0048*_z20048;
    _ret0048 = _ret0048 + _zn0048*7.69230798E-02;
    _TMP2 = (1.50000000E+00*(_ret0046 - _ret0048))/_rsubpix;
    _x0052 = (_subpix - _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0052);
    _TMP51 = max(-1.00000000E+00, _TMP22);
    _x0058 = (_subpix + _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0058);
    _TMP57 = max(-1.00000000E+00, _TMP22);
    _z20064 = _TMP57*_TMP57;
    _zn0064 = _TMP57*_z20064;
    _ret0064 = _TMP57 + _zn0064*-6.66666687E-01;
    _zn0064 = _zn0064*_z20064;
    _ret0064 = _ret0064 + _zn0064*-2.00000003E-01;
    _zn0064 = _zn0064*_z20064;
    _ret0064 = _ret0064 + _zn0064*5.71428597E-01;
    _zn0064 = _zn0064*_z20064;
    _ret0064 = _ret0064 + _zn0064*-1.11111112E-01;
    _zn0064 = _zn0064*_z20064;
    _ret0064 = _ret0064 + _zn0064*-1.81818187E-01;
    _zn0064 = _zn0064*_z20064;
    _ret0064 = _ret0064 + _zn0064*7.69230798E-02;
    _z20066 = _TMP51*_TMP51;
    _zn0066 = _TMP51*_z20066;
    _ret0066 = _TMP51 + _zn0066*-6.66666687E-01;
    _zn0066 = _zn0066*_z20066;
    _ret0066 = _ret0066 + _zn0066*-2.00000003E-01;
    _zn0066 = _zn0066*_z20066;
    _ret0066 = _ret0066 + _zn0066*5.71428597E-01;
    _zn0066 = _zn0066*_z20066;
    _ret0066 = _ret0066 + _zn0066*-1.11111112E-01;
    _zn0066 = _zn0066*_z20066;
    _ret0066 = _ret0066 + _zn0066*-1.81818187E-01;
    _zn0066 = _zn0066*_z20066;
    _ret0066 = _ret0066 + _zn0066*7.69230798E-02;
    _TMP3 = (1.50000000E+00*(_ret0064 - _ret0066))/_rsubpix;
    _x0068 = _subpix - 1.00000000E+00;
    _x0070 = (_x0068 - _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0070);
    _TMP69 = max(-1.00000000E+00, _TMP22);
    _x0076 = (_x0068 + _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0076);
    _TMP75 = max(-1.00000000E+00, _TMP22);
    _z20082 = _TMP75*_TMP75;
    _zn0082 = _TMP75*_z20082;
    _ret0082 = _TMP75 + _zn0082*-6.66666687E-01;
    _zn0082 = _zn0082*_z20082;
    _ret0082 = _ret0082 + _zn0082*-2.00000003E-01;
    _zn0082 = _zn0082*_z20082;
    _ret0082 = _ret0082 + _zn0082*5.71428597E-01;
    _zn0082 = _zn0082*_z20082;
    _ret0082 = _ret0082 + _zn0082*-1.11111112E-01;
    _zn0082 = _zn0082*_z20082;
    _ret0082 = _ret0082 + _zn0082*-1.81818187E-01;
    _zn0082 = _zn0082*_z20082;
    _ret0082 = _ret0082 + _zn0082*7.69230798E-02;
    _z20084 = _TMP69*_TMP69;
    _zn0084 = _TMP69*_z20084;
    _ret0084 = _TMP69 + _zn0084*-6.66666687E-01;
    _zn0084 = _zn0084*_z20084;
    _ret0084 = _ret0084 + _zn0084*-2.00000003E-01;
    _zn0084 = _zn0084*_z20084;
    _ret0084 = _ret0084 + _zn0084*5.71428597E-01;
    _zn0084 = _zn0084*_z20084;
    _ret0084 = _ret0084 + _zn0084*-1.11111112E-01;
    _zn0084 = _zn0084*_z20084;
    _ret0084 = _ret0084 + _zn0084*-1.81818187E-01;
    _zn0084 = _zn0084*_z20084;
    _ret0084 = _ret0084 + _zn0084*7.69230798E-02;
    _TMP4 = (1.50000000E+00*(_ret0082 - _ret0084))/_rsubpix;
    _lcol = vec3(_TMP2, _TMP3, _TMP4);
    _x0086 = _subpix - 2.00000000E+00;
    _x0088 = (_x0086 - _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0088);
    _TMP87 = max(-1.00000000E+00, _TMP22);
    _x0094 = (_x0086 + _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0094);
    _TMP93 = max(-1.00000000E+00, _TMP22);
    _z20100 = _TMP93*_TMP93;
    _zn0100 = _TMP93*_z20100;
    _ret0100 = _TMP93 + _zn0100*-6.66666687E-01;
    _zn0100 = _zn0100*_z20100;
    _ret0100 = _ret0100 + _zn0100*-2.00000003E-01;
    _zn0100 = _zn0100*_z20100;
    _ret0100 = _ret0100 + _zn0100*5.71428597E-01;
    _zn0100 = _zn0100*_z20100;
    _ret0100 = _ret0100 + _zn0100*-1.11111112E-01;
    _zn0100 = _zn0100*_z20100;
    _ret0100 = _ret0100 + _zn0100*-1.81818187E-01;
    _zn0100 = _zn0100*_z20100;
    _ret0100 = _ret0100 + _zn0100*7.69230798E-02;
    _z20102 = _TMP87*_TMP87;
    _zn0102 = _TMP87*_z20102;
    _ret0102 = _TMP87 + _zn0102*-6.66666687E-01;
    _zn0102 = _zn0102*_z20102;
    _ret0102 = _ret0102 + _zn0102*-2.00000003E-01;
    _zn0102 = _zn0102*_z20102;
    _ret0102 = _ret0102 + _zn0102*5.71428597E-01;
    _zn0102 = _zn0102*_z20102;
    _ret0102 = _ret0102 + _zn0102*-1.11111112E-01;
    _zn0102 = _zn0102*_z20102;
    _ret0102 = _ret0102 + _zn0102*-1.81818187E-01;
    _zn0102 = _zn0102*_z20102;
    _ret0102 = _ret0102 + _zn0102*7.69230798E-02;
    _TMP5 = (1.50000000E+00*(_ret0100 - _ret0102))/_rsubpix;
    _x0104 = _subpix - 3.00000000E+00;
    _x0106 = (_x0104 - _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0106);
    _TMP105 = max(-1.00000000E+00, _TMP22);
    _x0112 = (_x0104 + _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0112);
    _TMP111 = max(-1.00000000E+00, _TMP22);
    _z20118 = _TMP111*_TMP111;
    _zn0118 = _TMP111*_z20118;
    _ret0118 = _TMP111 + _zn0118*-6.66666687E-01;
    _zn0118 = _zn0118*_z20118;
    _ret0118 = _ret0118 + _zn0118*-2.00000003E-01;
    _zn0118 = _zn0118*_z20118;
    _ret0118 = _ret0118 + _zn0118*5.71428597E-01;
    _zn0118 = _zn0118*_z20118;
    _ret0118 = _ret0118 + _zn0118*-1.11111112E-01;
    _zn0118 = _zn0118*_z20118;
    _ret0118 = _ret0118 + _zn0118*-1.81818187E-01;
    _zn0118 = _zn0118*_z20118;
    _ret0118 = _ret0118 + _zn0118*7.69230798E-02;
    _z20120 = _TMP105*_TMP105;
    _zn0120 = _TMP105*_z20120;
    _ret0120 = _TMP105 + _zn0120*-6.66666687E-01;
    _zn0120 = _zn0120*_z20120;
    _ret0120 = _ret0120 + _zn0120*-2.00000003E-01;
    _zn0120 = _zn0120*_z20120;
    _ret0120 = _ret0120 + _zn0120*5.71428597E-01;
    _zn0120 = _zn0120*_z20120;
    _ret0120 = _ret0120 + _zn0120*-1.11111112E-01;
    _zn0120 = _zn0120*_z20120;
    _ret0120 = _ret0120 + _zn0120*-1.81818187E-01;
    _zn0120 = _zn0120*_z20120;
    _ret0120 = _ret0120 + _zn0120*7.69230798E-02;
    _TMP6 = (1.50000000E+00*(_ret0118 - _ret0120))/_rsubpix;
    _x0122 = _subpix - 4.00000000E+00;
    _x0124 = (_x0122 - _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0124);
    _TMP123 = max(-1.00000000E+00, _TMP22);
    _x0130 = (_x0122 + _rsubpix*5.00000000E-01)/1.50000000E+00;
    _TMP22 = min(1.00000000E+00, _x0130);
    _TMP129 = max(-1.00000000E+00, _TMP22);
    _z20136 = _TMP129*_TMP129;
    _zn0136 = _TMP129*_z20136;
    _ret0136 = _TMP129 + _zn0136*-6.66666687E-01;
    _zn0136 = _zn0136*_z20136;
    _ret0136 = _ret0136 + _zn0136*-2.00000003E-01;
    _zn0136 = _zn0136*_z20136;
    _ret0136 = _ret0136 + _zn0136*5.71428597E-01;
    _zn0136 = _zn0136*_z20136;
    _ret0136 = _ret0136 + _zn0136*-1.11111112E-01;
    _zn0136 = _zn0136*_z20136;
    _ret0136 = _ret0136 + _zn0136*-1.81818187E-01;
    _zn0136 = _zn0136*_z20136;
    _ret0136 = _ret0136 + _zn0136*7.69230798E-02;
    _z20138 = _TMP123*_TMP123;
    _zn0138 = _TMP123*_z20138;
    _ret0138 = _TMP123 + _zn0138*-6.66666687E-01;
    _zn0138 = _zn0138*_z20138;
    _ret0138 = _ret0138 + _zn0138*-2.00000003E-01;
    _zn0138 = _zn0138*_z20138;
    _ret0138 = _ret0138 + _zn0138*5.71428597E-01;
    _zn0138 = _zn0138*_z20138;
    _ret0138 = _ret0138 + _zn0138*-1.11111112E-01;
    _zn0138 = _zn0138*_z20138;
    _ret0138 = _ret0138 + _zn0138*-1.81818187E-01;
    _zn0138 = _zn0138*_z20138;
    _ret0138 = _ret0138 + _zn0138*7.69230798E-02;
    _TMP7 = (1.50000000E+00*(_ret0136 - _ret0138))/_rsubpix;
    _rcol = vec3(_TMP5, _TMP6, _TMP7);
    _subpix = (TEX0.y/_texelSize.y - 4.99900013E-01) - float(_tli.y);
    _rsubpix = _range.y/_texelSize.y;
    _x0142 = (_subpix - _rsubpix*5.00000000E-01)/6.29999995E-01;
    _TMP22 = min(1.00000000E+00, _x0142);
    _TMP141 = max(-1.00000000E+00, _TMP22);
    _x0148 = (_subpix + _rsubpix*5.00000000E-01)/6.29999995E-01;
    _TMP22 = min(1.00000000E+00, _x0148);
    _TMP147 = max(-1.00000000E+00, _TMP22);
    _z20154 = _TMP147*_TMP147;
    _zn0154 = _TMP147*_z20154;
    _zn0154 = _zn0154*_z20154;
    _ret0154 = _TMP147 + _zn0154*-8.00000012E-01;
    _zn0154 = _zn0154*_z20154;
    _ret0154 = _ret0154 + _zn0154*2.85714298E-01;
    _zn0154 = _zn0154*_z20154;
    _ret0154 = _ret0154 + _zn0154*4.44444448E-01;
    _zn0154 = _zn0154*_z20154;
    _ret0154 = _ret0154 + _zn0154*-3.63636374E-01;
    _zn0154 = _zn0154*_z20154;
    _ret0154 = _ret0154 + _zn0154*7.69230798E-02;
    _z20156 = _TMP141*_TMP141;
    _zn0156 = _TMP141*_z20156;
    _zn0156 = _zn0156*_z20156;
    _ret0156 = _TMP141 + _zn0156*-8.00000012E-01;
    _zn0156 = _zn0156*_z20156;
    _ret0156 = _ret0156 + _zn0156*2.85714298E-01;
    _zn0156 = _zn0156*_z20156;
    _ret0156 = _ret0156 + _zn0156*4.44444448E-01;
    _zn0156 = _zn0156*_z20156;
    _ret0156 = _ret0156 + _zn0156*-3.63636374E-01;
    _zn0156 = _zn0156*_z20156;
    _ret0156 = _ret0156 + _zn0156*7.69230798E-02;
    _tcol = (6.29999995E-01*(_ret0154 - _ret0156))/_rsubpix;
    _x0158 = _subpix - 1.00000000E+00;
    _x0160 = (_x0158 - _rsubpix*5.00000000E-01)/6.29999995E-01;
    _TMP22 = min(1.00000000E+00, _x0160);
    _TMP159 = max(-1.00000000E+00, _TMP22);
    _x0166 = (_x0158 + _rsubpix*5.00000000E-01)/6.29999995E-01;
    _TMP22 = min(1.00000000E+00, _x0166);
    _TMP165 = max(-1.00000000E+00, _TMP22);
    _z20172 = _TMP165*_TMP165;
    _zn0172 = _TMP165*_z20172;
    _zn0172 = _zn0172*_z20172;
    _ret0172 = _TMP165 + _zn0172*-8.00000012E-01;
    _zn0172 = _zn0172*_z20172;
    _ret0172 = _ret0172 + _zn0172*2.85714298E-01;
    _zn0172 = _zn0172*_z20172;
    _ret0172 = _ret0172 + _zn0172*4.44444448E-01;
    _zn0172 = _zn0172*_z20172;
    _ret0172 = _ret0172 + _zn0172*-3.63636374E-01;
    _zn0172 = _zn0172*_z20172;
    _ret0172 = _ret0172 + _zn0172*7.69230798E-02;
    _z20174 = _TMP159*_TMP159;
    _zn0174 = _TMP159*_z20174;
    _zn0174 = _zn0174*_z20174;
    _ret0174 = _TMP159 + _zn0174*-8.00000012E-01;
    _zn0174 = _zn0174*_z20174;
    _ret0174 = _ret0174 + _zn0174*2.85714298E-01;
    _zn0174 = _zn0174*_z20174;
    _ret0174 = _ret0174 + _zn0174*4.44444448E-01;
    _zn0174 = _zn0174*_z20174;
    _ret0174 = _ret0174 + _zn0174*-3.63636374E-01;
    _zn0174 = _zn0174*_z20174;
    _ret0174 = _ret0174 + _zn0174*7.69230798E-02;
    _bcol = (6.29999995E-01*(_ret0172 - _ret0174))/_rsubpix;
    _TMP8 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP9 = (_TMP8.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP8.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP8.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02));
    _topLeftColor = _TMP9*_lcol*vec3(_tcol, _tcol, _tcol);
    _c0178 = TEX0.xy - 2.50000000E-01*_texelSize;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0178);
    _TMP11 = (_TMP10.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP10.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP10.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02));
    _bottomRightColor = _TMP11*_rcol*vec3(_bcol, _bcol, _bcol);
    _c0180 = TEX0.xy - (2.50000000E-01*_texelSize)*vec2( 0.00000000E+00, 1.00000000E+00);
    _TMP12 = COMPAT_TEXTURE(Texture, _c0180);
    _TMP13 = (_TMP12.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP12.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP12.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02));
    _bottomLeftColor = _TMP13*_lcol*vec3(_bcol, _bcol, _bcol);
    _c0182 = TEX0.xy - (2.50000000E-01*_texelSize)*vec2( 1.00000000E+00, 0.00000000E+00);
    _TMP14 = COMPAT_TEXTURE(Texture, _c0182);
    _TMP15 = (_TMP14.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP14.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02))*(_TMP14.xyz + vec3( 5.00000007E-02, 5.00000007E-02, 5.00000007E-02));
    _topRightColor = _TMP15*_rcol*vec3(_tcol, _tcol, _tcol);
    _averageColor = _topLeftColor + _bottomRightColor + _bottomLeftColor + _topRightColor;
    _r0184 = _averageColor.x*vec3( 1.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    _r0184 = _r0184 + _averageColor.y*vec3( 1.00000000E+00, 1.00000000E+00, 0.00000000E+00);
    _r0184 = _r0184 + _averageColor.z*vec3( 0.00000000E+00, 0.00000000E+00, 1.00000000E+00);
    _TMP17 = pow(_r0184.x, 4.54545438E-01);
    _TMP18 = pow(_r0184.y, 4.54545438E-01);
    _TMP19 = pow(_r0184.z, 4.54545438E-01);
    _TMP16 = vec3(_TMP17, _TMP18, _TMP19);
    _OUT._col = vec4(_TMP16.x, _TMP16.y, _TMP16.z, 0.00000000E+00);
    FragColor = _OUT._col;
    return;
} 
#endif
