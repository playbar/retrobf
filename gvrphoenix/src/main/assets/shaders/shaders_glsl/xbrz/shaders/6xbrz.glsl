// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP297;
float _TMP295;
float _TMP293;
float _TMP291;
float _TMP289;
float _TMP287;
float _TMP285;
float _TMP283;
float _TMP281;
float _TMP279;
float _TMP277;
float _TMP275;
float _TMP273;
float _TMP271;
float _TMP269;
float _TMP267;
float _TMP265;
float _TMP263;
float _TMP261;
float _TMP259;
float _TMP257;
float _TMP255;
float _TMP253;
float _TMP251;
float _TMP249;
float _TMP247;
float _TMP245;
float _TMP243;
float _TMP241;
float _TMP239;
float _TMP237;
float _TMP235;
float _TMP233;
float _TMP231;
float _TMP229;
float _TMP228;
float _TMP227;
float _TMP226;
float _TMP222;
float _TMP223;
float _TMP224;
float _TMP225;
float _TMP220;
float _TMP221;
float _TMP218;
float _TMP219;
float _TMP216;
float _TMP217;
float _TMP212;
float _TMP213;
float _TMP214;
float _TMP215;
float _TMP211;
float _TMP210;
float _TMP209;
float _TMP208;
float _TMP205;
float _TMP206;
float _TMP207;
float _TMP203;
float _TMP204;
float _TMP200;
float _TMP201;
float _TMP202;
float _TMP199;
vec3 _TMP196;
float _TMP300;
bool _TMP195;
bool _TMP194;
bool _TMP193;
bool _TMP192;
bool _TMP191;
bool _TMP190;
bool _TMP189;
float _TMP188;
float _TMP187;
float _TMP186;
float _TMP182;
float _TMP183;
float _TMP184;
float _TMP185;
float _TMP180;
float _TMP181;
float _TMP178;
float _TMP179;
float _TMP176;
float _TMP177;
float _TMP172;
float _TMP173;
float _TMP174;
float _TMP175;
float _TMP171;
float _TMP170;
float _TMP169;
float _TMP168;
float _TMP165;
float _TMP166;
float _TMP167;
float _TMP163;
float _TMP164;
float _TMP160;
float _TMP161;
float _TMP162;
float _TMP159;
vec3 _TMP156;
bool _TMP155;
bool _TMP154;
bool _TMP153;
bool _TMP152;
bool _TMP151;
bool _TMP150;
bool _TMP149;
float _TMP148;
float _TMP147;
float _TMP146;
float _TMP142;
float _TMP143;
float _TMP144;
float _TMP145;
float _TMP140;
float _TMP141;
float _TMP138;
float _TMP139;
float _TMP136;
float _TMP137;
float _TMP132;
float _TMP133;
float _TMP134;
float _TMP135;
float _TMP131;
float _TMP130;
float _TMP129;
float _TMP128;
float _TMP125;
float _TMP126;
float _TMP127;
float _TMP123;
float _TMP124;
float _TMP120;
float _TMP121;
float _TMP122;
float _TMP119;
vec3 _TMP116;
bool _TMP115;
bool _TMP114;
bool _TMP113;
bool _TMP112;
bool _TMP111;
bool _TMP110;
bool _TMP109;
float _TMP108;
float _TMP107;
float _TMP106;
float _TMP102;
float _TMP103;
float _TMP104;
float _TMP105;
float _TMP100;
float _TMP101;
float _TMP98;
float _TMP99;
float _TMP96;
float _TMP97;
float _TMP92;
float _TMP93;
float _TMP94;
float _TMP95;
float _TMP91;
float _TMP90;
float _TMP89;
float _TMP88;
float _TMP85;
float _TMP86;
float _TMP87;
float _TMP83;
float _TMP84;
float _TMP80;
float _TMP81;
float _TMP82;
float _TMP79;
vec3 _TMP76;
bool _TMP75;
bool _TMP74;
bool _TMP73;
bool _TMP72;
bool _TMP71;
bool _TMP70;
bool _TMP69;
bvec4 _TMP298;
int _TMP67;
int _TMP68;
int _TMP55;
int _TMP56;
int _TMP43;
int _TMP44;
int _TMP31;
int _TMP32;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0306;
float _TMP349;
float _TMP353;
float _TMP357;
float _TMP361;
float _TMP365;
float _TMP369;
float _TMP373;
float _TMP377;
float _TMP381;
float _TMP385;
vec3 _diff0386;
float _Y0386;
float _Cb0386;
float _Cr0386;
float _a0390;
float _TMP393;
vec3 _diff0394;
float _Y0394;
float _Cb0394;
float _Cr0394;
float _a0398;
float _TMP401;
vec3 _diff0402;
float _Y0402;
float _Cb0402;
float _Cr0402;
float _a0406;
float _TMP409;
vec3 _diff0410;
float _Y0410;
float _Cb0410;
float _Cr0410;
float _a0414;
float _TMP417;
vec3 _diff0418;
float _Y0418;
float _Cb0418;
float _Cr0418;
float _a0422;
float _TMP425;
vec3 _diff0426;
float _Y0426;
float _Cb0426;
float _Cr0426;
float _a0430;
float _TMP433;
vec3 _diff0434;
float _Y0434;
float _Cb0434;
float _Cr0434;
float _a0438;
float _TMP441;
vec3 _diff0442;
float _Y0442;
float _Cb0442;
float _Cr0442;
float _a0446;
float _TMP449;
vec3 _diff0450;
float _Y0450;
float _Cb0450;
float _Cr0450;
float _a0454;
float _TMP457;
vec3 _diff0458;
float _Y0458;
float _Cb0458;
float _Cr0458;
float _a0462;
float _TMP465;
vec3 _diff0466;
float _Y0466;
float _Cb0466;
float _Cr0466;
float _a0470;
float _TMP473;
vec3 _diff0474;
float _Y0474;
float _Cb0474;
float _Cr0474;
float _a0478;
float _TMP481;
vec3 _diff0482;
float _Y0482;
float _Cb0482;
float _Cr0482;
float _a0486;
float _TMP489;
vec3 _diff0490;
float _Y0490;
float _Cb0490;
float _Cr0490;
float _a0494;
float _TMP497;
vec3 _diff0498;
float _Y0498;
float _Cb0498;
float _Cr0498;
float _a0502;
float _TMP505;
vec3 _diff0506;
float _Y0506;
float _Cb0506;
float _Cr0506;
float _a0510;
float _TMP513;
vec3 _diff0514;
float _Y0514;
float _Cb0514;
float _Cr0514;
float _a0518;
float _TMP521;
vec3 _diff0522;
float _Y0522;
float _Cb0522;
float _Cr0522;
float _a0526;
float _TMP529;
vec3 _diff0530;
float _Y0530;
float _Cb0530;
float _Cr0530;
float _a0534;
float _TMP537;
vec3 _diff0538;
float _Y0538;
float _Cb0538;
float _Cr0538;
float _a0542;
float _TMP545;
vec3 _diff0546;
float _Y0546;
float _Cb0546;
float _Cr0546;
float _a0550;
float _TMP553;
vec3 _diff0554;
float _Y0554;
float _Cb0554;
float _Cr0554;
float _a0558;
float _TMP561;
vec3 _diff0562;
float _Y0562;
float _Cb0562;
float _Cr0562;
float _a0566;
float _TMP569;
vec3 _diff0570;
float _Y0570;
float _Cb0570;
float _Cr0570;
float _a0574;
float _TMP577;
vec3 _diff0578;
float _Y0578;
float _Cb0578;
float _Cr0578;
float _a0582;
float _TMP585;
vec3 _diff0586;
float _Y0586;
float _Cb0586;
float _Cr0586;
float _a0590;
float _TMP593;
vec3 _diff0594;
float _Y0594;
float _Cb0594;
float _Cr0594;
float _a0598;
float _TMP601;
vec3 _diff0602;
float _Y0602;
float _Cb0602;
float _Cr0602;
float _a0606;
float _TMP609;
vec3 _diff0610;
float _Y0610;
float _Cb0610;
float _Cr0610;
float _a0614;
float _TMP617;
vec3 _diff0618;
float _Y0618;
float _Cb0618;
float _Cr0618;
float _a0622;
float _TMP625;
vec3 _diff0626;
float _Y0626;
float _Cb0626;
float _Cr0626;
float _a0630;
float _TMP633;
vec3 _diff0634;
float _Y0634;
float _Cb0634;
float _Cr0634;
float _a0638;
float _TMP641;
vec3 _diff0642;
float _Y0642;
float _Cb0642;
float _Cr0642;
float _a0646;
float _TMP649;
vec3 _diff0650;
float _Y0650;
float _Cb0650;
float _Cr0650;
float _a0654;
float _TMP657;
vec3 _diff0658;
float _Y0658;
float _Cb0658;
float _Cr0658;
float _a0662;
float _TMP665;
vec3 _diff0666;
float _Y0666;
float _Cb0666;
float _Cr0666;
float _a0670;
float _TMP673;
vec3 _diff0674;
float _Y0674;
float _Cb0674;
float _Cr0674;
float _a0678;
float _TMP681;
vec3 _diff0682;
float _Y0682;
float _Cb0682;
float _Cr0682;
float _a0686;
float _TMP689;
vec3 _diff0690;
float _Y0690;
float _Cb0690;
float _Cr0690;
float _a0694;
float _TMP697;
vec3 _diff0698;
float _Y0698;
float _Cb0698;
float _Cr0698;
float _a0702;
float _TMP705;
vec3 _diff0706;
float _Y0706;
float _Cb0706;
float _Cr0706;
float _a0710;
float _TMP713;
vec3 _diff0714;
float _Y0714;
float _Cb0714;
float _Cr0714;
float _a0718;
float _TMP723;
vec3 _diff0724;
float _Y0724;
float _Cb0724;
float _Cr0724;
float _a0728;
float _TMP733;
vec3 _diff0734;
float _Y0734;
float _Cb0734;
float _Cr0734;
float _a0738;
float _TMP743;
vec3 _diff0744;
float _Y0744;
float _Cb0744;
float _Cr0744;
float _a0748;
float _TMP753;
vec3 _diff0754;
float _Y0754;
float _Cb0754;
float _Cr0754;
float _a0758;
float _TMP763;
vec3 _diff0764;
float _Y0764;
float _Cb0764;
float _Cr0764;
float _a0768;
float _TMP773;
vec3 _diff0774;
float _Y0774;
float _Cb0774;
float _Cr0774;
float _a0778;
float _TMP783;
vec3 _diff0784;
float _Y0784;
float _Cb0784;
float _Cr0784;
float _a0788;
float _TMP791;
vec3 _diff0792;
float _Y0792;
float _Cb0792;
float _Cr0792;
float _a0796;
float _TMP799;
vec3 _diff0800;
float _Y0800;
float _Cb0800;
float _Cr0800;
float _a0804;
vec3 _TMP807;
float _a0808;
vec3 _TMP811;
float _a0812;
vec3 _TMP815;
float _a0816;
vec3 _TMP819;
float _a0820;
vec3 _TMP823;
float _a0824;
vec3 _TMP827;
float _a0828;
vec3 _TMP831;
float _a0832;
vec3 _TMP835;
float _a0836;
vec3 _TMP839;
float _a0840;
vec3 _TMP843;
float _a0844;
vec3 _TMP847;
float _a0848;
vec3 _TMP851;
float _a0852;
vec3 _TMP855;
float _a0856;
vec3 _TMP859;
float _a0860;
vec3 _TMP863;
float _a0864;
vec3 _TMP867;
float _a0868;
float _TMP871;
vec3 _diff0872;
float _Y0872;
float _Cb0872;
float _Cr0872;
float _a0876;
float _TMP879;
vec3 _diff0880;
float _Y0880;
float _Cb0880;
float _Cr0880;
float _a0884;
float _TMP889;
vec3 _diff0890;
float _Y0890;
float _Cb0890;
float _Cr0890;
float _a0894;
float _TMP899;
vec3 _diff0900;
float _Y0900;
float _Cb0900;
float _Cr0900;
float _a0904;
float _TMP909;
vec3 _diff0910;
float _Y0910;
float _Cb0910;
float _Cr0910;
float _a0914;
float _TMP919;
vec3 _diff0920;
float _Y0920;
float _Cb0920;
float _Cr0920;
float _a0924;
float _TMP929;
vec3 _diff0930;
float _Y0930;
float _Cb0930;
float _Cr0930;
float _a0934;
float _TMP939;
vec3 _diff0940;
float _Y0940;
float _Cb0940;
float _Cr0940;
float _a0944;
float _TMP949;
vec3 _diff0950;
float _Y0950;
float _Cb0950;
float _Cr0950;
float _a0954;
float _TMP957;
vec3 _diff0958;
float _Y0958;
float _Cb0958;
float _Cr0958;
float _a0962;
float _TMP965;
vec3 _diff0966;
float _Y0966;
float _Cb0966;
float _Cr0966;
float _a0970;
vec3 _TMP973;
float _a0974;
vec3 _TMP977;
float _a0978;
vec3 _TMP981;
float _a0982;
vec3 _TMP985;
float _a0986;
vec3 _TMP989;
float _a0990;
vec3 _TMP993;
float _a0994;
vec3 _TMP997;
float _a0998;
vec3 _TMP1001;
float _a1002;
vec3 _TMP1005;
float _a1006;
vec3 _TMP1009;
float _a1010;
vec3 _TMP1013;
float _a1014;
vec3 _TMP1017;
float _a1018;
vec3 _TMP1021;
float _a1022;
vec3 _TMP1025;
float _a1026;
vec3 _TMP1029;
float _a1030;
vec3 _TMP1033;
float _a1034;
float _TMP1037;
vec3 _diff1038;
float _Y1038;
float _Cb1038;
float _Cr1038;
float _a1042;
float _TMP1045;
vec3 _diff1046;
float _Y1046;
float _Cb1046;
float _Cr1046;
float _a1050;
float _TMP1055;
vec3 _diff1056;
float _Y1056;
float _Cb1056;
float _Cr1056;
float _a1060;
float _TMP1065;
vec3 _diff1066;
float _Y1066;
float _Cb1066;
float _Cr1066;
float _a1070;
float _TMP1075;
vec3 _diff1076;
float _Y1076;
float _Cb1076;
float _Cr1076;
float _a1080;
float _TMP1085;
vec3 _diff1086;
float _Y1086;
float _Cb1086;
float _Cr1086;
float _a1090;
float _TMP1095;
vec3 _diff1096;
float _Y1096;
float _Cb1096;
float _Cr1096;
float _a1100;
float _TMP1105;
vec3 _diff1106;
float _Y1106;
float _Cb1106;
float _Cr1106;
float _a1110;
float _TMP1115;
vec3 _diff1116;
float _Y1116;
float _Cb1116;
float _Cr1116;
float _a1120;
float _TMP1123;
vec3 _diff1124;
float _Y1124;
float _Cb1124;
float _Cr1124;
float _a1128;
float _TMP1131;
vec3 _diff1132;
float _Y1132;
float _Cb1132;
float _Cr1132;
float _a1136;
vec3 _TMP1139;
float _a1140;
vec3 _TMP1143;
float _a1144;
vec3 _TMP1147;
float _a1148;
vec3 _TMP1151;
float _a1152;
vec3 _TMP1155;
float _a1156;
vec3 _TMP1159;
float _a1160;
vec3 _TMP1163;
float _a1164;
vec3 _TMP1167;
float _a1168;
vec3 _TMP1171;
float _a1172;
vec3 _TMP1175;
float _a1176;
vec3 _TMP1179;
float _a1180;
vec3 _TMP1183;
float _a1184;
vec3 _TMP1187;
float _a1188;
vec3 _TMP1191;
float _a1192;
vec3 _TMP1195;
float _a1196;
vec3 _TMP1199;
float _a1200;
float _TMP1203;
vec3 _diff1204;
float _Y1204;
float _Cb1204;
float _Cr1204;
float _a1208;
float _TMP1211;
vec3 _diff1212;
float _Y1212;
float _Cb1212;
float _Cr1212;
float _a1216;
float _TMP1221;
vec3 _diff1222;
float _Y1222;
float _Cb1222;
float _Cr1222;
float _a1226;
float _TMP1231;
vec3 _diff1232;
float _Y1232;
float _Cb1232;
float _Cr1232;
float _a1236;
float _TMP1241;
vec3 _diff1242;
float _Y1242;
float _Cb1242;
float _Cr1242;
float _a1246;
float _TMP1251;
vec3 _diff1252;
float _Y1252;
float _Cb1252;
float _Cr1252;
float _a1256;
float _TMP1261;
vec3 _diff1262;
float _Y1262;
float _Cb1262;
float _Cr1262;
float _a1266;
float _TMP1271;
vec3 _diff1272;
float _Y1272;
float _Cb1272;
float _Cr1272;
float _a1276;
float _TMP1281;
vec3 _diff1282;
float _Y1282;
float _Cb1282;
float _Cr1282;
float _a1286;
float _TMP1289;
vec3 _diff1290;
float _Y1290;
float _Cb1290;
float _Cr1290;
float _a1294;
float _TMP1297;
vec3 _diff1298;
float _Y1298;
float _Cb1298;
float _Cr1298;
float _a1302;
vec3 _TMP1305;
float _a1306;
vec3 _TMP1309;
float _a1310;
vec3 _TMP1313;
float _a1314;
vec3 _TMP1317;
float _a1318;
vec3 _TMP1321;
float _a1322;
vec3 _TMP1325;
float _a1326;
vec3 _TMP1329;
float _a1330;
vec3 _TMP1333;
float _a1334;
vec3 _TMP1337;
float _a1338;
vec3 _TMP1341;
float _a1342;
vec3 _TMP1345;
float _a1346;
vec3 _TMP1349;
float _a1350;
vec3 _TMP1353;
float _a1354;
vec3 _TMP1357;
float _a1358;
vec3 _TMP1361;
float _a1362;
vec3 _TMP1365;
float _a1366;
bool _TMP1369;
vec3 _TMP1377;
vec3 _TMP1383;
vec3 _TMP1389;
vec3 _TMP1395;
vec3 _TMP1401;
vec3 _TMP1407;
vec3 _TMP1413;
vec3 _TMP1419;
vec3 _TMP1425;
vec3 _TMP1431;
vec3 _TMP1437;
vec3 _TMP1443;
vec3 _TMP1449;
vec3 _TMP1455;
vec3 _TMP1461;
vec3 _TMP1467;
vec3 _TMP1473;
vec3 _TMP1479;
vec3 _TMP1485;
vec3 _TMP1491;
vec3 _TMP1497;
vec3 _TMP1503;
vec3 _TMP1509;
vec3 _TMP1515;
vec3 _TMP1521;
vec3 _TMP1527;
vec3 _TMP1533;
vec3 _TMP1539;
vec3 _TMP1545;
vec3 _TMP1551;
vec3 _TMP1557;
vec3 _TMP1563;
vec3 _TMP1569;
vec3 _TMP1575;
vec3 _TMP1581;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _f;
    ivec4 _blendResult;
    float _dist_03_011;
    float _dist_00_021;
    bool _dominantGradient1;
    float _dist_04_001;
    float _dist_05_031;
    bool _dominantGradient2;
    float _dist_00_081;
    float _dist_07_011;
    bool _dominantGradient3;
    float _dist_05_071;
    float _dist_06_001;
    bool _dominantGradient4;
    vec3 _dst[36];
    bool _haveShallowLine1;
    bool _haveSteepLine1;
    bool _needBlend1;
    bool _doLineBlend1;
    _x0306 = TEX0.xy*TextureSize;
    _f = fract(_x0306);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _TMP349 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP353 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP357 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP361 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP365 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP369 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP373 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP377 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP381 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _blendResult = ivec4(0, 0, 0, 0);
    if (!(_TMP349 == _TMP353 && _TMP361 == _TMP357 || _TMP349 == _TMP361 && _TMP353 == _TMP357)) { 
        _diff0386 = _TMP9.xyz - _TMP7.xyz;
        _Y0386 = dot(_diff0386, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0386 = 5.31519055E-01*(_diff0386.z - _Y0386);
        _Cr0386 = 6.78149998E-01*(_diff0386.x - _Y0386);
        _a0390 = _Y0386*_Y0386 + _Cb0386*_Cb0386 + _Cr0386*_Cr0386;
        _TMP300 = inversesqrt(_a0390);
        _TMP385 = 1.00000000E+00/_TMP300;
        _diff0394 = _TMP7.xyz - _TMP5.xyz;
        _Y0394 = dot(_diff0394, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0394 = 5.31519055E-01*(_diff0394.z - _Y0394);
        _Cr0394 = 6.78149998E-01*(_diff0394.x - _Y0394);
        _a0398 = _Y0394*_Y0394 + _Cb0394*_Cb0394 + _Cr0394*_Cr0394;
        _TMP300 = inversesqrt(_a0398);
        _TMP393 = 1.00000000E+00/_TMP300;
        _diff0402 = _TMP13.xyz - _TMP11.xyz;
        _Y0402 = dot(_diff0402, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0402 = 5.31519055E-01*(_diff0402.z - _Y0402);
        _Cr0402 = 6.78149998E-01*(_diff0402.x - _Y0402);
        _a0406 = _Y0402*_Y0402 + _Cb0402*_Cb0402 + _Cr0402*_Cr0402;
        _TMP300 = inversesqrt(_a0406);
        _TMP401 = 1.00000000E+00/_TMP300;
        _diff0410 = _TMP11.xyz - _TMP19.xyz;
        _Y0410 = dot(_diff0410, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0410 = 5.31519055E-01*(_diff0410.z - _Y0410);
        _Cr0410 = 6.78149998E-01*(_diff0410.x - _Y0410);
        _a0414 = _Y0410*_Y0410 + _Cb0410*_Cb0410 + _Cr0410*_Cr0410;
        _TMP300 = inversesqrt(_a0414);
        _TMP409 = 1.00000000E+00/_TMP300;
        _diff0418 = _TMP10.xyz - _TMP8.xyz;
        _Y0418 = dot(_diff0418, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0418 = 5.31519055E-01*(_diff0418.z - _Y0418);
        _Cr0418 = 6.78149998E-01*(_diff0418.x - _Y0418);
        _a0422 = _Y0418*_Y0418 + _Cb0418*_Cb0418 + _Cr0418*_Cr0418;
        _TMP300 = inversesqrt(_a0422);
        _TMP417 = 1.00000000E+00/_TMP300;
        _dist_03_011 = _TMP385 + _TMP393 + _TMP401 + _TMP409 + 4.00000000E+00*_TMP417;
        _diff0426 = _TMP6.xyz - _TMP10.xyz;
        _Y0426 = dot(_diff0426, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0426 = 5.31519055E-01*(_diff0426.z - _Y0426);
        _Cr0426 = 6.78149998E-01*(_diff0426.x - _Y0426);
        _a0430 = _Y0426*_Y0426 + _Cb0426*_Cb0426 + _Cr0426*_Cr0426;
        _TMP300 = inversesqrt(_a0430);
        _TMP425 = 1.00000000E+00/_TMP300;
        _diff0434 = _TMP10.xyz - _TMP14.xyz;
        _Y0434 = dot(_diff0434, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0434 = 5.31519055E-01*(_diff0434.z - _Y0434);
        _Cr0434 = 6.78149998E-01*(_diff0434.x - _Y0434);
        _a0438 = _Y0434*_Y0434 + _Cb0434*_Cb0434 + _Cr0434*_Cr0434;
        _TMP300 = inversesqrt(_a0438);
        _TMP433 = 1.00000000E+00/_TMP300;
        _diff0442 = _TMP4.xyz - _TMP8.xyz;
        _Y0442 = dot(_diff0442, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0442 = 5.31519055E-01*(_diff0442.z - _Y0442);
        _Cr0442 = 6.78149998E-01*(_diff0442.x - _Y0442);
        _a0446 = _Y0442*_Y0442 + _Cb0442*_Cb0442 + _Cr0442*_Cr0442;
        _TMP300 = inversesqrt(_a0446);
        _TMP441 = 1.00000000E+00/_TMP300;
        _diff0450 = _TMP8.xyz - _TMP20.xyz;
        _Y0450 = dot(_diff0450, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0450 = 5.31519055E-01*(_diff0450.z - _Y0450);
        _Cr0450 = 6.78149998E-01*(_diff0450.x - _Y0450);
        _a0454 = _Y0450*_Y0450 + _Cb0450*_Cb0450 + _Cr0450*_Cr0450;
        _TMP300 = inversesqrt(_a0454);
        _TMP449 = 1.00000000E+00/_TMP300;
        _diff0458 = _TMP7.xyz - _TMP11.xyz;
        _Y0458 = dot(_diff0458, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0458 = 5.31519055E-01*(_diff0458.z - _Y0458);
        _Cr0458 = 6.78149998E-01*(_diff0458.x - _Y0458);
        _a0462 = _Y0458*_Y0458 + _Cb0458*_Cb0458 + _Cr0458*_Cr0458;
        _TMP300 = inversesqrt(_a0462);
        _TMP457 = 1.00000000E+00/_TMP300;
        _dist_00_021 = _TMP425 + _TMP433 + _TMP441 + _TMP449 + 4.00000000E+00*_TMP457;
        _dominantGradient1 = 3.59999990E+00*_dist_03_011 < _dist_00_021;
        if (_dist_03_011 < _dist_00_021 && _TMP349 != _TMP353 && _TMP349 != _TMP361) { 
            if (_dominantGradient1) { 
                _TMP32 = 2;
            } else {
                _TMP32 = 1;
            } 
            _TMP31 = _TMP32;
        } else {
            _TMP31 = 0;
        } 
        _blendResult.z = _TMP31;
    } 
    if (!(_TMP369 == _TMP349 && _TMP365 == _TMP361 || _TMP369 == _TMP365 && _TMP349 == _TMP361)) { 
        _diff0466 = _TMP17.xyz - _TMP6.xyz;
        _Y0466 = dot(_diff0466, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0466 = 5.31519055E-01*(_diff0466.z - _Y0466);
        _Cr0466 = 6.78149998E-01*(_diff0466.x - _Y0466);
        _a0470 = _Y0466*_Y0466 + _Cb0466*_Cb0466 + _Cr0466*_Cr0466;
        _TMP300 = inversesqrt(_a0470);
        _TMP465 = 1.00000000E+00/_TMP300;
        _diff0474 = _TMP6.xyz - _TMP4.xyz;
        _Y0474 = dot(_diff0474, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0474 = 5.31519055E-01*(_diff0474.z - _Y0474);
        _Cr0474 = 6.78149998E-01*(_diff0474.x - _Y0474);
        _a0478 = _Y0474*_Y0474 + _Cb0474*_Cb0474 + _Cr0474*_Cr0474;
        _TMP300 = inversesqrt(_a0478);
        _TMP473 = 1.00000000E+00/_TMP300;
        _diff0482 = _TMP12.xyz - _TMP10.xyz;
        _Y0482 = dot(_diff0482, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0482 = 5.31519055E-01*(_diff0482.z - _Y0482);
        _Cr0482 = 6.78149998E-01*(_diff0482.x - _Y0482);
        _a0486 = _Y0482*_Y0482 + _Cb0482*_Cb0482 + _Cr0482*_Cr0482;
        _TMP300 = inversesqrt(_a0486);
        _TMP481 = 1.00000000E+00/_TMP300;
        _diff0490 = _TMP10.xyz - _TMP8.xyz;
        _Y0490 = dot(_diff0490, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0490 = 5.31519055E-01*(_diff0490.z - _Y0490);
        _Cr0490 = 6.78149998E-01*(_diff0490.x - _Y0490);
        _a0494 = _Y0490*_Y0490 + _Cb0490*_Cb0490 + _Cr0490*_Cr0490;
        _TMP300 = inversesqrt(_a0494);
        _TMP489 = 1.00000000E+00/_TMP300;
        _diff0498 = _TMP9.xyz - _TMP7.xyz;
        _Y0498 = dot(_diff0498, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0498 = 5.31519055E-01*(_diff0498.z - _Y0498);
        _Cr0498 = 6.78149998E-01*(_diff0498.x - _Y0498);
        _a0502 = _Y0498*_Y0498 + _Cb0498*_Cb0498 + _Cr0498*_Cr0498;
        _TMP300 = inversesqrt(_a0502);
        _TMP497 = 1.00000000E+00/_TMP300;
        _dist_04_001 = _TMP465 + _TMP473 + _TMP481 + _TMP489 + 4.00000000E+00*_TMP497;
        _diff0506 = _TMP16.xyz - _TMP9.xyz;
        _Y0506 = dot(_diff0506, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0506 = 5.31519055E-01*(_diff0506.z - _Y0506);
        _Cr0506 = 6.78149998E-01*(_diff0506.x - _Y0506);
        _a0510 = _Y0506*_Y0506 + _Cb0506*_Cb0506 + _Cr0506*_Cr0506;
        _TMP300 = inversesqrt(_a0510);
        _TMP505 = 1.00000000E+00/_TMP300;
        _diff0514 = _TMP9.xyz - _TMP13.xyz;
        _Y0514 = dot(_diff0514, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0514 = 5.31519055E-01*(_diff0514.z - _Y0514);
        _Cr0514 = 6.78149998E-01*(_diff0514.x - _Y0514);
        _a0518 = _Y0514*_Y0514 + _Cb0514*_Cb0514 + _Cr0514*_Cr0514;
        _TMP300 = inversesqrt(_a0518);
        _TMP513 = 1.00000000E+00/_TMP300;
        _diff0522 = _TMP3.xyz - _TMP7.xyz;
        _Y0522 = dot(_diff0522, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0522 = 5.31519055E-01*(_diff0522.z - _Y0522);
        _Cr0522 = 6.78149998E-01*(_diff0522.x - _Y0522);
        _a0526 = _Y0522*_Y0522 + _Cb0522*_Cb0522 + _Cr0522*_Cr0522;
        _TMP300 = inversesqrt(_a0526);
        _TMP521 = 1.00000000E+00/_TMP300;
        _diff0530 = _TMP7.xyz - _TMP11.xyz;
        _Y0530 = dot(_diff0530, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0530 = 5.31519055E-01*(_diff0530.z - _Y0530);
        _Cr0530 = 6.78149998E-01*(_diff0530.x - _Y0530);
        _a0534 = _Y0530*_Y0530 + _Cb0530*_Cb0530 + _Cr0530*_Cr0530;
        _TMP300 = inversesqrt(_a0534);
        _TMP529 = 1.00000000E+00/_TMP300;
        _diff0538 = _TMP6.xyz - _TMP10.xyz;
        _Y0538 = dot(_diff0538, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0538 = 5.31519055E-01*(_diff0538.z - _Y0538);
        _Cr0538 = 6.78149998E-01*(_diff0538.x - _Y0538);
        _a0542 = _Y0538*_Y0538 + _Cb0538*_Cb0538 + _Cr0538*_Cr0538;
        _TMP300 = inversesqrt(_a0542);
        _TMP537 = 1.00000000E+00/_TMP300;
        _dist_05_031 = _TMP505 + _TMP513 + _TMP521 + _TMP529 + 4.00000000E+00*_TMP537;
        _dominantGradient2 = 3.59999990E+00*_dist_05_031 < _dist_04_001;
        if (_dist_04_001 > _dist_05_031 && _TMP349 != _TMP369 && _TMP349 != _TMP361) { 
            if (_dominantGradient2) { 
                _TMP44 = 2;
            } else {
                _TMP44 = 1;
            } 
            _TMP43 = _TMP44;
        } else {
            _TMP43 = 0;
        } 
        _blendResult.w = _TMP43;
    } 
    if (!(_TMP377 == _TMP381 && _TMP349 == _TMP353 || _TMP377 == _TMP349 && _TMP381 == _TMP353)) { 
        _diff0546 = _TMP6.xyz - _TMP4.xyz;
        _Y0546 = dot(_diff0546, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0546 = 5.31519055E-01*(_diff0546.z - _Y0546);
        _Cr0546 = 6.78149998E-01*(_diff0546.x - _Y0546);
        _a0550 = _Y0546*_Y0546 + _Cb0546*_Cb0546 + _Cr0546*_Cr0546;
        _TMP300 = inversesqrt(_a0550);
        _TMP545 = 1.00000000E+00/_TMP300;
        _diff0554 = _TMP4.xyz - _TMP2.xyz;
        _Y0554 = dot(_diff0554, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0554 = 5.31519055E-01*(_diff0554.z - _Y0554);
        _Cr0554 = 6.78149998E-01*(_diff0554.x - _Y0554);
        _a0558 = _Y0554*_Y0554 + _Cb0554*_Cb0554 + _Cr0554*_Cr0554;
        _TMP300 = inversesqrt(_a0558);
        _TMP553 = 1.00000000E+00/_TMP300;
        _diff0562 = _TMP10.xyz - _TMP8.xyz;
        _Y0562 = dot(_diff0562, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0562 = 5.31519055E-01*(_diff0562.z - _Y0562);
        _Cr0562 = 6.78149998E-01*(_diff0562.x - _Y0562);
        _a0566 = _Y0562*_Y0562 + _Cb0562*_Cb0562 + _Cr0562*_Cr0562;
        _TMP300 = inversesqrt(_a0566);
        _TMP561 = 1.00000000E+00/_TMP300;
        _diff0570 = _TMP8.xyz - _TMP18.xyz;
        _Y0570 = dot(_diff0570, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0570 = 5.31519055E-01*(_diff0570.z - _Y0570);
        _Cr0570 = 6.78149998E-01*(_diff0570.x - _Y0570);
        _a0574 = _Y0570*_Y0570 + _Cb0570*_Cb0570 + _Cr0570*_Cr0570;
        _TMP300 = inversesqrt(_a0574);
        _TMP569 = 1.00000000E+00/_TMP300;
        _diff0578 = _TMP7.xyz - _TMP5.xyz;
        _Y0578 = dot(_diff0578, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0578 = 5.31519055E-01*(_diff0578.z - _Y0578);
        _Cr0578 = 6.78149998E-01*(_diff0578.x - _Y0578);
        _a0582 = _Y0578*_Y0578 + _Cb0578*_Cb0578 + _Cr0578*_Cr0578;
        _TMP300 = inversesqrt(_a0582);
        _TMP577 = 1.00000000E+00/_TMP300;
        _dist_00_081 = _TMP545 + _TMP553 + _TMP561 + _TMP569 + 4.00000000E+00*_TMP577;
        _diff0586 = _TMP3.xyz - _TMP7.xyz;
        _Y0586 = dot(_diff0586, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0586 = 5.31519055E-01*(_diff0586.z - _Y0586);
        _Cr0586 = 6.78149998E-01*(_diff0586.x - _Y0586);
        _a0590 = _Y0586*_Y0586 + _Cb0586*_Cb0586 + _Cr0586*_Cr0586;
        _TMP300 = inversesqrt(_a0590);
        _TMP585 = 1.00000000E+00/_TMP300;
        _diff0594 = _TMP7.xyz - _TMP11.xyz;
        _Y0594 = dot(_diff0594, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0594 = 5.31519055E-01*(_diff0594.z - _Y0594);
        _Cr0594 = 6.78149998E-01*(_diff0594.x - _Y0594);
        _a0598 = _Y0594*_Y0594 + _Cb0594*_Cb0594 + _Cr0594*_Cr0594;
        _TMP300 = inversesqrt(_a0598);
        _TMP593 = 1.00000000E+00/_TMP300;
        _diff0602 = _TMP1.xyz - _TMP5.xyz;
        _Y0602 = dot(_diff0602, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0602 = 5.31519055E-01*(_diff0602.z - _Y0602);
        _Cr0602 = 6.78149998E-01*(_diff0602.x - _Y0602);
        _a0606 = _Y0602*_Y0602 + _Cb0602*_Cb0602 + _Cr0602*_Cr0602;
        _TMP300 = inversesqrt(_a0606);
        _TMP601 = 1.00000000E+00/_TMP300;
        _diff0610 = _TMP5.xyz - _TMP19.xyz;
        _Y0610 = dot(_diff0610, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0610 = 5.31519055E-01*(_diff0610.z - _Y0610);
        _Cr0610 = 6.78149998E-01*(_diff0610.x - _Y0610);
        _a0614 = _Y0610*_Y0610 + _Cb0610*_Cb0610 + _Cr0610*_Cr0610;
        _TMP300 = inversesqrt(_a0614);
        _TMP609 = 1.00000000E+00/_TMP300;
        _diff0618 = _TMP4.xyz - _TMP8.xyz;
        _Y0618 = dot(_diff0618, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0618 = 5.31519055E-01*(_diff0618.z - _Y0618);
        _Cr0618 = 6.78149998E-01*(_diff0618.x - _Y0618);
        _a0622 = _Y0618*_Y0618 + _Cb0618*_Cb0618 + _Cr0618*_Cr0618;
        _TMP300 = inversesqrt(_a0622);
        _TMP617 = 1.00000000E+00/_TMP300;
        _dist_07_011 = _TMP585 + _TMP593 + _TMP601 + _TMP609 + 4.00000000E+00*_TMP617;
        _dominantGradient3 = 3.59999990E+00*_dist_07_011 < _dist_00_081;
        if (_dist_00_081 > _dist_07_011 && _TMP349 != _TMP377 && _TMP349 != _TMP353) { 
            if (_dominantGradient3) { 
                _TMP56 = 2;
            } else {
                _TMP56 = 1;
            } 
            _TMP55 = _TMP56;
        } else {
            _TMP55 = 0;
        } 
        _blendResult.y = _TMP55;
    } 
    if (!(_TMP373 == _TMP377 && _TMP369 == _TMP349 || _TMP373 == _TMP369 && _TMP377 == _TMP349)) { 
        _diff0626 = _TMP16.xyz - _TMP3.xyz;
        _Y0626 = dot(_diff0626, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0626 = 5.31519055E-01*(_diff0626.z - _Y0626);
        _Cr0626 = 6.78149998E-01*(_diff0626.x - _Y0626);
        _a0630 = _Y0626*_Y0626 + _Cb0626*_Cb0626 + _Cr0626*_Cr0626;
        _TMP300 = inversesqrt(_a0630);
        _TMP625 = 1.00000000E+00/_TMP300;
        _diff0634 = _TMP3.xyz - _TMP1.xyz;
        _Y0634 = dot(_diff0634, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0634 = 5.31519055E-01*(_diff0634.z - _Y0634);
        _Cr0634 = 6.78149998E-01*(_diff0634.x - _Y0634);
        _a0638 = _Y0634*_Y0634 + _Cb0634*_Cb0634 + _Cr0634*_Cr0634;
        _TMP300 = inversesqrt(_a0638);
        _TMP633 = 1.00000000E+00/_TMP300;
        _diff0642 = _TMP9.xyz - _TMP7.xyz;
        _Y0642 = dot(_diff0642, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0642 = 5.31519055E-01*(_diff0642.z - _Y0642);
        _Cr0642 = 6.78149998E-01*(_diff0642.x - _Y0642);
        _a0646 = _Y0642*_Y0642 + _Cb0642*_Cb0642 + _Cr0642*_Cr0642;
        _TMP300 = inversesqrt(_a0646);
        _TMP641 = 1.00000000E+00/_TMP300;
        _diff0650 = _TMP7.xyz - _TMP5.xyz;
        _Y0650 = dot(_diff0650, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0650 = 5.31519055E-01*(_diff0650.z - _Y0650);
        _Cr0650 = 6.78149998E-01*(_diff0650.x - _Y0650);
        _a0654 = _Y0650*_Y0650 + _Cb0650*_Cb0650 + _Cr0650*_Cr0650;
        _TMP300 = inversesqrt(_a0654);
        _TMP649 = 1.00000000E+00/_TMP300;
        _diff0658 = _TMP6.xyz - _TMP4.xyz;
        _Y0658 = dot(_diff0658, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0658 = 5.31519055E-01*(_diff0658.z - _Y0658);
        _Cr0658 = 6.78149998E-01*(_diff0658.x - _Y0658);
        _a0662 = _Y0658*_Y0658 + _Cb0658*_Cb0658 + _Cr0658*_Cr0658;
        _TMP300 = inversesqrt(_a0662);
        _TMP657 = 1.00000000E+00/_TMP300;
        _dist_05_071 = _TMP625 + _TMP633 + _TMP641 + _TMP649 + 4.00000000E+00*_TMP657;
        _diff0666 = _TMP15.xyz - _TMP6.xyz;
        _Y0666 = dot(_diff0666, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0666 = 5.31519055E-01*(_diff0666.z - _Y0666);
        _Cr0666 = 6.78149998E-01*(_diff0666.x - _Y0666);
        _a0670 = _Y0666*_Y0666 + _Cb0666*_Cb0666 + _Cr0666*_Cr0666;
        _TMP300 = inversesqrt(_a0670);
        _TMP665 = 1.00000000E+00/_TMP300;
        _diff0674 = _TMP6.xyz - _TMP10.xyz;
        _Y0674 = dot(_diff0674, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0674 = 5.31519055E-01*(_diff0674.z - _Y0674);
        _Cr0674 = 6.78149998E-01*(_diff0674.x - _Y0674);
        _a0678 = _Y0674*_Y0674 + _Cb0674*_Cb0674 + _Cr0674*_Cr0674;
        _TMP300 = inversesqrt(_a0678);
        _TMP673 = 1.00000000E+00/_TMP300;
        _diff0682 = _TMP0.xyz - _TMP4.xyz;
        _Y0682 = dot(_diff0682, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0682 = 5.31519055E-01*(_diff0682.z - _Y0682);
        _Cr0682 = 6.78149998E-01*(_diff0682.x - _Y0682);
        _a0686 = _Y0682*_Y0682 + _Cb0682*_Cb0682 + _Cr0682*_Cr0682;
        _TMP300 = inversesqrt(_a0686);
        _TMP681 = 1.00000000E+00/_TMP300;
        _diff0690 = _TMP4.xyz - _TMP8.xyz;
        _Y0690 = dot(_diff0690, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0690 = 5.31519055E-01*(_diff0690.z - _Y0690);
        _Cr0690 = 6.78149998E-01*(_diff0690.x - _Y0690);
        _a0694 = _Y0690*_Y0690 + _Cb0690*_Cb0690 + _Cr0690*_Cr0690;
        _TMP300 = inversesqrt(_a0694);
        _TMP689 = 1.00000000E+00/_TMP300;
        _diff0698 = _TMP3.xyz - _TMP7.xyz;
        _Y0698 = dot(_diff0698, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0698 = 5.31519055E-01*(_diff0698.z - _Y0698);
        _Cr0698 = 6.78149998E-01*(_diff0698.x - _Y0698);
        _a0702 = _Y0698*_Y0698 + _Cb0698*_Cb0698 + _Cr0698*_Cr0698;
        _TMP300 = inversesqrt(_a0702);
        _TMP697 = 1.00000000E+00/_TMP300;
        _dist_06_001 = _TMP665 + _TMP673 + _TMP681 + _TMP689 + 4.00000000E+00*_TMP697;
        _dominantGradient4 = 3.59999990E+00*_dist_05_071 < _dist_06_001;
        if (_dist_05_071 < _dist_06_001 && _TMP349 != _TMP369 && _TMP349 != _TMP377) { 
            if (_dominantGradient4) { 
                _TMP68 = 2;
            } else {
                _TMP68 = 1;
            } 
            _TMP67 = _TMP68;
        } else {
            _TMP67 = 0;
        } 
        _blendResult.x = _TMP67;
    } 
    _dst[4] = _TMP7.xyz;
    _dst[5] = _TMP7.xyz;
    _dst[6] = _TMP7.xyz;
    _dst[7] = _TMP7.xyz;
    _dst[8] = _TMP7.xyz;
    _dst[9] = _TMP7.xyz;
    _dst[10] = _TMP7.xyz;
    _dst[11] = _TMP7.xyz;
    _dst[12] = _TMP7.xyz;
    _dst[13] = _TMP7.xyz;
    _dst[14] = _TMP7.xyz;
    _dst[15] = _TMP7.xyz;
    _dst[16] = _TMP7.xyz;
    _dst[17] = _TMP7.xyz;
    _dst[18] = _TMP7.xyz;
    _dst[19] = _TMP7.xyz;
    _dst[20] = _TMP7.xyz;
    _dst[21] = _TMP7.xyz;
    _dst[22] = _TMP7.xyz;
    _dst[23] = _TMP7.xyz;
    _dst[24] = _TMP7.xyz;
    _dst[25] = _TMP7.xyz;
    _dst[26] = _TMP7.xyz;
    _dst[27] = _TMP7.xyz;
    _dst[28] = _TMP7.xyz;
    _dst[29] = _TMP7.xyz;
    _dst[30] = _TMP7.xyz;
    _dst[31] = _TMP7.xyz;
    _dst[32] = _TMP7.xyz;
    _dst[33] = _TMP7.xyz;
    _dst[34] = _TMP7.xyz;
    _dst[35] = _TMP7.xyz;
    _TMP298 = bvec4(_blendResult.x != 0, _blendResult.y != 0, _blendResult.z != 0, _blendResult.w != 0);
    _TMP1369 = _TMP298.x || _TMP298.y || _TMP298.z || _TMP298.w;
    if (_TMP1369) { 
        _diff0706 = _TMP8.xyz - _TMP9.xyz;
        _Y0706 = dot(_diff0706, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0706 = 5.31519055E-01*(_diff0706.z - _Y0706);
        _Cr0706 = 6.78149998E-01*(_diff0706.x - _Y0706);
        _a0710 = _Y0706*_Y0706 + _Cb0706*_Cb0706 + _Cr0706*_Cr0706;
        _TMP300 = inversesqrt(_a0710);
        _TMP705 = 1.00000000E+00/_TMP300;
        _diff0714 = _TMP10.xyz - _TMP5.xyz;
        _Y0714 = dot(_diff0714, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0714 = 5.31519055E-01*(_diff0714.z - _Y0714);
        _Cr0714 = 6.78149998E-01*(_diff0714.x - _Y0714);
        _a0718 = _Y0714*_Y0714 + _Cb0714*_Cb0714 + _Cr0714*_Cr0714;
        _TMP300 = inversesqrt(_a0718);
        _TMP713 = 1.00000000E+00/_TMP300;
        _haveShallowLine1 = 2.20000005E+00*_TMP705 <= _TMP713 && _TMP349 != _TMP365 && _TMP369 != _TMP365;
        _haveSteepLine1 = 2.20000005E+00*_TMP713 <= _TMP705 && _TMP349 != _TMP381 && _TMP377 != _TMP381;
        _needBlend1 = _blendResult.z != 0;
        _diff0724 = _TMP7.xyz - _TMP9.xyz;
        _Y0724 = dot(_diff0724, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0724 = 5.31519055E-01*(_diff0724.z - _Y0724);
        _Cr0724 = 6.78149998E-01*(_diff0724.x - _Y0724);
        _a0728 = _Y0724*_Y0724 + _Cb0724*_Cb0724 + _Cr0724*_Cr0724;
        _TMP300 = inversesqrt(_a0728);
        _TMP723 = 1.00000000E+00/_TMP300;
        _TMP69 = _TMP723 < 1.17647059E-01;
        _diff0734 = _TMP7.xyz - _TMP5.xyz;
        _Y0734 = dot(_diff0734, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0734 = 5.31519055E-01*(_diff0734.z - _Y0734);
        _Cr0734 = 6.78149998E-01*(_diff0734.x - _Y0734);
        _a0738 = _Y0734*_Y0734 + _Cb0734*_Cb0734 + _Cr0734*_Cr0734;
        _TMP300 = inversesqrt(_a0738);
        _TMP733 = 1.00000000E+00/_TMP300;
        _TMP70 = _TMP733 < 1.17647059E-01;
        _diff0744 = _TMP9.xyz - _TMP10.xyz;
        _Y0744 = dot(_diff0744, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0744 = 5.31519055E-01*(_diff0744.z - _Y0744);
        _Cr0744 = 6.78149998E-01*(_diff0744.x - _Y0744);
        _a0748 = _Y0744*_Y0744 + _Cb0744*_Cb0744 + _Cr0744*_Cr0744;
        _TMP300 = inversesqrt(_a0748);
        _TMP743 = 1.00000000E+00/_TMP300;
        _TMP71 = _TMP743 < 1.17647059E-01;
        _diff0754 = _TMP10.xyz - _TMP11.xyz;
        _Y0754 = dot(_diff0754, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0754 = 5.31519055E-01*(_diff0754.z - _Y0754);
        _Cr0754 = 6.78149998E-01*(_diff0754.x - _Y0754);
        _a0758 = _Y0754*_Y0754 + _Cb0754*_Cb0754 + _Cr0754*_Cr0754;
        _TMP300 = inversesqrt(_a0758);
        _TMP753 = 1.00000000E+00/_TMP300;
        _TMP72 = _TMP753 < 1.17647059E-01;
        _diff0764 = _TMP11.xyz - _TMP8.xyz;
        _Y0764 = dot(_diff0764, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0764 = 5.31519055E-01*(_diff0764.z - _Y0764);
        _Cr0764 = 6.78149998E-01*(_diff0764.x - _Y0764);
        _a0768 = _Y0764*_Y0764 + _Cb0764*_Cb0764 + _Cr0764*_Cr0764;
        _TMP300 = inversesqrt(_a0768);
        _TMP763 = 1.00000000E+00/_TMP300;
        _TMP73 = _TMP763 < 1.17647059E-01;
        _diff0774 = _TMP8.xyz - _TMP5.xyz;
        _Y0774 = dot(_diff0774, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0774 = 5.31519055E-01*(_diff0774.z - _Y0774);
        _Cr0774 = 6.78149998E-01*(_diff0774.x - _Y0774);
        _a0778 = _Y0774*_Y0774 + _Cb0774*_Cb0774 + _Cr0774*_Cr0774;
        _TMP300 = inversesqrt(_a0778);
        _TMP773 = 1.00000000E+00/_TMP300;
        _TMP74 = _TMP773 < 1.17647059E-01;
        _diff0784 = _TMP7.xyz - _TMP11.xyz;
        _Y0784 = dot(_diff0784, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0784 = 5.31519055E-01*(_diff0784.z - _Y0784);
        _Cr0784 = 6.78149998E-01*(_diff0784.x - _Y0784);
        _a0788 = _Y0784*_Y0784 + _Cb0784*_Cb0784 + _Cr0784*_Cr0784;
        _TMP300 = inversesqrt(_a0788);
        _TMP783 = 1.00000000E+00/_TMP300;
        _TMP75 = _TMP783 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.z >= 2 || !(_blendResult.y != 0 && !_TMP69 || _blendResult.w != 0 && !_TMP70 || _TMP71 && _TMP72 && _TMP73 && _TMP74 && !_TMP75);
        _diff0792 = _TMP7.xyz - _TMP8.xyz;
        _Y0792 = dot(_diff0792, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0792 = 5.31519055E-01*(_diff0792.z - _Y0792);
        _Cr0792 = 6.78149998E-01*(_diff0792.x - _Y0792);
        _a0796 = _Y0792*_Y0792 + _Cb0792*_Cb0792 + _Cr0792*_Cr0792;
        _TMP300 = inversesqrt(_a0796);
        _TMP791 = 1.00000000E+00/_TMP300;
        _diff0800 = _TMP7.xyz - _TMP10.xyz;
        _Y0800 = dot(_diff0800, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0800 = 5.31519055E-01*(_diff0800.z - _Y0800);
        _Cr0800 = 6.78149998E-01*(_diff0800.x - _Y0800);
        _a0804 = _Y0800*_Y0800 + _Cb0800*_Cb0800 + _Cr0800*_Cr0800;
        _TMP300 = inversesqrt(_a0804);
        _TMP799 = 1.00000000E+00/_TMP300;
        if (_TMP791 <= _TMP799) { 
            _TMP76 = _TMP8.xyz;
        } else {
            _TMP76 = _TMP10.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP79 = 2.50000000E-01;
        } else {
            _TMP79 = 0.00000000E+00;
        } 
        _a0808 = float(_TMP79);
        _TMP807 = _TMP7.xyz + _a0808*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP81 = 7.50000000E-01;
            } else {
                if (_haveShallowLine1) { 
                    _TMP82 = 2.50000000E-01;
                } else {
                    _TMP82 = 0.00000000E+00;
                } 
                _TMP81 = _TMP82;
            } 
            _TMP80 = _TMP81;
        } else {
            _TMP80 = 0.00000000E+00;
        } 
        _a0812 = float(_TMP80);
        _TMP811 = _TMP7.xyz + _a0812*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (!_haveShallowLine1 && !_haveSteepLine1) { 
                _TMP84 = 5.00000000E-01;
            } else {
                _TMP84 = 1.00000000E+00;
            } 
            _TMP83 = _TMP84;
        } else {
            _TMP83 = 0.00000000E+00;
        } 
        _a0816 = float(_TMP83);
        _TMP815 = _TMP7.xyz + _a0816*(_TMP76 - _TMP7.xyz);
        _dst[12] = _TMP815;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP86 = 7.50000000E-01;
            } else {
                if (_haveSteepLine1) { 
                    _TMP87 = 2.50000000E-01;
                } else {
                    _TMP87 = 0.00000000E+00;
                } 
                _TMP86 = _TMP87;
            } 
            _TMP85 = _TMP86;
        } else {
            _TMP85 = 0.00000000E+00;
        } 
        _a0820 = float(_TMP85);
        _TMP819 = _TMP7.xyz + _a0820*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP88 = 2.50000000E-01;
        } else {
            _TMP88 = 0.00000000E+00;
        } 
        _a0824 = float(_TMP88);
        _TMP823 = _TMP7.xyz + _a0824*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP89 = 2.50000000E-01;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a0828 = float(_TMP89);
        _TMP827 = _TMP7.xyz + _a0828*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP90 = 7.50000000E-01;
        } else {
            _TMP90 = 0.00000000E+00;
        } 
        _a0832 = float(_TMP90);
        _TMP831 = _TMP7.xyz + _a0832*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP91 = 1.00000000E+00;
        } else {
            _TMP91 = 0.00000000E+00;
        } 
        _a0836 = float(_TMP91);
        _TMP835 = _TMP7.xyz + _a0836*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP94 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP95 = 7.50000000E-01;
                    } else {
                        _TMP95 = 5.00000000E-01;
                    } 
                    _TMP94 = _TMP95;
                } 
                _TMP93 = _TMP94;
            } else {
                _TMP93 = 5.65203466E-02;
            } 
            _TMP92 = _TMP93;
        } else {
            _TMP92 = 0.00000000E+00;
        } 
        _a0840 = float(_TMP92);
        _TMP839 = _TMP7.xyz + _a0840*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP97 = 1.00000000E+00;
            } else {
                _TMP97 = 4.23637211E-01;
            } 
            _TMP96 = _TMP97;
        } else {
            _TMP96 = 0.00000000E+00;
        } 
        _a0844 = float(_TMP96);
        _TMP843 = _TMP7.xyz + _a0844*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP99 = 1.00000000E+00;
            } else {
                _TMP99 = 9.71101403E-01;
            } 
            _TMP98 = _TMP99;
        } else {
            _TMP98 = 0.00000000E+00;
        } 
        _a0848 = float(_TMP98);
        _TMP847 = _TMP7.xyz + _a0848*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP101 = 1.00000000E+00;
            } else {
                _TMP101 = 4.23637211E-01;
            } 
            _TMP100 = _TMP101;
        } else {
            _TMP100 = 0.00000000E+00;
        } 
        _a0852 = float(_TMP100);
        _TMP851 = _TMP7.xyz + _a0852*(_TMP76 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP104 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP105 = 7.50000000E-01;
                    } else {
                        _TMP105 = 5.00000000E-01;
                    } 
                    _TMP104 = _TMP105;
                } 
                _TMP103 = _TMP104;
            } else {
                _TMP103 = 5.65203466E-02;
            } 
            _TMP102 = _TMP103;
        } else {
            _TMP102 = 0.00000000E+00;
        } 
        _a0856 = float(_TMP102);
        _TMP855 = _TMP7.xyz + _a0856*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP106 = 1.00000000E+00;
        } else {
            _TMP106 = 0.00000000E+00;
        } 
        _a0860 = float(_TMP106);
        _TMP859 = _TMP7.xyz + _a0860*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP107 = 7.50000000E-01;
        } else {
            _TMP107 = 0.00000000E+00;
        } 
        _a0864 = float(_TMP107);
        _TMP863 = _TMP7.xyz + _a0864*(_TMP76 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP108 = 2.50000000E-01;
        } else {
            _TMP108 = 0.00000000E+00;
        } 
        _a0868 = float(_TMP108);
        _TMP867 = _TMP7.xyz + _a0868*(_TMP76 - _TMP7.xyz);
        _diff0872 = _TMP4.xyz - _TMP11.xyz;
        _Y0872 = dot(_diff0872, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0872 = 5.31519055E-01*(_diff0872.z - _Y0872);
        _Cr0872 = 6.78149998E-01*(_diff0872.x - _Y0872);
        _a0876 = _Y0872*_Y0872 + _Cb0872*_Cb0872 + _Cr0872*_Cr0872;
        _TMP300 = inversesqrt(_a0876);
        _TMP871 = 1.00000000E+00/_TMP300;
        _diff0880 = _TMP8.xyz - _TMP3.xyz;
        _Y0880 = dot(_diff0880, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0880 = 5.31519055E-01*(_diff0880.z - _Y0880);
        _Cr0880 = 6.78149998E-01*(_diff0880.x - _Y0880);
        _a0884 = _Y0880*_Y0880 + _Cb0880*_Cb0880 + _Cr0880*_Cr0880;
        _TMP300 = inversesqrt(_a0884);
        _TMP879 = 1.00000000E+00/_TMP300;
        _haveShallowLine1 = 2.20000005E+00*_TMP871 <= _TMP879 && _TMP349 != _TMP357 && _TMP361 != _TMP357;
        _haveSteepLine1 = 2.20000005E+00*_TMP879 <= _TMP871 && _TMP349 != _TMP373 && _TMP369 != _TMP373;
        _needBlend1 = _blendResult.y != 0;
        _diff0890 = _TMP7.xyz - _TMP11.xyz;
        _Y0890 = dot(_diff0890, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0890 = 5.31519055E-01*(_diff0890.z - _Y0890);
        _Cr0890 = 6.78149998E-01*(_diff0890.x - _Y0890);
        _a0894 = _Y0890*_Y0890 + _Cb0890*_Cb0890 + _Cr0890*_Cr0890;
        _TMP300 = inversesqrt(_a0894);
        _TMP889 = 1.00000000E+00/_TMP300;
        _TMP109 = _TMP889 < 1.17647059E-01;
        _diff0900 = _TMP7.xyz - _TMP3.xyz;
        _Y0900 = dot(_diff0900, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0900 = 5.31519055E-01*(_diff0900.z - _Y0900);
        _Cr0900 = 6.78149998E-01*(_diff0900.x - _Y0900);
        _a0904 = _Y0900*_Y0900 + _Cb0900*_Cb0900 + _Cr0900*_Cr0900;
        _TMP300 = inversesqrt(_a0904);
        _TMP899 = 1.00000000E+00/_TMP300;
        _TMP110 = _TMP899 < 1.17647059E-01;
        _diff0910 = _TMP11.xyz - _TMP8.xyz;
        _Y0910 = dot(_diff0910, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0910 = 5.31519055E-01*(_diff0910.z - _Y0910);
        _Cr0910 = 6.78149998E-01*(_diff0910.x - _Y0910);
        _a0914 = _Y0910*_Y0910 + _Cb0910*_Cb0910 + _Cr0910*_Cr0910;
        _TMP300 = inversesqrt(_a0914);
        _TMP909 = 1.00000000E+00/_TMP300;
        _TMP111 = _TMP909 < 1.17647059E-01;
        _diff0920 = _TMP8.xyz - _TMP5.xyz;
        _Y0920 = dot(_diff0920, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0920 = 5.31519055E-01*(_diff0920.z - _Y0920);
        _Cr0920 = 6.78149998E-01*(_diff0920.x - _Y0920);
        _a0924 = _Y0920*_Y0920 + _Cb0920*_Cb0920 + _Cr0920*_Cr0920;
        _TMP300 = inversesqrt(_a0924);
        _TMP919 = 1.00000000E+00/_TMP300;
        _TMP112 = _TMP919 < 1.17647059E-01;
        _diff0930 = _TMP5.xyz - _TMP4.xyz;
        _Y0930 = dot(_diff0930, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0930 = 5.31519055E-01*(_diff0930.z - _Y0930);
        _Cr0930 = 6.78149998E-01*(_diff0930.x - _Y0930);
        _a0934 = _Y0930*_Y0930 + _Cb0930*_Cb0930 + _Cr0930*_Cr0930;
        _TMP300 = inversesqrt(_a0934);
        _TMP929 = 1.00000000E+00/_TMP300;
        _TMP113 = _TMP929 < 1.17647059E-01;
        _diff0940 = _TMP4.xyz - _TMP3.xyz;
        _Y0940 = dot(_diff0940, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0940 = 5.31519055E-01*(_diff0940.z - _Y0940);
        _Cr0940 = 6.78149998E-01*(_diff0940.x - _Y0940);
        _a0944 = _Y0940*_Y0940 + _Cb0940*_Cb0940 + _Cr0940*_Cr0940;
        _TMP300 = inversesqrt(_a0944);
        _TMP939 = 1.00000000E+00/_TMP300;
        _TMP114 = _TMP939 < 1.17647059E-01;
        _diff0950 = _TMP7.xyz - _TMP5.xyz;
        _Y0950 = dot(_diff0950, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0950 = 5.31519055E-01*(_diff0950.z - _Y0950);
        _Cr0950 = 6.78149998E-01*(_diff0950.x - _Y0950);
        _a0954 = _Y0950*_Y0950 + _Cb0950*_Cb0950 + _Cr0950*_Cr0950;
        _TMP300 = inversesqrt(_a0954);
        _TMP949 = 1.00000000E+00/_TMP300;
        _TMP115 = _TMP949 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.y >= 2 || !(_blendResult.x != 0 && !_TMP109 || _blendResult.z != 0 && !_TMP110 || _TMP111 && _TMP112 && _TMP113 && _TMP114 && !_TMP115);
        _diff0958 = _TMP7.xyz - _TMP4.xyz;
        _Y0958 = dot(_diff0958, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0958 = 5.31519055E-01*(_diff0958.z - _Y0958);
        _Cr0958 = 6.78149998E-01*(_diff0958.x - _Y0958);
        _a0962 = _Y0958*_Y0958 + _Cb0958*_Cb0958 + _Cr0958*_Cr0958;
        _TMP300 = inversesqrt(_a0962);
        _TMP957 = 1.00000000E+00/_TMP300;
        _diff0966 = _TMP7.xyz - _TMP8.xyz;
        _Y0966 = dot(_diff0966, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0966 = 5.31519055E-01*(_diff0966.z - _Y0966);
        _Cr0966 = 6.78149998E-01*(_diff0966.x - _Y0966);
        _a0970 = _Y0966*_Y0966 + _Cb0966*_Cb0966 + _Cr0966*_Cr0966;
        _TMP300 = inversesqrt(_a0970);
        _TMP965 = 1.00000000E+00/_TMP300;
        if (_TMP957 <= _TMP965) { 
            _TMP116 = _TMP4.xyz;
        } else {
            _TMP116 = _TMP8.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP119 = 2.50000000E-01;
        } else {
            _TMP119 = 0.00000000E+00;
        } 
        _a0974 = float(_TMP119);
        _TMP973 = _TMP7.xyz + _a0974*(_TMP116 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP121 = 7.50000000E-01;
            } else {
                if (_haveShallowLine1) { 
                    _TMP122 = 2.50000000E-01;
                } else {
                    _TMP122 = 0.00000000E+00;
                } 
                _TMP121 = _TMP122;
            } 
            _TMP120 = _TMP121;
        } else {
            _TMP120 = 0.00000000E+00;
        } 
        _a0978 = float(_TMP120);
        _TMP977 = _TMP7.xyz + _a0978*(_TMP116 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (!_haveShallowLine1 && !_haveSteepLine1) { 
                _TMP124 = 5.00000000E-01;
            } else {
                _TMP124 = 1.00000000E+00;
            } 
            _TMP123 = _TMP124;
        } else {
            _TMP123 = 0.00000000E+00;
        } 
        _a0982 = float(_TMP123);
        _TMP981 = _TMP7.xyz + _a0982*(_TMP116 - _TMP7.xyz);
        _dst[9] = _TMP981;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP126 = 7.50000000E-01;
            } else {
                if (_haveSteepLine1) { 
                    _TMP127 = 2.50000000E-01;
                } else {
                    _TMP127 = 0.00000000E+00;
                } 
                _TMP126 = _TMP127;
            } 
            _TMP125 = _TMP126;
        } else {
            _TMP125 = 0.00000000E+00;
        } 
        _a0986 = float(_TMP125);
        _TMP985 = _TMP807 + _a0986*(_TMP116 - _TMP807);
        _dst[10] = _TMP985;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP128 = 2.50000000E-01;
        } else {
            _TMP128 = 0.00000000E+00;
        } 
        _a0990 = float(_TMP128);
        _TMP989 = _TMP811 + _a0990*(_TMP116 - _TMP811);
        _dst[11] = _TMP989;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP129 = 2.50000000E-01;
        } else {
            _TMP129 = 0.00000000E+00;
        } 
        _a0994 = float(_TMP129);
        _TMP993 = _TMP7.xyz + _a0994*(_TMP116 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP130 = 7.50000000E-01;
        } else {
            _TMP130 = 0.00000000E+00;
        } 
        _a0998 = float(_TMP130);
        _TMP997 = _TMP7.xyz + _a0998*(_TMP116 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP131 = 1.00000000E+00;
        } else {
            _TMP131 = 0.00000000E+00;
        } 
        _a1002 = float(_TMP131);
        _TMP1001 = _TMP7.xyz + _a1002*(_TMP116 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP134 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP135 = 7.50000000E-01;
                    } else {
                        _TMP135 = 5.00000000E-01;
                    } 
                    _TMP134 = _TMP135;
                } 
                _TMP133 = _TMP134;
            } else {
                _TMP133 = 5.65203466E-02;
            } 
            _TMP132 = _TMP133;
        } else {
            _TMP132 = 0.00000000E+00;
        } 
        _a1006 = float(_TMP132);
        _TMP1005 = _TMP7.xyz + _a1006*(_TMP116 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP137 = 1.00000000E+00;
            } else {
                _TMP137 = 4.23637211E-01;
            } 
            _TMP136 = _TMP137;
        } else {
            _TMP136 = 0.00000000E+00;
        } 
        _a1010 = float(_TMP136);
        _TMP1009 = _TMP7.xyz + _a1010*(_TMP116 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP139 = 1.00000000E+00;
            } else {
                _TMP139 = 9.71101403E-01;
            } 
            _TMP138 = _TMP139;
        } else {
            _TMP138 = 0.00000000E+00;
        } 
        _a1014 = float(_TMP138);
        _TMP1013 = _TMP827 + _a1014*(_TMP116 - _TMP827);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP141 = 1.00000000E+00;
            } else {
                _TMP141 = 4.23637211E-01;
            } 
            _TMP140 = _TMP141;
        } else {
            _TMP140 = 0.00000000E+00;
        } 
        _a1018 = float(_TMP140);
        _TMP1017 = _TMP831 + _a1018*(_TMP116 - _TMP831);
        _dst[26] = _TMP1017;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP144 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP145 = 7.50000000E-01;
                    } else {
                        _TMP145 = 5.00000000E-01;
                    } 
                    _TMP144 = _TMP145;
                } 
                _TMP143 = _TMP144;
            } else {
                _TMP143 = 5.65203466E-02;
            } 
            _TMP142 = _TMP143;
        } else {
            _TMP142 = 0.00000000E+00;
        } 
        _a1022 = float(_TMP142);
        _TMP1021 = _TMP835 + _a1022*(_TMP116 - _TMP835);
        _dst[27] = _TMP1021;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP146 = 1.00000000E+00;
        } else {
            _TMP146 = 0.00000000E+00;
        } 
        _a1026 = float(_TMP146);
        _TMP1025 = _TMP839 + _a1026*(_TMP116 - _TMP839);
        _dst[28] = _TMP1025;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP147 = 7.50000000E-01;
        } else {
            _TMP147 = 0.00000000E+00;
        } 
        _a1030 = float(_TMP147);
        _TMP1029 = _TMP843 + _a1030*(_TMP116 - _TMP843);
        _dst[29] = _TMP1029;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP148 = 2.50000000E-01;
        } else {
            _TMP148 = 0.00000000E+00;
        } 
        _a1034 = float(_TMP148);
        _TMP1033 = _TMP847 + _a1034*(_TMP116 - _TMP847);
        _diff1038 = _TMP6.xyz - _TMP5.xyz;
        _Y1038 = dot(_diff1038, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1038 = 5.31519055E-01*(_diff1038.z - _Y1038);
        _Cr1038 = 6.78149998E-01*(_diff1038.x - _Y1038);
        _a1042 = _Y1038*_Y1038 + _Cb1038*_Cb1038 + _Cr1038*_Cr1038;
        _TMP300 = inversesqrt(_a1042);
        _TMP1037 = 1.00000000E+00/_TMP300;
        _diff1046 = _TMP4.xyz - _TMP9.xyz;
        _Y1046 = dot(_diff1046, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1046 = 5.31519055E-01*(_diff1046.z - _Y1046);
        _Cr1046 = 6.78149998E-01*(_diff1046.x - _Y1046);
        _a1050 = _Y1046*_Y1046 + _Cb1046*_Cb1046 + _Cr1046*_Cr1046;
        _TMP300 = inversesqrt(_a1050);
        _TMP1045 = 1.00000000E+00/_TMP300;
        _haveShallowLine1 = 2.20000005E+00*_TMP1037 <= _TMP1045 && _TMP349 != _TMP381 && _TMP353 != _TMP381;
        _haveSteepLine1 = 2.20000005E+00*_TMP1045 <= _TMP1037 && _TMP349 != _TMP365 && _TMP361 != _TMP365;
        _needBlend1 = _blendResult.x != 0;
        _diff1056 = _TMP7.xyz - _TMP5.xyz;
        _Y1056 = dot(_diff1056, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1056 = 5.31519055E-01*(_diff1056.z - _Y1056);
        _Cr1056 = 6.78149998E-01*(_diff1056.x - _Y1056);
        _a1060 = _Y1056*_Y1056 + _Cb1056*_Cb1056 + _Cr1056*_Cr1056;
        _TMP300 = inversesqrt(_a1060);
        _TMP1055 = 1.00000000E+00/_TMP300;
        _TMP149 = _TMP1055 < 1.17647059E-01;
        _diff1066 = _TMP7.xyz - _TMP9.xyz;
        _Y1066 = dot(_diff1066, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1066 = 5.31519055E-01*(_diff1066.z - _Y1066);
        _Cr1066 = 6.78149998E-01*(_diff1066.x - _Y1066);
        _a1070 = _Y1066*_Y1066 + _Cb1066*_Cb1066 + _Cr1066*_Cr1066;
        _TMP300 = inversesqrt(_a1070);
        _TMP1065 = 1.00000000E+00/_TMP300;
        _TMP150 = _TMP1065 < 1.17647059E-01;
        _diff1076 = _TMP5.xyz - _TMP4.xyz;
        _Y1076 = dot(_diff1076, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1076 = 5.31519055E-01*(_diff1076.z - _Y1076);
        _Cr1076 = 6.78149998E-01*(_diff1076.x - _Y1076);
        _a1080 = _Y1076*_Y1076 + _Cb1076*_Cb1076 + _Cr1076*_Cr1076;
        _TMP300 = inversesqrt(_a1080);
        _TMP1075 = 1.00000000E+00/_TMP300;
        _TMP151 = _TMP1075 < 1.17647059E-01;
        _diff1086 = _TMP4.xyz - _TMP3.xyz;
        _Y1086 = dot(_diff1086, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1086 = 5.31519055E-01*(_diff1086.z - _Y1086);
        _Cr1086 = 6.78149998E-01*(_diff1086.x - _Y1086);
        _a1090 = _Y1086*_Y1086 + _Cb1086*_Cb1086 + _Cr1086*_Cr1086;
        _TMP300 = inversesqrt(_a1090);
        _TMP1085 = 1.00000000E+00/_TMP300;
        _TMP152 = _TMP1085 < 1.17647059E-01;
        _diff1096 = _TMP3.xyz - _TMP6.xyz;
        _Y1096 = dot(_diff1096, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1096 = 5.31519055E-01*(_diff1096.z - _Y1096);
        _Cr1096 = 6.78149998E-01*(_diff1096.x - _Y1096);
        _a1100 = _Y1096*_Y1096 + _Cb1096*_Cb1096 + _Cr1096*_Cr1096;
        _TMP300 = inversesqrt(_a1100);
        _TMP1095 = 1.00000000E+00/_TMP300;
        _TMP153 = _TMP1095 < 1.17647059E-01;
        _diff1106 = _TMP6.xyz - _TMP9.xyz;
        _Y1106 = dot(_diff1106, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1106 = 5.31519055E-01*(_diff1106.z - _Y1106);
        _Cr1106 = 6.78149998E-01*(_diff1106.x - _Y1106);
        _a1110 = _Y1106*_Y1106 + _Cb1106*_Cb1106 + _Cr1106*_Cr1106;
        _TMP300 = inversesqrt(_a1110);
        _TMP1105 = 1.00000000E+00/_TMP300;
        _TMP154 = _TMP1105 < 1.17647059E-01;
        _diff1116 = _TMP7.xyz - _TMP3.xyz;
        _Y1116 = dot(_diff1116, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1116 = 5.31519055E-01*(_diff1116.z - _Y1116);
        _Cr1116 = 6.78149998E-01*(_diff1116.x - _Y1116);
        _a1120 = _Y1116*_Y1116 + _Cb1116*_Cb1116 + _Cr1116*_Cr1116;
        _TMP300 = inversesqrt(_a1120);
        _TMP1115 = 1.00000000E+00/_TMP300;
        _TMP155 = _TMP1115 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.x >= 2 || !(_blendResult.w != 0 && !_TMP149 || _blendResult.y != 0 && !_TMP150 || _TMP151 && _TMP152 && _TMP153 && _TMP154 && !_TMP155);
        _diff1124 = _TMP7.xyz - _TMP6.xyz;
        _Y1124 = dot(_diff1124, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1124 = 5.31519055E-01*(_diff1124.z - _Y1124);
        _Cr1124 = 6.78149998E-01*(_diff1124.x - _Y1124);
        _a1128 = _Y1124*_Y1124 + _Cb1124*_Cb1124 + _Cr1124*_Cr1124;
        _TMP300 = inversesqrt(_a1128);
        _TMP1123 = 1.00000000E+00/_TMP300;
        _diff1132 = _TMP7.xyz - _TMP4.xyz;
        _Y1132 = dot(_diff1132, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1132 = 5.31519055E-01*(_diff1132.z - _Y1132);
        _Cr1132 = 6.78149998E-01*(_diff1132.x - _Y1132);
        _a1136 = _Y1132*_Y1132 + _Cb1132*_Cb1132 + _Cr1132*_Cr1132;
        _TMP300 = inversesqrt(_a1136);
        _TMP1131 = 1.00000000E+00/_TMP300;
        if (_TMP1123 <= _TMP1131) { 
            _TMP156 = _TMP6.xyz;
        } else {
            _TMP156 = _TMP4.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP159 = 2.50000000E-01;
        } else {
            _TMP159 = 0.00000000E+00;
        } 
        _a1140 = float(_TMP159);
        _TMP1139 = _TMP7.xyz + _a1140*(_TMP156 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP161 = 7.50000000E-01;
            } else {
                if (_haveShallowLine1) { 
                    _TMP162 = 2.50000000E-01;
                } else {
                    _TMP162 = 0.00000000E+00;
                } 
                _TMP161 = _TMP162;
            } 
            _TMP160 = _TMP161;
        } else {
            _TMP160 = 0.00000000E+00;
        } 
        _a1144 = float(_TMP160);
        _TMP1143 = _TMP7.xyz + _a1144*(_TMP156 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1) { 
            if (!_haveShallowLine1 && !_haveSteepLine1) { 
                _TMP164 = 5.00000000E-01;
            } else {
                _TMP164 = 1.00000000E+00;
            } 
            _TMP163 = _TMP164;
        } else {
            _TMP163 = 0.00000000E+00;
        } 
        _a1148 = float(_TMP163);
        _TMP1147 = _TMP7.xyz + _a1148*(_TMP156 - _TMP7.xyz);
        _dst[6] = _TMP1147;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP166 = 7.50000000E-01;
            } else {
                if (_haveSteepLine1) { 
                    _TMP167 = 2.50000000E-01;
                } else {
                    _TMP167 = 0.00000000E+00;
                } 
                _TMP166 = _TMP167;
            } 
            _TMP165 = _TMP166;
        } else {
            _TMP165 = 0.00000000E+00;
        } 
        _a1152 = float(_TMP165);
        _TMP1151 = _TMP973 + _a1152*(_TMP156 - _TMP973);
        _dst[7] = _TMP1151;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP168 = 2.50000000E-01;
        } else {
            _TMP168 = 0.00000000E+00;
        } 
        _a1156 = float(_TMP168);
        _TMP1155 = _TMP977 + _a1156*(_TMP156 - _TMP977);
        _dst[8] = _TMP1155;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP169 = 2.50000000E-01;
        } else {
            _TMP169 = 0.00000000E+00;
        } 
        _a1160 = float(_TMP169);
        _TMP1159 = _TMP867 + _a1160*(_TMP156 - _TMP867);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP170 = 7.50000000E-01;
        } else {
            _TMP170 = 0.00000000E+00;
        } 
        _a1164 = float(_TMP170);
        _TMP1163 = _TMP7.xyz + _a1164*(_TMP156 - _TMP7.xyz);
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP171 = 1.00000000E+00;
        } else {
            _TMP171 = 0.00000000E+00;
        } 
        _a1168 = float(_TMP171);
        _TMP1167 = _TMP7.xyz + _a1168*(_TMP156 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP174 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP175 = 7.50000000E-01;
                    } else {
                        _TMP175 = 5.00000000E-01;
                    } 
                    _TMP174 = _TMP175;
                } 
                _TMP173 = _TMP174;
            } else {
                _TMP173 = 5.65203466E-02;
            } 
            _TMP172 = _TMP173;
        } else {
            _TMP172 = 0.00000000E+00;
        } 
        _a1172 = float(_TMP172);
        _TMP1171 = _TMP7.xyz + _a1172*(_TMP156 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP177 = 1.00000000E+00;
            } else {
                _TMP177 = 4.23637211E-01;
            } 
            _TMP176 = _TMP177;
        } else {
            _TMP176 = 0.00000000E+00;
        } 
        _a1176 = float(_TMP176);
        _TMP1175 = _TMP7.xyz + _a1176*(_TMP156 - _TMP7.xyz);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP179 = 1.00000000E+00;
            } else {
                _TMP179 = 9.71101403E-01;
            } 
            _TMP178 = _TMP179;
        } else {
            _TMP178 = 0.00000000E+00;
        } 
        _a1180 = float(_TMP178);
        _TMP1179 = _TMP993 + _a1180*(_TMP156 - _TMP993);
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP181 = 1.00000000E+00;
            } else {
                _TMP181 = 4.23637211E-01;
            } 
            _TMP180 = _TMP181;
        } else {
            _TMP180 = 0.00000000E+00;
        } 
        _a1184 = float(_TMP180);
        _TMP1183 = _TMP997 + _a1184*(_TMP156 - _TMP997);
        _dst[21] = _TMP1183;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP184 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP185 = 7.50000000E-01;
                    } else {
                        _TMP185 = 5.00000000E-01;
                    } 
                    _TMP184 = _TMP185;
                } 
                _TMP183 = _TMP184;
            } else {
                _TMP183 = 5.65203466E-02;
            } 
            _TMP182 = _TMP183;
        } else {
            _TMP182 = 0.00000000E+00;
        } 
        _a1188 = float(_TMP182);
        _TMP1187 = _TMP1001 + _a1188*(_TMP156 - _TMP1001);
        _dst[22] = _TMP1187;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP186 = 1.00000000E+00;
        } else {
            _TMP186 = 0.00000000E+00;
        } 
        _a1192 = float(_TMP186);
        _TMP1191 = _TMP1005 + _a1192*(_TMP156 - _TMP1005);
        _dst[23] = _TMP1191;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP187 = 7.50000000E-01;
        } else {
            _TMP187 = 0.00000000E+00;
        } 
        _a1196 = float(_TMP187);
        _TMP1195 = _TMP1009 + _a1196*(_TMP156 - _TMP1009);
        _dst[24] = _TMP1195;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP188 = 2.50000000E-01;
        } else {
            _TMP188 = 0.00000000E+00;
        } 
        _a1200 = float(_TMP188);
        _TMP1199 = _TMP1013 + _a1200*(_TMP156 - _TMP1013);
        _dst[25] = _TMP1199;
        _diff1204 = _TMP10.xyz - _TMP3.xyz;
        _Y1204 = dot(_diff1204, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1204 = 5.31519055E-01*(_diff1204.z - _Y1204);
        _Cr1204 = 6.78149998E-01*(_diff1204.x - _Y1204);
        _a1208 = _Y1204*_Y1204 + _Cb1204*_Cb1204 + _Cr1204*_Cr1204;
        _TMP300 = inversesqrt(_a1208);
        _TMP1203 = 1.00000000E+00/_TMP300;
        _diff1212 = _TMP6.xyz - _TMP11.xyz;
        _Y1212 = dot(_diff1212, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1212 = 5.31519055E-01*(_diff1212.z - _Y1212);
        _Cr1212 = 6.78149998E-01*(_diff1212.x - _Y1212);
        _a1216 = _Y1212*_Y1212 + _Cb1212*_Cb1212 + _Cr1212*_Cr1212;
        _TMP300 = inversesqrt(_a1216);
        _TMP1211 = 1.00000000E+00/_TMP300;
        _haveShallowLine1 = 2.20000005E+00*_TMP1203 <= _TMP1211 && _TMP349 != _TMP373 && _TMP377 != _TMP373;
        _haveSteepLine1 = 2.20000005E+00*_TMP1211 <= _TMP1203 && _TMP349 != _TMP357 && _TMP353 != _TMP357;
        _needBlend1 = _blendResult.w != 0;
        _diff1222 = _TMP7.xyz - _TMP3.xyz;
        _Y1222 = dot(_diff1222, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1222 = 5.31519055E-01*(_diff1222.z - _Y1222);
        _Cr1222 = 6.78149998E-01*(_diff1222.x - _Y1222);
        _a1226 = _Y1222*_Y1222 + _Cb1222*_Cb1222 + _Cr1222*_Cr1222;
        _TMP300 = inversesqrt(_a1226);
        _TMP1221 = 1.00000000E+00/_TMP300;
        _TMP189 = _TMP1221 < 1.17647059E-01;
        _diff1232 = _TMP7.xyz - _TMP11.xyz;
        _Y1232 = dot(_diff1232, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1232 = 5.31519055E-01*(_diff1232.z - _Y1232);
        _Cr1232 = 6.78149998E-01*(_diff1232.x - _Y1232);
        _a1236 = _Y1232*_Y1232 + _Cb1232*_Cb1232 + _Cr1232*_Cr1232;
        _TMP300 = inversesqrt(_a1236);
        _TMP1231 = 1.00000000E+00/_TMP300;
        _TMP190 = _TMP1231 < 1.17647059E-01;
        _diff1242 = _TMP3.xyz - _TMP6.xyz;
        _Y1242 = dot(_diff1242, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1242 = 5.31519055E-01*(_diff1242.z - _Y1242);
        _Cr1242 = 6.78149998E-01*(_diff1242.x - _Y1242);
        _a1246 = _Y1242*_Y1242 + _Cb1242*_Cb1242 + _Cr1242*_Cr1242;
        _TMP300 = inversesqrt(_a1246);
        _TMP1241 = 1.00000000E+00/_TMP300;
        _TMP191 = _TMP1241 < 1.17647059E-01;
        _diff1252 = _TMP6.xyz - _TMP9.xyz;
        _Y1252 = dot(_diff1252, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1252 = 5.31519055E-01*(_diff1252.z - _Y1252);
        _Cr1252 = 6.78149998E-01*(_diff1252.x - _Y1252);
        _a1256 = _Y1252*_Y1252 + _Cb1252*_Cb1252 + _Cr1252*_Cr1252;
        _TMP300 = inversesqrt(_a1256);
        _TMP1251 = 1.00000000E+00/_TMP300;
        _TMP192 = _TMP1251 < 1.17647059E-01;
        _diff1262 = _TMP9.xyz - _TMP10.xyz;
        _Y1262 = dot(_diff1262, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1262 = 5.31519055E-01*(_diff1262.z - _Y1262);
        _Cr1262 = 6.78149998E-01*(_diff1262.x - _Y1262);
        _a1266 = _Y1262*_Y1262 + _Cb1262*_Cb1262 + _Cr1262*_Cr1262;
        _TMP300 = inversesqrt(_a1266);
        _TMP1261 = 1.00000000E+00/_TMP300;
        _TMP193 = _TMP1261 < 1.17647059E-01;
        _diff1272 = _TMP10.xyz - _TMP11.xyz;
        _Y1272 = dot(_diff1272, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1272 = 5.31519055E-01*(_diff1272.z - _Y1272);
        _Cr1272 = 6.78149998E-01*(_diff1272.x - _Y1272);
        _a1276 = _Y1272*_Y1272 + _Cb1272*_Cb1272 + _Cr1272*_Cr1272;
        _TMP300 = inversesqrt(_a1276);
        _TMP1271 = 1.00000000E+00/_TMP300;
        _TMP194 = _TMP1271 < 1.17647059E-01;
        _diff1282 = _TMP7.xyz - _TMP9.xyz;
        _Y1282 = dot(_diff1282, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1282 = 5.31519055E-01*(_diff1282.z - _Y1282);
        _Cr1282 = 6.78149998E-01*(_diff1282.x - _Y1282);
        _a1286 = _Y1282*_Y1282 + _Cb1282*_Cb1282 + _Cr1282*_Cr1282;
        _TMP300 = inversesqrt(_a1286);
        _TMP1281 = 1.00000000E+00/_TMP300;
        _TMP195 = _TMP1281 < 1.17647059E-01;
        _doLineBlend1 = _blendResult.w >= 2 || !(_blendResult.z != 0 && !_TMP189 || _blendResult.x != 0 && !_TMP190 || _TMP191 && _TMP192 && _TMP193 && _TMP194 && !_TMP195);
        _diff1290 = _TMP7.xyz - _TMP10.xyz;
        _Y1290 = dot(_diff1290, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1290 = 5.31519055E-01*(_diff1290.z - _Y1290);
        _Cr1290 = 6.78149998E-01*(_diff1290.x - _Y1290);
        _a1294 = _Y1290*_Y1290 + _Cb1290*_Cb1290 + _Cr1290*_Cr1290;
        _TMP300 = inversesqrt(_a1294);
        _TMP1289 = 1.00000000E+00/_TMP300;
        _diff1298 = _TMP7.xyz - _TMP6.xyz;
        _Y1298 = dot(_diff1298, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1298 = 5.31519055E-01*(_diff1298.z - _Y1298);
        _Cr1298 = 6.78149998E-01*(_diff1298.x - _Y1298);
        _a1302 = _Y1298*_Y1298 + _Cb1298*_Cb1298 + _Cr1298*_Cr1298;
        _TMP300 = inversesqrt(_a1302);
        _TMP1297 = 1.00000000E+00/_TMP300;
        if (_TMP1289 <= _TMP1297) { 
            _TMP196 = _TMP10.xyz;
        } else {
            _TMP196 = _TMP6.xyz;
        } 
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP199 = 2.50000000E-01;
        } else {
            _TMP199 = 0.00000000E+00;
        } 
        _a1306 = float(_TMP199);
        _TMP1305 = _TMP819 + _a1306*(_TMP196 - _TMP819);
        _dst[13] = _TMP1305;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveSteepLine1) { 
                _TMP201 = 7.50000000E-01;
            } else {
                if (_haveShallowLine1) { 
                    _TMP202 = 2.50000000E-01;
                } else {
                    _TMP202 = 0.00000000E+00;
                } 
                _TMP201 = _TMP202;
            } 
            _TMP200 = _TMP201;
        } else {
            _TMP200 = 0.00000000E+00;
        } 
        _a1310 = float(_TMP200);
        _TMP1309 = _TMP823 + _a1310*(_TMP196 - _TMP823);
        _dst[14] = _TMP1309;
        if (_needBlend1 && _doLineBlend1) { 
            if (!_haveShallowLine1 && !_haveSteepLine1) { 
                _TMP204 = 5.00000000E-01;
            } else {
                _TMP204 = 1.00000000E+00;
            } 
            _TMP203 = _TMP204;
        } else {
            _TMP203 = 0.00000000E+00;
        } 
        _a1314 = float(_TMP203);
        _TMP1313 = _TMP7.xyz + _a1314*(_TMP196 - _TMP7.xyz);
        _dst[15] = _TMP1313;
        if (_needBlend1 && _doLineBlend1) { 
            if (_haveShallowLine1) { 
                _TMP206 = 7.50000000E-01;
            } else {
                if (_haveSteepLine1) { 
                    _TMP207 = 2.50000000E-01;
                } else {
                    _TMP207 = 0.00000000E+00;
                } 
                _TMP206 = _TMP207;
            } 
            _TMP205 = _TMP206;
        } else {
            _TMP205 = 0.00000000E+00;
        } 
        _a1318 = float(_TMP205);
        _TMP1317 = _TMP1139 + _a1318*(_TMP196 - _TMP1139);
        _dst[4] = _TMP1317;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP208 = 2.50000000E-01;
        } else {
            _TMP208 = 0.00000000E+00;
        } 
        _a1322 = float(_TMP208);
        _TMP1321 = _TMP1143 + _a1322*(_TMP196 - _TMP1143);
        _dst[5] = _TMP1321;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP209 = 2.50000000E-01;
        } else {
            _TMP209 = 0.00000000E+00;
        } 
        _a1326 = float(_TMP209);
        _TMP1325 = _TMP1033 + _a1326*(_TMP196 - _TMP1033);
        _dst[30] = _TMP1325;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP210 = 7.50000000E-01;
        } else {
            _TMP210 = 0.00000000E+00;
        } 
        _a1330 = float(_TMP210);
        _TMP1329 = _TMP851 + _a1330*(_TMP196 - _TMP851);
        _dst[31] = _TMP1329;
        if (_needBlend1 && _doLineBlend1 && _haveSteepLine1) { 
            _TMP211 = 1.00000000E+00;
        } else {
            _TMP211 = 0.00000000E+00;
        } 
        _a1334 = float(_TMP211);
        _TMP1333 = _TMP855 + _a1334*(_TMP196 - _TMP855);
        _dst[32] = _TMP1333;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveSteepLine1) { 
                    _TMP214 = 1.00000000E+00;
                } else {
                    if (_haveShallowLine1) { 
                        _TMP215 = 7.50000000E-01;
                    } else {
                        _TMP215 = 5.00000000E-01;
                    } 
                    _TMP214 = _TMP215;
                } 
                _TMP213 = _TMP214;
            } else {
                _TMP213 = 5.65203466E-02;
            } 
            _TMP212 = _TMP213;
        } else {
            _TMP212 = 0.00000000E+00;
        } 
        _a1338 = float(_TMP212);
        _TMP1337 = _TMP859 + _a1338*(_TMP196 - _TMP859);
        _dst[33] = _TMP1337;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP217 = 1.00000000E+00;
            } else {
                _TMP217 = 4.23637211E-01;
            } 
            _TMP216 = _TMP217;
        } else {
            _TMP216 = 0.00000000E+00;
        } 
        _a1342 = float(_TMP216);
        _TMP1341 = _TMP863 + _a1342*(_TMP196 - _TMP863);
        _dst[34] = _TMP1341;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP219 = 1.00000000E+00;
            } else {
                _TMP219 = 9.71101403E-01;
            } 
            _TMP218 = _TMP219;
        } else {
            _TMP218 = 0.00000000E+00;
        } 
        _a1346 = float(_TMP218);
        _TMP1345 = _TMP1159 + _a1346*(_TMP196 - _TMP1159);
        _dst[35] = _TMP1345;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                _TMP221 = 1.00000000E+00;
            } else {
                _TMP221 = 4.23637211E-01;
            } 
            _TMP220 = _TMP221;
        } else {
            _TMP220 = 0.00000000E+00;
        } 
        _a1350 = float(_TMP220);
        _TMP1349 = _TMP1163 + _a1350*(_TMP196 - _TMP1163);
        _dst[16] = _TMP1349;
        if (_needBlend1) { 
            if (_doLineBlend1) { 
                if (_haveShallowLine1) { 
                    _TMP224 = 1.00000000E+00;
                } else {
                    if (_haveSteepLine1) { 
                        _TMP225 = 7.50000000E-01;
                    } else {
                        _TMP225 = 5.00000000E-01;
                    } 
                    _TMP224 = _TMP225;
                } 
                _TMP223 = _TMP224;
            } else {
                _TMP223 = 5.65203466E-02;
            } 
            _TMP222 = _TMP223;
        } else {
            _TMP222 = 0.00000000E+00;
        } 
        _a1354 = float(_TMP222);
        _TMP1353 = _TMP1167 + _a1354*(_TMP196 - _TMP1167);
        _dst[17] = _TMP1353;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP226 = 1.00000000E+00;
        } else {
            _TMP226 = 0.00000000E+00;
        } 
        _a1358 = float(_TMP226);
        _TMP1357 = _TMP1171 + _a1358*(_TMP196 - _TMP1171);
        _dst[18] = _TMP1357;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP227 = 7.50000000E-01;
        } else {
            _TMP227 = 0.00000000E+00;
        } 
        _a1362 = float(_TMP227);
        _TMP1361 = _TMP1175 + _a1362*(_TMP196 - _TMP1175);
        _dst[19] = _TMP1361;
        if (_needBlend1 && _doLineBlend1 && _haveShallowLine1) { 
            _TMP228 = 2.50000000E-01;
        } else {
            _TMP228 = 0.00000000E+00;
        } 
        _a1366 = float(_TMP228);
        _TMP1365 = _TMP1179 + _a1366*(_TMP196 - _TMP1179);
        _dst[20] = _TMP1365;
    } 
    _TMP229 = float((_f.x >= 1.66666672E-01));
    _TMP1377 = _dst[20] + _TMP229*(_dst[21] - _dst[20]);
    _TMP231 = float((_f.x >= 3.33333343E-01));
    _TMP1383 = _TMP1377 + _TMP231*(_dst[22] - _TMP1377);
    _TMP233 = float((_f.x >= 6.66666687E-01));
    _TMP1389 = _dst[23] + _TMP233*(_dst[24] - _dst[23]);
    _TMP235 = float((_f.x >= 8.33333313E-01));
    _TMP1395 = _TMP1389 + _TMP235*(_dst[25] - _TMP1389);
    _TMP237 = float((_f.x >= 5.00000000E-01));
    _TMP1401 = _TMP1383 + _TMP237*(_TMP1395 - _TMP1383);
    _TMP239 = float((_f.x >= 1.66666672E-01));
    _TMP1407 = _dst[19] + _TMP239*(_dst[6] - _dst[19]);
    _TMP241 = float((_f.x >= 3.33333343E-01));
    _TMP1413 = _TMP1407 + _TMP241*(_dst[7] - _TMP1407);
    _TMP243 = float((_f.x >= 6.66666687E-01));
    _TMP1419 = _dst[8] + _TMP243*(_dst[9] - _dst[8]);
    _TMP245 = float((_f.x >= 8.33333313E-01));
    _TMP1425 = _TMP1419 + _TMP245*(_dst[26] - _TMP1419);
    _TMP247 = float((_f.x >= 5.00000000E-01));
    _TMP1431 = _TMP1413 + _TMP247*(_TMP1425 - _TMP1413);
    _TMP249 = float((_f.y >= 1.66666672E-01));
    _TMP1437 = _TMP1401 + _TMP249*(_TMP1431 - _TMP1401);
    _TMP251 = float((_f.x >= 1.66666672E-01));
    _TMP1443 = _dst[18] + _TMP251*(_dst[5] - _dst[18]);
    _TMP253 = float((_f.x >= 3.33333343E-01));
    _TMP1449 = _TMP1443 + _TMP253*(_TMP7.xyz - _TMP1443);
    _TMP255 = float((_f.x >= 6.66666687E-01));
    _TMP1455 = _TMP7.xyz + _TMP255*(_dst[10] - _TMP7.xyz);
    _TMP257 = float((_f.x >= 8.33333313E-01));
    _TMP1461 = _TMP1455 + _TMP257*(_dst[27] - _TMP1455);
    _TMP259 = float((_f.x >= 5.00000000E-01));
    _TMP1467 = _TMP1449 + _TMP259*(_TMP1461 - _TMP1449);
    _TMP261 = float((_f.y >= 3.33333343E-01));
    _TMP1473 = _TMP1437 + _TMP261*(_TMP1467 - _TMP1437);
    _TMP263 = float((_f.x >= 1.66666672E-01));
    _TMP1479 = _dst[17] + _TMP263*(_dst[4] - _dst[17]);
    _TMP265 = float((_f.x >= 3.33333343E-01));
    _TMP1485 = _TMP1479 + _TMP265*(_TMP7.xyz - _TMP1479);
    _TMP267 = float((_f.x >= 6.66666687E-01));
    _TMP1491 = _TMP7.xyz + _TMP267*(_dst[11] - _TMP7.xyz);
    _TMP269 = float((_f.x >= 8.33333313E-01));
    _TMP1497 = _TMP1491 + _TMP269*(_dst[28] - _TMP1491);
    _TMP271 = float((_f.x >= 5.00000000E-01));
    _TMP1503 = _TMP1485 + _TMP271*(_TMP1497 - _TMP1485);
    _TMP273 = float((_f.x >= 1.66666672E-01));
    _TMP1509 = _dst[16] + _TMP273*(_dst[15] - _dst[16]);
    _TMP275 = float((_f.x >= 3.33333343E-01));
    _TMP1515 = _TMP1509 + _TMP275*(_dst[14] - _TMP1509);
    _TMP277 = float((_f.x >= 6.66666687E-01));
    _TMP1521 = _dst[13] + _TMP277*(_dst[12] - _dst[13]);
    _TMP279 = float((_f.x >= 8.33333313E-01));
    _TMP1527 = _TMP1521 + _TMP279*(_dst[29] - _TMP1521);
    _TMP281 = float((_f.x >= 5.00000000E-01));
    _TMP1533 = _TMP1515 + _TMP281*(_TMP1527 - _TMP1515);
    _TMP283 = float((_f.y >= 6.66666687E-01));
    _TMP1539 = _TMP1503 + _TMP283*(_TMP1533 - _TMP1503);
    _TMP285 = float((_f.x >= 1.66666672E-01));
    _TMP1545 = _dst[35] + _TMP285*(_dst[34] - _dst[35]);
    _TMP287 = float((_f.x >= 3.33333343E-01));
    _TMP1551 = _TMP1545 + _TMP287*(_dst[33] - _TMP1545);
    _TMP289 = float((_f.x >= 6.66666687E-01));
    _TMP1557 = _dst[32] + _TMP289*(_dst[31] - _dst[32]);
    _TMP291 = float((_f.x >= 8.33333313E-01));
    _TMP1563 = _TMP1557 + _TMP291*(_dst[30] - _TMP1557);
    _TMP293 = float((_f.x >= 5.00000000E-01));
    _TMP1569 = _TMP1551 + _TMP293*(_TMP1563 - _TMP1551);
    _TMP295 = float((_f.y >= 8.33333313E-01));
    _TMP1575 = _TMP1539 + _TMP295*(_TMP1569 - _TMP1539);
    _TMP297 = float((_f.y >= 5.00000000E-01));
    _TMP1581 = _TMP1473 + _TMP297*(_TMP1575 - _TMP1473);
    _ret_0 = vec4(_TMP1581.x, _TMP1581.y, _TMP1581.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
