// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec2 _TMP69;
float _TMP89;
float _TMP84;
float _TMP85;
float _TMP86;
float _TMP88;
float _TMP87;
float _TMP83;
vec3 _TMP80;
float _TMP90;
bool _TMP79;
bool _TMP78;
bool _TMP77;
bool _TMP76;
bool _TMP75;
bool _TMP74;
bool _TMP73;
bvec4 _TMP72;
int _TMP67;
int _TMP68;
int _TMP55;
int _TMP56;
int _TMP43;
int _TMP44;
int _TMP31;
int _TMP32;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
float _TMP138;
float _TMP142;
float _TMP146;
float _TMP150;
float _TMP154;
float _TMP158;
float _TMP162;
float _TMP166;
float _TMP170;
float _TMP174;
vec3 _diff0175;
float _Y0175;
float _Cb0175;
float _Cr0175;
float _a0179;
float _TMP182;
vec3 _diff0183;
float _Y0183;
float _Cb0183;
float _Cr0183;
float _a0187;
float _TMP190;
vec3 _diff0191;
float _Y0191;
float _Cb0191;
float _Cr0191;
float _a0195;
float _TMP198;
vec3 _diff0199;
float _Y0199;
float _Cb0199;
float _Cr0199;
float _a0203;
float _TMP206;
vec3 _diff0207;
float _Y0207;
float _Cb0207;
float _Cr0207;
float _a0211;
float _TMP214;
vec3 _diff0215;
float _Y0215;
float _Cb0215;
float _Cr0215;
float _a0219;
float _TMP222;
vec3 _diff0223;
float _Y0223;
float _Cb0223;
float _Cr0223;
float _a0227;
float _TMP230;
vec3 _diff0231;
float _Y0231;
float _Cb0231;
float _Cr0231;
float _a0235;
float _TMP238;
vec3 _diff0239;
float _Y0239;
float _Cb0239;
float _Cr0239;
float _a0243;
float _TMP246;
vec3 _diff0247;
float _Y0247;
float _Cb0247;
float _Cr0247;
float _a0251;
float _TMP254;
vec3 _diff0255;
float _Y0255;
float _Cb0255;
float _Cr0255;
float _a0259;
float _TMP262;
vec3 _diff0263;
float _Y0263;
float _Cb0263;
float _Cr0263;
float _a0267;
float _TMP270;
vec3 _diff0271;
float _Y0271;
float _Cb0271;
float _Cr0271;
float _a0275;
float _TMP278;
vec3 _diff0279;
float _Y0279;
float _Cb0279;
float _Cr0279;
float _a0283;
float _TMP286;
vec3 _diff0287;
float _Y0287;
float _Cb0287;
float _Cr0287;
float _a0291;
float _TMP294;
vec3 _diff0295;
float _Y0295;
float _Cb0295;
float _Cr0295;
float _a0299;
float _TMP302;
vec3 _diff0303;
float _Y0303;
float _Cb0303;
float _Cr0303;
float _a0307;
float _TMP310;
vec3 _diff0311;
float _Y0311;
float _Cb0311;
float _Cr0311;
float _a0315;
float _TMP318;
vec3 _diff0319;
float _Y0319;
float _Cb0319;
float _Cr0319;
float _a0323;
float _TMP326;
vec3 _diff0327;
float _Y0327;
float _Cb0327;
float _Cr0327;
float _a0331;
float _TMP334;
vec3 _diff0335;
float _Y0335;
float _Cb0335;
float _Cr0335;
float _a0339;
float _TMP342;
vec3 _diff0343;
float _Y0343;
float _Cb0343;
float _Cr0343;
float _a0347;
float _TMP350;
vec3 _diff0351;
float _Y0351;
float _Cb0351;
float _Cr0351;
float _a0355;
float _TMP358;
vec3 _diff0359;
float _Y0359;
float _Cb0359;
float _Cr0359;
float _a0363;
float _TMP366;
vec3 _diff0367;
float _Y0367;
float _Cb0367;
float _Cr0367;
float _a0371;
float _TMP374;
vec3 _diff0375;
float _Y0375;
float _Cb0375;
float _Cr0375;
float _a0379;
float _TMP382;
vec3 _diff0383;
float _Y0383;
float _Cb0383;
float _Cr0383;
float _a0387;
float _TMP390;
vec3 _diff0391;
float _Y0391;
float _Cb0391;
float _Cr0391;
float _a0395;
float _TMP398;
vec3 _diff0399;
float _Y0399;
float _Cb0399;
float _Cr0399;
float _a0403;
float _TMP406;
vec3 _diff0407;
float _Y0407;
float _Cb0407;
float _Cr0407;
float _a0411;
float _TMP414;
vec3 _diff0415;
float _Y0415;
float _Cb0415;
float _Cr0415;
float _a0419;
float _TMP422;
vec3 _diff0423;
float _Y0423;
float _Cb0423;
float _Cr0423;
float _a0427;
float _TMP430;
vec3 _diff0431;
float _Y0431;
float _Cb0431;
float _Cr0431;
float _a0435;
float _TMP438;
vec3 _diff0439;
float _Y0439;
float _Cb0439;
float _Cr0439;
float _a0443;
float _TMP446;
vec3 _diff0447;
float _Y0447;
float _Cb0447;
float _Cr0447;
float _a0451;
float _TMP454;
vec3 _diff0455;
float _Y0455;
float _Cb0455;
float _Cr0455;
float _a0459;
float _TMP462;
vec3 _diff0463;
float _Y0463;
float _Cb0463;
float _Cr0463;
float _a0467;
float _TMP470;
vec3 _diff0471;
float _Y0471;
float _Cb0471;
float _Cr0471;
float _a0475;
float _TMP478;
vec3 _diff0479;
float _Y0479;
float _Cb0479;
float _Cr0479;
float _a0483;
float _TMP486;
vec3 _diff0487;
float _Y0487;
float _Cb0487;
float _Cr0487;
float _a0491;
bool _haveShallowLine0494;
bool _haveSteepLine0494;
bool _needBlend0494;
bool _doLineBlend0494;
float _TMP495;
float _TMP499;
float _TMP503;
float _TMP507;
float _TMP511;
float _TMP515;
vec3 _diff0516;
float _Y0516;
float _Cb0516;
float _Cr0516;
float _a0520;
float _TMP523;
vec3 _diff0524;
float _Y0524;
float _Cb0524;
float _Cr0524;
float _a0528;
float _TMP533;
vec3 _diff0534;
float _Y0534;
float _Cb0534;
float _Cr0534;
float _a0538;
float _TMP543;
vec3 _diff0544;
float _Y0544;
float _Cb0544;
float _Cr0544;
float _a0548;
float _TMP553;
vec3 _diff0554;
float _Y0554;
float _Cb0554;
float _Cr0554;
float _a0558;
float _TMP563;
vec3 _diff0564;
float _Y0564;
float _Cb0564;
float _Cr0564;
float _a0568;
float _TMP573;
vec3 _diff0574;
float _Y0574;
float _Cb0574;
float _Cr0574;
float _a0578;
float _TMP583;
vec3 _diff0584;
float _Y0584;
float _Cb0584;
float _Cr0584;
float _a0588;
float _TMP593;
vec3 _diff0594;
float _Y0594;
float _Cb0594;
float _Cr0594;
float _a0598;
float _TMP601;
vec3 _diff0602;
float _Y0602;
float _Cb0602;
float _Cr0602;
float _a0606;
float _TMP609;
vec3 _diff0610;
float _Y0610;
float _Cb0610;
float _Cr0610;
float _a0614;
vec3 _TMP617;
float _a0618;
vec3 _TMP621;
float _a0622;
vec3 _TMP625;
float _a0626;
bool _haveShallowLine0629;
bool _haveSteepLine0629;
bool _needBlend0629;
bool _doLineBlend0629;
float _TMP630;
float _TMP634;
float _TMP638;
float _TMP642;
float _TMP646;
float _TMP650;
vec3 _diff0651;
float _Y0651;
float _Cb0651;
float _Cr0651;
float _a0655;
float _TMP658;
vec3 _diff0659;
float _Y0659;
float _Cb0659;
float _Cr0659;
float _a0663;
float _TMP668;
vec3 _diff0669;
float _Y0669;
float _Cb0669;
float _Cr0669;
float _a0673;
float _TMP678;
vec3 _diff0679;
float _Y0679;
float _Cb0679;
float _Cr0679;
float _a0683;
float _TMP688;
vec3 _diff0689;
float _Y0689;
float _Cb0689;
float _Cr0689;
float _a0693;
float _TMP698;
vec3 _diff0699;
float _Y0699;
float _Cb0699;
float _Cr0699;
float _a0703;
float _TMP708;
vec3 _diff0709;
float _Y0709;
float _Cb0709;
float _Cr0709;
float _a0713;
float _TMP718;
vec3 _diff0719;
float _Y0719;
float _Cb0719;
float _Cr0719;
float _a0723;
float _TMP728;
vec3 _diff0729;
float _Y0729;
float _Cb0729;
float _Cr0729;
float _a0733;
float _TMP736;
vec3 _diff0737;
float _Y0737;
float _Cb0737;
float _Cr0737;
float _a0741;
float _TMP744;
vec3 _diff0745;
float _Y0745;
float _Cb0745;
float _Cr0745;
float _a0749;
vec3 _TMP752;
float _a0753;
vec3 _TMP756;
float _a0757;
vec3 _TMP760;
float _a0761;
bool _haveShallowLine0764;
bool _haveSteepLine0764;
bool _needBlend0764;
bool _doLineBlend0764;
float _TMP765;
float _TMP769;
float _TMP773;
float _TMP777;
float _TMP781;
float _TMP785;
vec3 _diff0786;
float _Y0786;
float _Cb0786;
float _Cr0786;
float _a0790;
float _TMP793;
vec3 _diff0794;
float _Y0794;
float _Cb0794;
float _Cr0794;
float _a0798;
float _TMP803;
vec3 _diff0804;
float _Y0804;
float _Cb0804;
float _Cr0804;
float _a0808;
float _TMP813;
vec3 _diff0814;
float _Y0814;
float _Cb0814;
float _Cr0814;
float _a0818;
float _TMP823;
vec3 _diff0824;
float _Y0824;
float _Cb0824;
float _Cr0824;
float _a0828;
float _TMP833;
vec3 _diff0834;
float _Y0834;
float _Cb0834;
float _Cr0834;
float _a0838;
float _TMP843;
vec3 _diff0844;
float _Y0844;
float _Cb0844;
float _Cr0844;
float _a0848;
float _TMP853;
vec3 _diff0854;
float _Y0854;
float _Cb0854;
float _Cr0854;
float _a0858;
float _TMP863;
vec3 _diff0864;
float _Y0864;
float _Cb0864;
float _Cr0864;
float _a0868;
float _TMP871;
vec3 _diff0872;
float _Y0872;
float _Cb0872;
float _Cr0872;
float _a0876;
float _TMP879;
vec3 _diff0880;
float _Y0880;
float _Cb0880;
float _Cr0880;
float _a0884;
vec3 _TMP887;
float _a0888;
vec3 _TMP891;
float _a0892;
vec3 _TMP895;
float _a0896;
bool _haveShallowLine0899;
bool _haveSteepLine0899;
bool _needBlend0899;
bool _doLineBlend0899;
float _TMP900;
float _TMP904;
float _TMP908;
float _TMP912;
float _TMP916;
float _TMP920;
vec3 _diff0921;
float _Y0921;
float _Cb0921;
float _Cr0921;
float _a0925;
float _TMP928;
vec3 _diff0929;
float _Y0929;
float _Cb0929;
float _Cr0929;
float _a0933;
float _TMP938;
vec3 _diff0939;
float _Y0939;
float _Cb0939;
float _Cr0939;
float _a0943;
float _TMP948;
vec3 _diff0949;
float _Y0949;
float _Cb0949;
float _Cr0949;
float _a0953;
float _TMP958;
vec3 _diff0959;
float _Y0959;
float _Cb0959;
float _Cr0959;
float _a0963;
float _TMP968;
vec3 _diff0969;
float _Y0969;
float _Cb0969;
float _Cr0969;
float _a0973;
float _TMP978;
vec3 _diff0979;
float _Y0979;
float _Cb0979;
float _Cr0979;
float _a0983;
float _TMP988;
vec3 _diff0989;
float _Y0989;
float _Cb0989;
float _Cr0989;
float _a0993;
float _TMP998;
vec3 _diff0999;
float _Y0999;
float _Cb0999;
float _Cr0999;
float _a1003;
float _TMP1006;
vec3 _diff1007;
float _Y1007;
float _Cb1007;
float _Cr1007;
float _a1011;
float _TMP1014;
vec3 _diff1015;
float _Y1015;
float _Cb1015;
float _Cr1015;
float _a1019;
vec3 _TMP1022;
float _a1023;
vec3 _TMP1026;
float _a1027;
vec3 _TMP1030;
float _a1031;
bool _TMP1034;
vec2 _x1041;
vec3 _TMP1044;
vec3 _TMP1048;
vec3 _TMP1052;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    ivec4 _blendResult;
    float _dist_03_011;
    float _dist_00_021;
    bool _dominantGradient1;
    float _dist_04_001;
    float _dist_05_031;
    bool _dominantGradient2;
    float _dist_00_081;
    float _dist_07_011;
    bool _dominantGradient3;
    float _dist_05_071;
    float _dist_06_001;
    bool _dominantGradient4;
    vec3 _dst1[4];
    vec2 _f;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _TMP138 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP142 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP146 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP150 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP154 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP158 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP162 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP166 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _TMP170 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
    _blendResult = ivec4(0, 0, 0, 0);
    if (!(_TMP138 == _TMP142 && _TMP150 == _TMP146 || _TMP138 == _TMP150 && _TMP142 == _TMP146)) { 
        _diff0175 = _TMP9.xyz - _TMP7.xyz;
        _Y0175 = dot(_diff0175, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0175 = 5.31519055E-01*(_diff0175.z - _Y0175);
        _Cr0175 = 6.78149998E-01*(_diff0175.x - _Y0175);
        _a0179 = _Y0175*_Y0175 + _Cb0175*_Cb0175 + _Cr0175*_Cr0175;
        _TMP90 = inversesqrt(_a0179);
        _TMP174 = 1.00000000E+00/_TMP90;
        _diff0183 = _TMP7.xyz - _TMP5.xyz;
        _Y0183 = dot(_diff0183, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0183 = 5.31519055E-01*(_diff0183.z - _Y0183);
        _Cr0183 = 6.78149998E-01*(_diff0183.x - _Y0183);
        _a0187 = _Y0183*_Y0183 + _Cb0183*_Cb0183 + _Cr0183*_Cr0183;
        _TMP90 = inversesqrt(_a0187);
        _TMP182 = 1.00000000E+00/_TMP90;
        _diff0191 = _TMP13.xyz - _TMP11.xyz;
        _Y0191 = dot(_diff0191, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0191 = 5.31519055E-01*(_diff0191.z - _Y0191);
        _Cr0191 = 6.78149998E-01*(_diff0191.x - _Y0191);
        _a0195 = _Y0191*_Y0191 + _Cb0191*_Cb0191 + _Cr0191*_Cr0191;
        _TMP90 = inversesqrt(_a0195);
        _TMP190 = 1.00000000E+00/_TMP90;
        _diff0199 = _TMP11.xyz - _TMP19.xyz;
        _Y0199 = dot(_diff0199, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0199 = 5.31519055E-01*(_diff0199.z - _Y0199);
        _Cr0199 = 6.78149998E-01*(_diff0199.x - _Y0199);
        _a0203 = _Y0199*_Y0199 + _Cb0199*_Cb0199 + _Cr0199*_Cr0199;
        _TMP90 = inversesqrt(_a0203);
        _TMP198 = 1.00000000E+00/_TMP90;
        _diff0207 = _TMP10.xyz - _TMP8.xyz;
        _Y0207 = dot(_diff0207, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0207 = 5.31519055E-01*(_diff0207.z - _Y0207);
        _Cr0207 = 6.78149998E-01*(_diff0207.x - _Y0207);
        _a0211 = _Y0207*_Y0207 + _Cb0207*_Cb0207 + _Cr0207*_Cr0207;
        _TMP90 = inversesqrt(_a0211);
        _TMP206 = 1.00000000E+00/_TMP90;
        _dist_03_011 = _TMP174 + _TMP182 + _TMP190 + _TMP198 + 4.00000000E+00*_TMP206;
        _diff0215 = _TMP6.xyz - _TMP10.xyz;
        _Y0215 = dot(_diff0215, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0215 = 5.31519055E-01*(_diff0215.z - _Y0215);
        _Cr0215 = 6.78149998E-01*(_diff0215.x - _Y0215);
        _a0219 = _Y0215*_Y0215 + _Cb0215*_Cb0215 + _Cr0215*_Cr0215;
        _TMP90 = inversesqrt(_a0219);
        _TMP214 = 1.00000000E+00/_TMP90;
        _diff0223 = _TMP10.xyz - _TMP14.xyz;
        _Y0223 = dot(_diff0223, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0223 = 5.31519055E-01*(_diff0223.z - _Y0223);
        _Cr0223 = 6.78149998E-01*(_diff0223.x - _Y0223);
        _a0227 = _Y0223*_Y0223 + _Cb0223*_Cb0223 + _Cr0223*_Cr0223;
        _TMP90 = inversesqrt(_a0227);
        _TMP222 = 1.00000000E+00/_TMP90;
        _diff0231 = _TMP4.xyz - _TMP8.xyz;
        _Y0231 = dot(_diff0231, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0231 = 5.31519055E-01*(_diff0231.z - _Y0231);
        _Cr0231 = 6.78149998E-01*(_diff0231.x - _Y0231);
        _a0235 = _Y0231*_Y0231 + _Cb0231*_Cb0231 + _Cr0231*_Cr0231;
        _TMP90 = inversesqrt(_a0235);
        _TMP230 = 1.00000000E+00/_TMP90;
        _diff0239 = _TMP8.xyz - _TMP20.xyz;
        _Y0239 = dot(_diff0239, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0239 = 5.31519055E-01*(_diff0239.z - _Y0239);
        _Cr0239 = 6.78149998E-01*(_diff0239.x - _Y0239);
        _a0243 = _Y0239*_Y0239 + _Cb0239*_Cb0239 + _Cr0239*_Cr0239;
        _TMP90 = inversesqrt(_a0243);
        _TMP238 = 1.00000000E+00/_TMP90;
        _diff0247 = _TMP7.xyz - _TMP11.xyz;
        _Y0247 = dot(_diff0247, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0247 = 5.31519055E-01*(_diff0247.z - _Y0247);
        _Cr0247 = 6.78149998E-01*(_diff0247.x - _Y0247);
        _a0251 = _Y0247*_Y0247 + _Cb0247*_Cb0247 + _Cr0247*_Cr0247;
        _TMP90 = inversesqrt(_a0251);
        _TMP246 = 1.00000000E+00/_TMP90;
        _dist_00_021 = _TMP214 + _TMP222 + _TMP230 + _TMP238 + 4.00000000E+00*_TMP246;
        _dominantGradient1 = 3.59999990E+00*_dist_03_011 < _dist_00_021;
        if (_dist_03_011 < _dist_00_021 && _TMP138 != _TMP142 && _TMP138 != _TMP150) { 
            if (_dominantGradient1) { 
                _TMP32 = 2;
            } else {
                _TMP32 = 1;
            } 
            _TMP31 = _TMP32;
        } else {
            _TMP31 = 0;
        } 
        _blendResult.z = _TMP31;
    } 
    if (!(_TMP158 == _TMP138 && _TMP154 == _TMP150 || _TMP158 == _TMP154 && _TMP138 == _TMP150)) { 
        _diff0255 = _TMP17.xyz - _TMP6.xyz;
        _Y0255 = dot(_diff0255, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0255 = 5.31519055E-01*(_diff0255.z - _Y0255);
        _Cr0255 = 6.78149998E-01*(_diff0255.x - _Y0255);
        _a0259 = _Y0255*_Y0255 + _Cb0255*_Cb0255 + _Cr0255*_Cr0255;
        _TMP90 = inversesqrt(_a0259);
        _TMP254 = 1.00000000E+00/_TMP90;
        _diff0263 = _TMP6.xyz - _TMP4.xyz;
        _Y0263 = dot(_diff0263, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0263 = 5.31519055E-01*(_diff0263.z - _Y0263);
        _Cr0263 = 6.78149998E-01*(_diff0263.x - _Y0263);
        _a0267 = _Y0263*_Y0263 + _Cb0263*_Cb0263 + _Cr0263*_Cr0263;
        _TMP90 = inversesqrt(_a0267);
        _TMP262 = 1.00000000E+00/_TMP90;
        _diff0271 = _TMP12.xyz - _TMP10.xyz;
        _Y0271 = dot(_diff0271, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0271 = 5.31519055E-01*(_diff0271.z - _Y0271);
        _Cr0271 = 6.78149998E-01*(_diff0271.x - _Y0271);
        _a0275 = _Y0271*_Y0271 + _Cb0271*_Cb0271 + _Cr0271*_Cr0271;
        _TMP90 = inversesqrt(_a0275);
        _TMP270 = 1.00000000E+00/_TMP90;
        _diff0279 = _TMP10.xyz - _TMP8.xyz;
        _Y0279 = dot(_diff0279, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0279 = 5.31519055E-01*(_diff0279.z - _Y0279);
        _Cr0279 = 6.78149998E-01*(_diff0279.x - _Y0279);
        _a0283 = _Y0279*_Y0279 + _Cb0279*_Cb0279 + _Cr0279*_Cr0279;
        _TMP90 = inversesqrt(_a0283);
        _TMP278 = 1.00000000E+00/_TMP90;
        _diff0287 = _TMP9.xyz - _TMP7.xyz;
        _Y0287 = dot(_diff0287, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0287 = 5.31519055E-01*(_diff0287.z - _Y0287);
        _Cr0287 = 6.78149998E-01*(_diff0287.x - _Y0287);
        _a0291 = _Y0287*_Y0287 + _Cb0287*_Cb0287 + _Cr0287*_Cr0287;
        _TMP90 = inversesqrt(_a0291);
        _TMP286 = 1.00000000E+00/_TMP90;
        _dist_04_001 = _TMP254 + _TMP262 + _TMP270 + _TMP278 + 4.00000000E+00*_TMP286;
        _diff0295 = _TMP16.xyz - _TMP9.xyz;
        _Y0295 = dot(_diff0295, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0295 = 5.31519055E-01*(_diff0295.z - _Y0295);
        _Cr0295 = 6.78149998E-01*(_diff0295.x - _Y0295);
        _a0299 = _Y0295*_Y0295 + _Cb0295*_Cb0295 + _Cr0295*_Cr0295;
        _TMP90 = inversesqrt(_a0299);
        _TMP294 = 1.00000000E+00/_TMP90;
        _diff0303 = _TMP9.xyz - _TMP13.xyz;
        _Y0303 = dot(_diff0303, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0303 = 5.31519055E-01*(_diff0303.z - _Y0303);
        _Cr0303 = 6.78149998E-01*(_diff0303.x - _Y0303);
        _a0307 = _Y0303*_Y0303 + _Cb0303*_Cb0303 + _Cr0303*_Cr0303;
        _TMP90 = inversesqrt(_a0307);
        _TMP302 = 1.00000000E+00/_TMP90;
        _diff0311 = _TMP3.xyz - _TMP7.xyz;
        _Y0311 = dot(_diff0311, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0311 = 5.31519055E-01*(_diff0311.z - _Y0311);
        _Cr0311 = 6.78149998E-01*(_diff0311.x - _Y0311);
        _a0315 = _Y0311*_Y0311 + _Cb0311*_Cb0311 + _Cr0311*_Cr0311;
        _TMP90 = inversesqrt(_a0315);
        _TMP310 = 1.00000000E+00/_TMP90;
        _diff0319 = _TMP7.xyz - _TMP11.xyz;
        _Y0319 = dot(_diff0319, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0319 = 5.31519055E-01*(_diff0319.z - _Y0319);
        _Cr0319 = 6.78149998E-01*(_diff0319.x - _Y0319);
        _a0323 = _Y0319*_Y0319 + _Cb0319*_Cb0319 + _Cr0319*_Cr0319;
        _TMP90 = inversesqrt(_a0323);
        _TMP318 = 1.00000000E+00/_TMP90;
        _diff0327 = _TMP6.xyz - _TMP10.xyz;
        _Y0327 = dot(_diff0327, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0327 = 5.31519055E-01*(_diff0327.z - _Y0327);
        _Cr0327 = 6.78149998E-01*(_diff0327.x - _Y0327);
        _a0331 = _Y0327*_Y0327 + _Cb0327*_Cb0327 + _Cr0327*_Cr0327;
        _TMP90 = inversesqrt(_a0331);
        _TMP326 = 1.00000000E+00/_TMP90;
        _dist_05_031 = _TMP294 + _TMP302 + _TMP310 + _TMP318 + 4.00000000E+00*_TMP326;
        _dominantGradient2 = 3.59999990E+00*_dist_05_031 < _dist_04_001;
        if (_dist_04_001 > _dist_05_031 && _TMP138 != _TMP158 && _TMP138 != _TMP150) { 
            if (_dominantGradient2) { 
                _TMP44 = 2;
            } else {
                _TMP44 = 1;
            } 
            _TMP43 = _TMP44;
        } else {
            _TMP43 = 0;
        } 
        _blendResult.w = _TMP43;
    } 
    if (!(_TMP166 == _TMP170 && _TMP138 == _TMP142 || _TMP166 == _TMP138 && _TMP170 == _TMP142)) { 
        _diff0335 = _TMP6.xyz - _TMP4.xyz;
        _Y0335 = dot(_diff0335, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0335 = 5.31519055E-01*(_diff0335.z - _Y0335);
        _Cr0335 = 6.78149998E-01*(_diff0335.x - _Y0335);
        _a0339 = _Y0335*_Y0335 + _Cb0335*_Cb0335 + _Cr0335*_Cr0335;
        _TMP90 = inversesqrt(_a0339);
        _TMP334 = 1.00000000E+00/_TMP90;
        _diff0343 = _TMP4.xyz - _TMP2.xyz;
        _Y0343 = dot(_diff0343, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0343 = 5.31519055E-01*(_diff0343.z - _Y0343);
        _Cr0343 = 6.78149998E-01*(_diff0343.x - _Y0343);
        _a0347 = _Y0343*_Y0343 + _Cb0343*_Cb0343 + _Cr0343*_Cr0343;
        _TMP90 = inversesqrt(_a0347);
        _TMP342 = 1.00000000E+00/_TMP90;
        _diff0351 = _TMP10.xyz - _TMP8.xyz;
        _Y0351 = dot(_diff0351, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0351 = 5.31519055E-01*(_diff0351.z - _Y0351);
        _Cr0351 = 6.78149998E-01*(_diff0351.x - _Y0351);
        _a0355 = _Y0351*_Y0351 + _Cb0351*_Cb0351 + _Cr0351*_Cr0351;
        _TMP90 = inversesqrt(_a0355);
        _TMP350 = 1.00000000E+00/_TMP90;
        _diff0359 = _TMP8.xyz - _TMP18.xyz;
        _Y0359 = dot(_diff0359, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0359 = 5.31519055E-01*(_diff0359.z - _Y0359);
        _Cr0359 = 6.78149998E-01*(_diff0359.x - _Y0359);
        _a0363 = _Y0359*_Y0359 + _Cb0359*_Cb0359 + _Cr0359*_Cr0359;
        _TMP90 = inversesqrt(_a0363);
        _TMP358 = 1.00000000E+00/_TMP90;
        _diff0367 = _TMP7.xyz - _TMP5.xyz;
        _Y0367 = dot(_diff0367, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0367 = 5.31519055E-01*(_diff0367.z - _Y0367);
        _Cr0367 = 6.78149998E-01*(_diff0367.x - _Y0367);
        _a0371 = _Y0367*_Y0367 + _Cb0367*_Cb0367 + _Cr0367*_Cr0367;
        _TMP90 = inversesqrt(_a0371);
        _TMP366 = 1.00000000E+00/_TMP90;
        _dist_00_081 = _TMP334 + _TMP342 + _TMP350 + _TMP358 + 4.00000000E+00*_TMP366;
        _diff0375 = _TMP3.xyz - _TMP7.xyz;
        _Y0375 = dot(_diff0375, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0375 = 5.31519055E-01*(_diff0375.z - _Y0375);
        _Cr0375 = 6.78149998E-01*(_diff0375.x - _Y0375);
        _a0379 = _Y0375*_Y0375 + _Cb0375*_Cb0375 + _Cr0375*_Cr0375;
        _TMP90 = inversesqrt(_a0379);
        _TMP374 = 1.00000000E+00/_TMP90;
        _diff0383 = _TMP7.xyz - _TMP11.xyz;
        _Y0383 = dot(_diff0383, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0383 = 5.31519055E-01*(_diff0383.z - _Y0383);
        _Cr0383 = 6.78149998E-01*(_diff0383.x - _Y0383);
        _a0387 = _Y0383*_Y0383 + _Cb0383*_Cb0383 + _Cr0383*_Cr0383;
        _TMP90 = inversesqrt(_a0387);
        _TMP382 = 1.00000000E+00/_TMP90;
        _diff0391 = _TMP1.xyz - _TMP5.xyz;
        _Y0391 = dot(_diff0391, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0391 = 5.31519055E-01*(_diff0391.z - _Y0391);
        _Cr0391 = 6.78149998E-01*(_diff0391.x - _Y0391);
        _a0395 = _Y0391*_Y0391 + _Cb0391*_Cb0391 + _Cr0391*_Cr0391;
        _TMP90 = inversesqrt(_a0395);
        _TMP390 = 1.00000000E+00/_TMP90;
        _diff0399 = _TMP5.xyz - _TMP19.xyz;
        _Y0399 = dot(_diff0399, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0399 = 5.31519055E-01*(_diff0399.z - _Y0399);
        _Cr0399 = 6.78149998E-01*(_diff0399.x - _Y0399);
        _a0403 = _Y0399*_Y0399 + _Cb0399*_Cb0399 + _Cr0399*_Cr0399;
        _TMP90 = inversesqrt(_a0403);
        _TMP398 = 1.00000000E+00/_TMP90;
        _diff0407 = _TMP4.xyz - _TMP8.xyz;
        _Y0407 = dot(_diff0407, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0407 = 5.31519055E-01*(_diff0407.z - _Y0407);
        _Cr0407 = 6.78149998E-01*(_diff0407.x - _Y0407);
        _a0411 = _Y0407*_Y0407 + _Cb0407*_Cb0407 + _Cr0407*_Cr0407;
        _TMP90 = inversesqrt(_a0411);
        _TMP406 = 1.00000000E+00/_TMP90;
        _dist_07_011 = _TMP374 + _TMP382 + _TMP390 + _TMP398 + 4.00000000E+00*_TMP406;
        _dominantGradient3 = 3.59999990E+00*_dist_07_011 < _dist_00_081;
        if (_dist_00_081 > _dist_07_011 && _TMP138 != _TMP166 && _TMP138 != _TMP142) { 
            if (_dominantGradient3) { 
                _TMP56 = 2;
            } else {
                _TMP56 = 1;
            } 
            _TMP55 = _TMP56;
        } else {
            _TMP55 = 0;
        } 
        _blendResult.y = _TMP55;
    } 
    if (!(_TMP162 == _TMP166 && _TMP158 == _TMP138 || _TMP162 == _TMP158 && _TMP166 == _TMP138)) { 
        _diff0415 = _TMP16.xyz - _TMP3.xyz;
        _Y0415 = dot(_diff0415, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0415 = 5.31519055E-01*(_diff0415.z - _Y0415);
        _Cr0415 = 6.78149998E-01*(_diff0415.x - _Y0415);
        _a0419 = _Y0415*_Y0415 + _Cb0415*_Cb0415 + _Cr0415*_Cr0415;
        _TMP90 = inversesqrt(_a0419);
        _TMP414 = 1.00000000E+00/_TMP90;
        _diff0423 = _TMP3.xyz - _TMP1.xyz;
        _Y0423 = dot(_diff0423, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0423 = 5.31519055E-01*(_diff0423.z - _Y0423);
        _Cr0423 = 6.78149998E-01*(_diff0423.x - _Y0423);
        _a0427 = _Y0423*_Y0423 + _Cb0423*_Cb0423 + _Cr0423*_Cr0423;
        _TMP90 = inversesqrt(_a0427);
        _TMP422 = 1.00000000E+00/_TMP90;
        _diff0431 = _TMP9.xyz - _TMP7.xyz;
        _Y0431 = dot(_diff0431, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0431 = 5.31519055E-01*(_diff0431.z - _Y0431);
        _Cr0431 = 6.78149998E-01*(_diff0431.x - _Y0431);
        _a0435 = _Y0431*_Y0431 + _Cb0431*_Cb0431 + _Cr0431*_Cr0431;
        _TMP90 = inversesqrt(_a0435);
        _TMP430 = 1.00000000E+00/_TMP90;
        _diff0439 = _TMP7.xyz - _TMP5.xyz;
        _Y0439 = dot(_diff0439, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0439 = 5.31519055E-01*(_diff0439.z - _Y0439);
        _Cr0439 = 6.78149998E-01*(_diff0439.x - _Y0439);
        _a0443 = _Y0439*_Y0439 + _Cb0439*_Cb0439 + _Cr0439*_Cr0439;
        _TMP90 = inversesqrt(_a0443);
        _TMP438 = 1.00000000E+00/_TMP90;
        _diff0447 = _TMP6.xyz - _TMP4.xyz;
        _Y0447 = dot(_diff0447, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0447 = 5.31519055E-01*(_diff0447.z - _Y0447);
        _Cr0447 = 6.78149998E-01*(_diff0447.x - _Y0447);
        _a0451 = _Y0447*_Y0447 + _Cb0447*_Cb0447 + _Cr0447*_Cr0447;
        _TMP90 = inversesqrt(_a0451);
        _TMP446 = 1.00000000E+00/_TMP90;
        _dist_05_071 = _TMP414 + _TMP422 + _TMP430 + _TMP438 + 4.00000000E+00*_TMP446;
        _diff0455 = _TMP15.xyz - _TMP6.xyz;
        _Y0455 = dot(_diff0455, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0455 = 5.31519055E-01*(_diff0455.z - _Y0455);
        _Cr0455 = 6.78149998E-01*(_diff0455.x - _Y0455);
        _a0459 = _Y0455*_Y0455 + _Cb0455*_Cb0455 + _Cr0455*_Cr0455;
        _TMP90 = inversesqrt(_a0459);
        _TMP454 = 1.00000000E+00/_TMP90;
        _diff0463 = _TMP6.xyz - _TMP10.xyz;
        _Y0463 = dot(_diff0463, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0463 = 5.31519055E-01*(_diff0463.z - _Y0463);
        _Cr0463 = 6.78149998E-01*(_diff0463.x - _Y0463);
        _a0467 = _Y0463*_Y0463 + _Cb0463*_Cb0463 + _Cr0463*_Cr0463;
        _TMP90 = inversesqrt(_a0467);
        _TMP462 = 1.00000000E+00/_TMP90;
        _diff0471 = _TMP0.xyz - _TMP4.xyz;
        _Y0471 = dot(_diff0471, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0471 = 5.31519055E-01*(_diff0471.z - _Y0471);
        _Cr0471 = 6.78149998E-01*(_diff0471.x - _Y0471);
        _a0475 = _Y0471*_Y0471 + _Cb0471*_Cb0471 + _Cr0471*_Cr0471;
        _TMP90 = inversesqrt(_a0475);
        _TMP470 = 1.00000000E+00/_TMP90;
        _diff0479 = _TMP4.xyz - _TMP8.xyz;
        _Y0479 = dot(_diff0479, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0479 = 5.31519055E-01*(_diff0479.z - _Y0479);
        _Cr0479 = 6.78149998E-01*(_diff0479.x - _Y0479);
        _a0483 = _Y0479*_Y0479 + _Cb0479*_Cb0479 + _Cr0479*_Cr0479;
        _TMP90 = inversesqrt(_a0483);
        _TMP478 = 1.00000000E+00/_TMP90;
        _diff0487 = _TMP3.xyz - _TMP7.xyz;
        _Y0487 = dot(_diff0487, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0487 = 5.31519055E-01*(_diff0487.z - _Y0487);
        _Cr0487 = 6.78149998E-01*(_diff0487.x - _Y0487);
        _a0491 = _Y0487*_Y0487 + _Cb0487*_Cb0487 + _Cr0487*_Cr0487;
        _TMP90 = inversesqrt(_a0491);
        _TMP486 = 1.00000000E+00/_TMP90;
        _dist_06_001 = _TMP454 + _TMP462 + _TMP470 + _TMP478 + 4.00000000E+00*_TMP486;
        _dominantGradient4 = 3.59999990E+00*_dist_05_071 < _dist_06_001;
        if (_dist_05_071 < _dist_06_001 && _TMP138 != _TMP158 && _TMP138 != _TMP166) { 
            if (_dominantGradient4) { 
                _TMP68 = 2;
            } else {
                _TMP68 = 1;
            } 
            _TMP67 = _TMP68;
        } else {
            _TMP67 = 0;
        } 
        _blendResult.x = _TMP67;
    } 
    _dst1[0] = _TMP7.xyz;
    _dst1[1] = _TMP7.xyz;
    _dst1[2] = _TMP7.xyz;
    _dst1[3] = _TMP7.xyz;
    _TMP72 = bvec4(_blendResult.x != 0, _blendResult.y != 0, _blendResult.z != 0, _blendResult.w != 0);
    _TMP1034 = _TMP72.x || _TMP72.y || _TMP72.z || _TMP72.w;
    if (_TMP1034) { 
        _TMP495 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP499 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP503 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP507 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP511 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0516 = _TMP8.xyz - _TMP9.xyz;
        _Y0516 = dot(_diff0516, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0516 = 5.31519055E-01*(_diff0516.z - _Y0516);
        _Cr0516 = 6.78149998E-01*(_diff0516.x - _Y0516);
        _a0520 = _Y0516*_Y0516 + _Cb0516*_Cb0516 + _Cr0516*_Cr0516;
        _TMP90 = inversesqrt(_a0520);
        _TMP515 = 1.00000000E+00/_TMP90;
        _diff0524 = _TMP10.xyz - _TMP5.xyz;
        _Y0524 = dot(_diff0524, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0524 = 5.31519055E-01*(_diff0524.z - _Y0524);
        _Cr0524 = 6.78149998E-01*(_diff0524.x - _Y0524);
        _a0528 = _Y0524*_Y0524 + _Cb0524*_Cb0524 + _Cr0524*_Cr0524;
        _TMP90 = inversesqrt(_a0528);
        _TMP523 = 1.00000000E+00/_TMP90;
        _haveShallowLine0494 = 2.20000005E+00*_TMP515 <= _TMP523 && _TMP495 != _TMP499 && _TMP503 != _TMP499;
        _haveSteepLine0494 = 2.20000005E+00*_TMP523 <= _TMP515 && _TMP495 != _TMP511 && _TMP507 != _TMP511;
        _needBlend0494 = _blendResult.z != 0;
        _diff0534 = _TMP7.xyz - _TMP9.xyz;
        _Y0534 = dot(_diff0534, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0534 = 5.31519055E-01*(_diff0534.z - _Y0534);
        _Cr0534 = 6.78149998E-01*(_diff0534.x - _Y0534);
        _a0538 = _Y0534*_Y0534 + _Cb0534*_Cb0534 + _Cr0534*_Cr0534;
        _TMP90 = inversesqrt(_a0538);
        _TMP533 = 1.00000000E+00/_TMP90;
        _TMP73 = _TMP533 < 1.17647059E-01;
        _diff0544 = _TMP7.xyz - _TMP5.xyz;
        _Y0544 = dot(_diff0544, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0544 = 5.31519055E-01*(_diff0544.z - _Y0544);
        _Cr0544 = 6.78149998E-01*(_diff0544.x - _Y0544);
        _a0548 = _Y0544*_Y0544 + _Cb0544*_Cb0544 + _Cr0544*_Cr0544;
        _TMP90 = inversesqrt(_a0548);
        _TMP543 = 1.00000000E+00/_TMP90;
        _TMP74 = _TMP543 < 1.17647059E-01;
        _diff0554 = _TMP9.xyz - _TMP10.xyz;
        _Y0554 = dot(_diff0554, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0554 = 5.31519055E-01*(_diff0554.z - _Y0554);
        _Cr0554 = 6.78149998E-01*(_diff0554.x - _Y0554);
        _a0558 = _Y0554*_Y0554 + _Cb0554*_Cb0554 + _Cr0554*_Cr0554;
        _TMP90 = inversesqrt(_a0558);
        _TMP553 = 1.00000000E+00/_TMP90;
        _TMP75 = _TMP553 < 1.17647059E-01;
        _diff0564 = _TMP10.xyz - _TMP11.xyz;
        _Y0564 = dot(_diff0564, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0564 = 5.31519055E-01*(_diff0564.z - _Y0564);
        _Cr0564 = 6.78149998E-01*(_diff0564.x - _Y0564);
        _a0568 = _Y0564*_Y0564 + _Cb0564*_Cb0564 + _Cr0564*_Cr0564;
        _TMP90 = inversesqrt(_a0568);
        _TMP563 = 1.00000000E+00/_TMP90;
        _TMP76 = _TMP563 < 1.17647059E-01;
        _diff0574 = _TMP11.xyz - _TMP8.xyz;
        _Y0574 = dot(_diff0574, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0574 = 5.31519055E-01*(_diff0574.z - _Y0574);
        _Cr0574 = 6.78149998E-01*(_diff0574.x - _Y0574);
        _a0578 = _Y0574*_Y0574 + _Cb0574*_Cb0574 + _Cr0574*_Cr0574;
        _TMP90 = inversesqrt(_a0578);
        _TMP573 = 1.00000000E+00/_TMP90;
        _TMP77 = _TMP573 < 1.17647059E-01;
        _diff0584 = _TMP8.xyz - _TMP5.xyz;
        _Y0584 = dot(_diff0584, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0584 = 5.31519055E-01*(_diff0584.z - _Y0584);
        _Cr0584 = 6.78149998E-01*(_diff0584.x - _Y0584);
        _a0588 = _Y0584*_Y0584 + _Cb0584*_Cb0584 + _Cr0584*_Cr0584;
        _TMP90 = inversesqrt(_a0588);
        _TMP583 = 1.00000000E+00/_TMP90;
        _TMP78 = _TMP583 < 1.17647059E-01;
        _diff0594 = _TMP7.xyz - _TMP11.xyz;
        _Y0594 = dot(_diff0594, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0594 = 5.31519055E-01*(_diff0594.z - _Y0594);
        _Cr0594 = 6.78149998E-01*(_diff0594.x - _Y0594);
        _a0598 = _Y0594*_Y0594 + _Cb0594*_Cb0594 + _Cr0594*_Cr0594;
        _TMP90 = inversesqrt(_a0598);
        _TMP593 = 1.00000000E+00/_TMP90;
        _TMP79 = _TMP593 < 1.17647059E-01;
        _doLineBlend0494 = _blendResult.z >= 2 || !(_blendResult.y != 0 && !_TMP73 || _blendResult.w != 0 && !_TMP74 || _TMP75 && _TMP76 && _TMP77 && _TMP78 && !_TMP79);
        _diff0602 = _TMP7.xyz - _TMP8.xyz;
        _Y0602 = dot(_diff0602, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0602 = 5.31519055E-01*(_diff0602.z - _Y0602);
        _Cr0602 = 6.78149998E-01*(_diff0602.x - _Y0602);
        _a0606 = _Y0602*_Y0602 + _Cb0602*_Cb0602 + _Cr0602*_Cr0602;
        _TMP90 = inversesqrt(_a0606);
        _TMP601 = 1.00000000E+00/_TMP90;
        _diff0610 = _TMP7.xyz - _TMP10.xyz;
        _Y0610 = dot(_diff0610, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0610 = 5.31519055E-01*(_diff0610.z - _Y0610);
        _Cr0610 = 6.78149998E-01*(_diff0610.x - _Y0610);
        _a0614 = _Y0610*_Y0610 + _Cb0610*_Cb0610 + _Cr0610*_Cr0610;
        _TMP90 = inversesqrt(_a0614);
        _TMP609 = 1.00000000E+00/_TMP90;
        if (_TMP601 <= _TMP609) { 
            _TMP80 = _TMP8.xyz;
        } else {
            _TMP80 = _TMP10.xyz;
        } 
        if (_needBlend0494 && _doLineBlend0494 && _haveSteepLine0494) { 
            _TMP83 = 2.50000000E-01;
        } else {
            _TMP83 = 0.00000000E+00;
        } 
        _a0618 = float(_TMP83);
        _TMP617 = _TMP7.xyz + _a0618*(_TMP80 - _TMP7.xyz);
        if (_needBlend0494) { 
            if (_doLineBlend0494) { 
                if (_haveShallowLine0494) { 
                    if (_haveSteepLine0494) { 
                        _TMP87 = 8.33333313E-01;
                    } else {
                        _TMP87 = 7.50000000E-01;
                    } 
                    _TMP86 = _TMP87;
                } else {
                    if (_haveSteepLine0494) { 
                        _TMP88 = 7.50000000E-01;
                    } else {
                        _TMP88 = 5.00000000E-01;
                    } 
                    _TMP86 = _TMP88;
                } 
                _TMP85 = _TMP86;
            } else {
                _TMP85 = 2.14601815E-01;
            } 
            _TMP84 = _TMP85;
        } else {
            _TMP84 = 0.00000000E+00;
        } 
        _a0622 = float(_TMP84);
        _TMP621 = _TMP7.xyz + _a0622*(_TMP80 - _TMP7.xyz);
        if (_needBlend0494 && _doLineBlend0494 && _haveShallowLine0494) { 
            _TMP89 = 2.50000000E-01;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a0626 = float(_TMP89);
        _TMP625 = _TMP7.xyz + _a0626*(_TMP80 - _TMP7.xyz);
        _TMP630 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP634 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP638 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP642 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP646 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0651 = _TMP4.xyz - _TMP11.xyz;
        _Y0651 = dot(_diff0651, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0651 = 5.31519055E-01*(_diff0651.z - _Y0651);
        _Cr0651 = 6.78149998E-01*(_diff0651.x - _Y0651);
        _a0655 = _Y0651*_Y0651 + _Cb0651*_Cb0651 + _Cr0651*_Cr0651;
        _TMP90 = inversesqrt(_a0655);
        _TMP650 = 1.00000000E+00/_TMP90;
        _diff0659 = _TMP8.xyz - _TMP3.xyz;
        _Y0659 = dot(_diff0659, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0659 = 5.31519055E-01*(_diff0659.z - _Y0659);
        _Cr0659 = 6.78149998E-01*(_diff0659.x - _Y0659);
        _a0663 = _Y0659*_Y0659 + _Cb0659*_Cb0659 + _Cr0659*_Cr0659;
        _TMP90 = inversesqrt(_a0663);
        _TMP658 = 1.00000000E+00/_TMP90;
        _haveShallowLine0629 = 2.20000005E+00*_TMP650 <= _TMP658 && _TMP630 != _TMP634 && _TMP638 != _TMP634;
        _haveSteepLine0629 = 2.20000005E+00*_TMP658 <= _TMP650 && _TMP630 != _TMP646 && _TMP642 != _TMP646;
        _needBlend0629 = _blendResult.y != 0;
        _diff0669 = _TMP7.xyz - _TMP11.xyz;
        _Y0669 = dot(_diff0669, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0669 = 5.31519055E-01*(_diff0669.z - _Y0669);
        _Cr0669 = 6.78149998E-01*(_diff0669.x - _Y0669);
        _a0673 = _Y0669*_Y0669 + _Cb0669*_Cb0669 + _Cr0669*_Cr0669;
        _TMP90 = inversesqrt(_a0673);
        _TMP668 = 1.00000000E+00/_TMP90;
        _TMP73 = _TMP668 < 1.17647059E-01;
        _diff0679 = _TMP7.xyz - _TMP3.xyz;
        _Y0679 = dot(_diff0679, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0679 = 5.31519055E-01*(_diff0679.z - _Y0679);
        _Cr0679 = 6.78149998E-01*(_diff0679.x - _Y0679);
        _a0683 = _Y0679*_Y0679 + _Cb0679*_Cb0679 + _Cr0679*_Cr0679;
        _TMP90 = inversesqrt(_a0683);
        _TMP678 = 1.00000000E+00/_TMP90;
        _TMP74 = _TMP678 < 1.17647059E-01;
        _diff0689 = _TMP11.xyz - _TMP8.xyz;
        _Y0689 = dot(_diff0689, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0689 = 5.31519055E-01*(_diff0689.z - _Y0689);
        _Cr0689 = 6.78149998E-01*(_diff0689.x - _Y0689);
        _a0693 = _Y0689*_Y0689 + _Cb0689*_Cb0689 + _Cr0689*_Cr0689;
        _TMP90 = inversesqrt(_a0693);
        _TMP688 = 1.00000000E+00/_TMP90;
        _TMP75 = _TMP688 < 1.17647059E-01;
        _diff0699 = _TMP8.xyz - _TMP5.xyz;
        _Y0699 = dot(_diff0699, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0699 = 5.31519055E-01*(_diff0699.z - _Y0699);
        _Cr0699 = 6.78149998E-01*(_diff0699.x - _Y0699);
        _a0703 = _Y0699*_Y0699 + _Cb0699*_Cb0699 + _Cr0699*_Cr0699;
        _TMP90 = inversesqrt(_a0703);
        _TMP698 = 1.00000000E+00/_TMP90;
        _TMP76 = _TMP698 < 1.17647059E-01;
        _diff0709 = _TMP5.xyz - _TMP4.xyz;
        _Y0709 = dot(_diff0709, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0709 = 5.31519055E-01*(_diff0709.z - _Y0709);
        _Cr0709 = 6.78149998E-01*(_diff0709.x - _Y0709);
        _a0713 = _Y0709*_Y0709 + _Cb0709*_Cb0709 + _Cr0709*_Cr0709;
        _TMP90 = inversesqrt(_a0713);
        _TMP708 = 1.00000000E+00/_TMP90;
        _TMP77 = _TMP708 < 1.17647059E-01;
        _diff0719 = _TMP4.xyz - _TMP3.xyz;
        _Y0719 = dot(_diff0719, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0719 = 5.31519055E-01*(_diff0719.z - _Y0719);
        _Cr0719 = 6.78149998E-01*(_diff0719.x - _Y0719);
        _a0723 = _Y0719*_Y0719 + _Cb0719*_Cb0719 + _Cr0719*_Cr0719;
        _TMP90 = inversesqrt(_a0723);
        _TMP718 = 1.00000000E+00/_TMP90;
        _TMP78 = _TMP718 < 1.17647059E-01;
        _diff0729 = _TMP7.xyz - _TMP5.xyz;
        _Y0729 = dot(_diff0729, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0729 = 5.31519055E-01*(_diff0729.z - _Y0729);
        _Cr0729 = 6.78149998E-01*(_diff0729.x - _Y0729);
        _a0733 = _Y0729*_Y0729 + _Cb0729*_Cb0729 + _Cr0729*_Cr0729;
        _TMP90 = inversesqrt(_a0733);
        _TMP728 = 1.00000000E+00/_TMP90;
        _TMP79 = _TMP728 < 1.17647059E-01;
        _doLineBlend0629 = _blendResult.y >= 2 || !(_blendResult.x != 0 && !_TMP73 || _blendResult.z != 0 && !_TMP74 || _TMP75 && _TMP76 && _TMP77 && _TMP78 && !_TMP79);
        _diff0737 = _TMP7.xyz - _TMP4.xyz;
        _Y0737 = dot(_diff0737, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0737 = 5.31519055E-01*(_diff0737.z - _Y0737);
        _Cr0737 = 6.78149998E-01*(_diff0737.x - _Y0737);
        _a0741 = _Y0737*_Y0737 + _Cb0737*_Cb0737 + _Cr0737*_Cr0737;
        _TMP90 = inversesqrt(_a0741);
        _TMP736 = 1.00000000E+00/_TMP90;
        _diff0745 = _TMP7.xyz - _TMP8.xyz;
        _Y0745 = dot(_diff0745, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0745 = 5.31519055E-01*(_diff0745.z - _Y0745);
        _Cr0745 = 6.78149998E-01*(_diff0745.x - _Y0745);
        _a0749 = _Y0745*_Y0745 + _Cb0745*_Cb0745 + _Cr0745*_Cr0745;
        _TMP90 = inversesqrt(_a0749);
        _TMP744 = 1.00000000E+00/_TMP90;
        if (_TMP736 <= _TMP744) { 
            _TMP80 = _TMP4.xyz;
        } else {
            _TMP80 = _TMP8.xyz;
        } 
        if (_needBlend0629 && _doLineBlend0629 && _haveSteepLine0629) { 
            _TMP83 = 2.50000000E-01;
        } else {
            _TMP83 = 0.00000000E+00;
        } 
        _a0753 = float(_TMP83);
        _TMP752 = _TMP7.xyz + _a0753*(_TMP80 - _TMP7.xyz);
        if (_needBlend0629) { 
            if (_doLineBlend0629) { 
                if (_haveShallowLine0629) { 
                    if (_haveSteepLine0629) { 
                        _TMP87 = 8.33333313E-01;
                    } else {
                        _TMP87 = 7.50000000E-01;
                    } 
                    _TMP86 = _TMP87;
                } else {
                    if (_haveSteepLine0629) { 
                        _TMP88 = 7.50000000E-01;
                    } else {
                        _TMP88 = 5.00000000E-01;
                    } 
                    _TMP86 = _TMP88;
                } 
                _TMP85 = _TMP86;
            } else {
                _TMP85 = 2.14601815E-01;
            } 
            _TMP84 = _TMP85;
        } else {
            _TMP84 = 0.00000000E+00;
        } 
        _a0757 = float(_TMP84);
        _TMP756 = _TMP617 + _a0757*(_TMP80 - _TMP617);
        if (_needBlend0629 && _doLineBlend0629 && _haveShallowLine0629) { 
            _TMP89 = 2.50000000E-01;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a0761 = float(_TMP89);
        _TMP760 = _TMP621 + _a0761*(_TMP80 - _TMP621);
        _TMP765 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP769 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP773 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP777 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP781 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0786 = _TMP6.xyz - _TMP5.xyz;
        _Y0786 = dot(_diff0786, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0786 = 5.31519055E-01*(_diff0786.z - _Y0786);
        _Cr0786 = 6.78149998E-01*(_diff0786.x - _Y0786);
        _a0790 = _Y0786*_Y0786 + _Cb0786*_Cb0786 + _Cr0786*_Cr0786;
        _TMP90 = inversesqrt(_a0790);
        _TMP785 = 1.00000000E+00/_TMP90;
        _diff0794 = _TMP4.xyz - _TMP9.xyz;
        _Y0794 = dot(_diff0794, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0794 = 5.31519055E-01*(_diff0794.z - _Y0794);
        _Cr0794 = 6.78149998E-01*(_diff0794.x - _Y0794);
        _a0798 = _Y0794*_Y0794 + _Cb0794*_Cb0794 + _Cr0794*_Cr0794;
        _TMP90 = inversesqrt(_a0798);
        _TMP793 = 1.00000000E+00/_TMP90;
        _haveShallowLine0764 = 2.20000005E+00*_TMP785 <= _TMP793 && _TMP765 != _TMP769 && _TMP773 != _TMP769;
        _haveSteepLine0764 = 2.20000005E+00*_TMP793 <= _TMP785 && _TMP765 != _TMP781 && _TMP777 != _TMP781;
        _needBlend0764 = _blendResult.x != 0;
        _diff0804 = _TMP7.xyz - _TMP5.xyz;
        _Y0804 = dot(_diff0804, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0804 = 5.31519055E-01*(_diff0804.z - _Y0804);
        _Cr0804 = 6.78149998E-01*(_diff0804.x - _Y0804);
        _a0808 = _Y0804*_Y0804 + _Cb0804*_Cb0804 + _Cr0804*_Cr0804;
        _TMP90 = inversesqrt(_a0808);
        _TMP803 = 1.00000000E+00/_TMP90;
        _TMP73 = _TMP803 < 1.17647059E-01;
        _diff0814 = _TMP7.xyz - _TMP9.xyz;
        _Y0814 = dot(_diff0814, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0814 = 5.31519055E-01*(_diff0814.z - _Y0814);
        _Cr0814 = 6.78149998E-01*(_diff0814.x - _Y0814);
        _a0818 = _Y0814*_Y0814 + _Cb0814*_Cb0814 + _Cr0814*_Cr0814;
        _TMP90 = inversesqrt(_a0818);
        _TMP813 = 1.00000000E+00/_TMP90;
        _TMP74 = _TMP813 < 1.17647059E-01;
        _diff0824 = _TMP5.xyz - _TMP4.xyz;
        _Y0824 = dot(_diff0824, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0824 = 5.31519055E-01*(_diff0824.z - _Y0824);
        _Cr0824 = 6.78149998E-01*(_diff0824.x - _Y0824);
        _a0828 = _Y0824*_Y0824 + _Cb0824*_Cb0824 + _Cr0824*_Cr0824;
        _TMP90 = inversesqrt(_a0828);
        _TMP823 = 1.00000000E+00/_TMP90;
        _TMP75 = _TMP823 < 1.17647059E-01;
        _diff0834 = _TMP4.xyz - _TMP3.xyz;
        _Y0834 = dot(_diff0834, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0834 = 5.31519055E-01*(_diff0834.z - _Y0834);
        _Cr0834 = 6.78149998E-01*(_diff0834.x - _Y0834);
        _a0838 = _Y0834*_Y0834 + _Cb0834*_Cb0834 + _Cr0834*_Cr0834;
        _TMP90 = inversesqrt(_a0838);
        _TMP833 = 1.00000000E+00/_TMP90;
        _TMP76 = _TMP833 < 1.17647059E-01;
        _diff0844 = _TMP3.xyz - _TMP6.xyz;
        _Y0844 = dot(_diff0844, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0844 = 5.31519055E-01*(_diff0844.z - _Y0844);
        _Cr0844 = 6.78149998E-01*(_diff0844.x - _Y0844);
        _a0848 = _Y0844*_Y0844 + _Cb0844*_Cb0844 + _Cr0844*_Cr0844;
        _TMP90 = inversesqrt(_a0848);
        _TMP843 = 1.00000000E+00/_TMP90;
        _TMP77 = _TMP843 < 1.17647059E-01;
        _diff0854 = _TMP6.xyz - _TMP9.xyz;
        _Y0854 = dot(_diff0854, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0854 = 5.31519055E-01*(_diff0854.z - _Y0854);
        _Cr0854 = 6.78149998E-01*(_diff0854.x - _Y0854);
        _a0858 = _Y0854*_Y0854 + _Cb0854*_Cb0854 + _Cr0854*_Cr0854;
        _TMP90 = inversesqrt(_a0858);
        _TMP853 = 1.00000000E+00/_TMP90;
        _TMP78 = _TMP853 < 1.17647059E-01;
        _diff0864 = _TMP7.xyz - _TMP3.xyz;
        _Y0864 = dot(_diff0864, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0864 = 5.31519055E-01*(_diff0864.z - _Y0864);
        _Cr0864 = 6.78149998E-01*(_diff0864.x - _Y0864);
        _a0868 = _Y0864*_Y0864 + _Cb0864*_Cb0864 + _Cr0864*_Cr0864;
        _TMP90 = inversesqrt(_a0868);
        _TMP863 = 1.00000000E+00/_TMP90;
        _TMP79 = _TMP863 < 1.17647059E-01;
        _doLineBlend0764 = _blendResult.x >= 2 || !(_blendResult.w != 0 && !_TMP73 || _blendResult.y != 0 && !_TMP74 || _TMP75 && _TMP76 && _TMP77 && _TMP78 && !_TMP79);
        _diff0872 = _TMP7.xyz - _TMP6.xyz;
        _Y0872 = dot(_diff0872, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0872 = 5.31519055E-01*(_diff0872.z - _Y0872);
        _Cr0872 = 6.78149998E-01*(_diff0872.x - _Y0872);
        _a0876 = _Y0872*_Y0872 + _Cb0872*_Cb0872 + _Cr0872*_Cr0872;
        _TMP90 = inversesqrt(_a0876);
        _TMP871 = 1.00000000E+00/_TMP90;
        _diff0880 = _TMP7.xyz - _TMP4.xyz;
        _Y0880 = dot(_diff0880, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0880 = 5.31519055E-01*(_diff0880.z - _Y0880);
        _Cr0880 = 6.78149998E-01*(_diff0880.x - _Y0880);
        _a0884 = _Y0880*_Y0880 + _Cb0880*_Cb0880 + _Cr0880*_Cr0880;
        _TMP90 = inversesqrt(_a0884);
        _TMP879 = 1.00000000E+00/_TMP90;
        if (_TMP871 <= _TMP879) { 
            _TMP80 = _TMP6.xyz;
        } else {
            _TMP80 = _TMP4.xyz;
        } 
        if (_needBlend0764 && _doLineBlend0764 && _haveSteepLine0764) { 
            _TMP83 = 2.50000000E-01;
        } else {
            _TMP83 = 0.00000000E+00;
        } 
        _a0888 = float(_TMP83);
        _TMP887 = _TMP625 + _a0888*(_TMP80 - _TMP625);
        if (_needBlend0764) { 
            if (_doLineBlend0764) { 
                if (_haveShallowLine0764) { 
                    if (_haveSteepLine0764) { 
                        _TMP87 = 8.33333313E-01;
                    } else {
                        _TMP87 = 7.50000000E-01;
                    } 
                    _TMP86 = _TMP87;
                } else {
                    if (_haveSteepLine0764) { 
                        _TMP88 = 7.50000000E-01;
                    } else {
                        _TMP88 = 5.00000000E-01;
                    } 
                    _TMP86 = _TMP88;
                } 
                _TMP85 = _TMP86;
            } else {
                _TMP85 = 2.14601815E-01;
            } 
            _TMP84 = _TMP85;
        } else {
            _TMP84 = 0.00000000E+00;
        } 
        _a0892 = float(_TMP84);
        _TMP891 = _TMP752 + _a0892*(_TMP80 - _TMP752);
        if (_needBlend0764 && _doLineBlend0764 && _haveShallowLine0764) { 
            _TMP89 = 2.50000000E-01;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a0896 = float(_TMP89);
        _TMP895 = _TMP756 + _a0896*(_TMP80 - _TMP756);
        _TMP900 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP904 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP908 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP912 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _TMP916 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.56000000E+02, 1.00000000E+00));
        _diff0921 = _TMP10.xyz - _TMP3.xyz;
        _Y0921 = dot(_diff0921, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0921 = 5.31519055E-01*(_diff0921.z - _Y0921);
        _Cr0921 = 6.78149998E-01*(_diff0921.x - _Y0921);
        _a0925 = _Y0921*_Y0921 + _Cb0921*_Cb0921 + _Cr0921*_Cr0921;
        _TMP90 = inversesqrt(_a0925);
        _TMP920 = 1.00000000E+00/_TMP90;
        _diff0929 = _TMP6.xyz - _TMP11.xyz;
        _Y0929 = dot(_diff0929, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0929 = 5.31519055E-01*(_diff0929.z - _Y0929);
        _Cr0929 = 6.78149998E-01*(_diff0929.x - _Y0929);
        _a0933 = _Y0929*_Y0929 + _Cb0929*_Cb0929 + _Cr0929*_Cr0929;
        _TMP90 = inversesqrt(_a0933);
        _TMP928 = 1.00000000E+00/_TMP90;
        _haveShallowLine0899 = 2.20000005E+00*_TMP920 <= _TMP928 && _TMP900 != _TMP904 && _TMP908 != _TMP904;
        _haveSteepLine0899 = 2.20000005E+00*_TMP928 <= _TMP920 && _TMP900 != _TMP916 && _TMP912 != _TMP916;
        _needBlend0899 = _blendResult.w != 0;
        _diff0939 = _TMP7.xyz - _TMP3.xyz;
        _Y0939 = dot(_diff0939, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0939 = 5.31519055E-01*(_diff0939.z - _Y0939);
        _Cr0939 = 6.78149998E-01*(_diff0939.x - _Y0939);
        _a0943 = _Y0939*_Y0939 + _Cb0939*_Cb0939 + _Cr0939*_Cr0939;
        _TMP90 = inversesqrt(_a0943);
        _TMP938 = 1.00000000E+00/_TMP90;
        _TMP73 = _TMP938 < 1.17647059E-01;
        _diff0949 = _TMP7.xyz - _TMP11.xyz;
        _Y0949 = dot(_diff0949, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0949 = 5.31519055E-01*(_diff0949.z - _Y0949);
        _Cr0949 = 6.78149998E-01*(_diff0949.x - _Y0949);
        _a0953 = _Y0949*_Y0949 + _Cb0949*_Cb0949 + _Cr0949*_Cr0949;
        _TMP90 = inversesqrt(_a0953);
        _TMP948 = 1.00000000E+00/_TMP90;
        _TMP74 = _TMP948 < 1.17647059E-01;
        _diff0959 = _TMP3.xyz - _TMP6.xyz;
        _Y0959 = dot(_diff0959, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0959 = 5.31519055E-01*(_diff0959.z - _Y0959);
        _Cr0959 = 6.78149998E-01*(_diff0959.x - _Y0959);
        _a0963 = _Y0959*_Y0959 + _Cb0959*_Cb0959 + _Cr0959*_Cr0959;
        _TMP90 = inversesqrt(_a0963);
        _TMP958 = 1.00000000E+00/_TMP90;
        _TMP75 = _TMP958 < 1.17647059E-01;
        _diff0969 = _TMP6.xyz - _TMP9.xyz;
        _Y0969 = dot(_diff0969, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0969 = 5.31519055E-01*(_diff0969.z - _Y0969);
        _Cr0969 = 6.78149998E-01*(_diff0969.x - _Y0969);
        _a0973 = _Y0969*_Y0969 + _Cb0969*_Cb0969 + _Cr0969*_Cr0969;
        _TMP90 = inversesqrt(_a0973);
        _TMP968 = 1.00000000E+00/_TMP90;
        _TMP76 = _TMP968 < 1.17647059E-01;
        _diff0979 = _TMP9.xyz - _TMP10.xyz;
        _Y0979 = dot(_diff0979, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0979 = 5.31519055E-01*(_diff0979.z - _Y0979);
        _Cr0979 = 6.78149998E-01*(_diff0979.x - _Y0979);
        _a0983 = _Y0979*_Y0979 + _Cb0979*_Cb0979 + _Cr0979*_Cr0979;
        _TMP90 = inversesqrt(_a0983);
        _TMP978 = 1.00000000E+00/_TMP90;
        _TMP77 = _TMP978 < 1.17647059E-01;
        _diff0989 = _TMP10.xyz - _TMP11.xyz;
        _Y0989 = dot(_diff0989, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0989 = 5.31519055E-01*(_diff0989.z - _Y0989);
        _Cr0989 = 6.78149998E-01*(_diff0989.x - _Y0989);
        _a0993 = _Y0989*_Y0989 + _Cb0989*_Cb0989 + _Cr0989*_Cr0989;
        _TMP90 = inversesqrt(_a0993);
        _TMP988 = 1.00000000E+00/_TMP90;
        _TMP78 = _TMP988 < 1.17647059E-01;
        _diff0999 = _TMP7.xyz - _TMP9.xyz;
        _Y0999 = dot(_diff0999, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb0999 = 5.31519055E-01*(_diff0999.z - _Y0999);
        _Cr0999 = 6.78149998E-01*(_diff0999.x - _Y0999);
        _a1003 = _Y0999*_Y0999 + _Cb0999*_Cb0999 + _Cr0999*_Cr0999;
        _TMP90 = inversesqrt(_a1003);
        _TMP998 = 1.00000000E+00/_TMP90;
        _TMP79 = _TMP998 < 1.17647059E-01;
        _doLineBlend0899 = _blendResult.w >= 2 || !(_blendResult.z != 0 && !_TMP73 || _blendResult.x != 0 && !_TMP74 || _TMP75 && _TMP76 && _TMP77 && _TMP78 && !_TMP79);
        _diff1007 = _TMP7.xyz - _TMP10.xyz;
        _Y1007 = dot(_diff1007, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1007 = 5.31519055E-01*(_diff1007.z - _Y1007);
        _Cr1007 = 6.78149998E-01*(_diff1007.x - _Y1007);
        _a1011 = _Y1007*_Y1007 + _Cb1007*_Cb1007 + _Cr1007*_Cr1007;
        _TMP90 = inversesqrt(_a1011);
        _TMP1006 = 1.00000000E+00/_TMP90;
        _diff1015 = _TMP7.xyz - _TMP6.xyz;
        _Y1015 = dot(_diff1015, vec3( 2.62699991E-01, 6.77999973E-01, 5.93000017E-02));
        _Cb1015 = 5.31519055E-01*(_diff1015.z - _Y1015);
        _Cr1015 = 6.78149998E-01*(_diff1015.x - _Y1015);
        _a1019 = _Y1015*_Y1015 + _Cb1015*_Cb1015 + _Cr1015*_Cr1015;
        _TMP90 = inversesqrt(_a1019);
        _TMP1014 = 1.00000000E+00/_TMP90;
        if (_TMP1006 <= _TMP1014) { 
            _TMP80 = _TMP10.xyz;
        } else {
            _TMP80 = _TMP6.xyz;
        } 
        if (_needBlend0899 && _doLineBlend0899 && _haveSteepLine0899) { 
            _TMP83 = 2.50000000E-01;
        } else {
            _TMP83 = 0.00000000E+00;
        } 
        _a1023 = float(_TMP83);
        _TMP1022 = _TMP760 + _a1023*(_TMP80 - _TMP760);
        if (_needBlend0899) { 
            if (_doLineBlend0899) { 
                if (_haveShallowLine0899) { 
                    if (_haveSteepLine0899) { 
                        _TMP87 = 8.33333313E-01;
                    } else {
                        _TMP87 = 7.50000000E-01;
                    } 
                    _TMP86 = _TMP87;
                } else {
                    if (_haveSteepLine0899) { 
                        _TMP88 = 7.50000000E-01;
                    } else {
                        _TMP88 = 5.00000000E-01;
                    } 
                    _TMP86 = _TMP88;
                } 
                _TMP85 = _TMP86;
            } else {
                _TMP85 = 2.14601815E-01;
            } 
            _TMP84 = _TMP85;
        } else {
            _TMP84 = 0.00000000E+00;
        } 
        _a1027 = float(_TMP84);
        _TMP1026 = _TMP887 + _a1027*(_TMP80 - _TMP887);
        if (_needBlend0899 && _doLineBlend0899 && _haveShallowLine0899) { 
            _TMP89 = 2.50000000E-01;
        } else {
            _TMP89 = 0.00000000E+00;
        } 
        _a1031 = float(_TMP89);
        _TMP1030 = _TMP891 + _a1031*(_TMP80 - _TMP891);
        _dst1[3] = _TMP1026;
        _dst1[2] = _TMP1022;
        _dst1[1] = _TMP895;
        _dst1[0] = _TMP1030;
    } 
    _x1041 = TEX0.xy*TextureSize;
    _TMP69 = fract(_x1041);
    _f = vec2(float((_TMP69.x >= 5.00000000E-01)), float((_TMP69.y >= 5.00000000E-01)));
    _TMP1044 = _dst1[0] + _f.x*(_dst1[1] - _dst1[0]);
    _TMP1048 = _dst1[3] + _f.x*(_dst1[2] - _dst1[3]);
    _TMP1052 = _TMP1044 + _f.y*(_TMP1048 - _TMP1044);
    _ret_0 = vec4(_TMP1052.x, _TMP1052.y, _TMP1052.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
