// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord1;
};
vec4 _oPosition1;
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0008;
    _ret_0._texCoord1 = TexCoord.xy;
    gl_Position = _r0008;
    TEX0.xy = TexCoord.xy;
    return;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
};
vec4 _ret_0;
vec3 _TMP8;
vec4 _TMP4;
float _TMP7;
float _TMP6;
float _TMP5;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _c0021;
vec2 _c0041;
vec2 _c0051;
vec4 _r0065;
vec4 _v0065;
vec3 _r0075;
vec3 _TMP76;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _TextureSize;
    vec3 _color;
    vec2 _dx;
    vec2 _pix_coord;
    vec2 _tc;
    vec2 _fp;
    vec3 _c10;
    vec3 _c11;
    vec3 _c12;
    vec3 _c13;
    vec3 _min_sample;
    vec3 _max_sample;
    _TextureSize = vec2(TextureSize.x, TextureSize.y);
    _dx = vec2(1.00000000E+00/_TextureSize.x, 0.00000000E+00);
    _pix_coord = TEX0.xy*_TextureSize + vec2( -5.00000000E-01, 0.00000000E+00);
    _TMP0 = floor(_pix_coord);
    _tc = (_TMP0 + vec2( 5.00000000E-01, 0.00000000E+00))/_TextureSize;
    _fp = fract(_pix_coord);
    _c0021 = _tc - _dx;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0021);
    _TMP5 = pow(_TMP1.x, 2.50000000E+00);
    _TMP6 = pow(_TMP1.y, 2.50000000E+00);
    _TMP7 = pow(_TMP1.z, 2.50000000E+00);
    _c10 = vec3(_TMP5, _TMP6, _TMP7);
    _TMP2 = COMPAT_TEXTURE(Texture, _tc);
    _TMP5 = pow(_TMP2.x, 2.50000000E+00);
    _TMP6 = pow(_TMP2.y, 2.50000000E+00);
    _TMP7 = pow(_TMP2.z, 2.50000000E+00);
    _c11 = vec3(_TMP5, _TMP6, _TMP7);
    _c0041 = _tc + _dx;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0041);
    _TMP5 = pow(_TMP3.x, 2.50000000E+00);
    _TMP6 = pow(_TMP3.y, 2.50000000E+00);
    _TMP7 = pow(_TMP3.z, 2.50000000E+00);
    _c12 = vec3(_TMP5, _TMP6, _TMP7);
    _c0051 = _tc + 2.00000000E+00*_dx;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0051);
    _TMP5 = pow(_TMP4.x, 2.50000000E+00);
    _TMP6 = pow(_TMP4.y, 2.50000000E+00);
    _TMP7 = pow(_TMP4.z, 2.50000000E+00);
    _c13 = vec3(_TMP5, _TMP6, _TMP7);
    _min_sample = min(_c11, _c12);
    _max_sample = max(_c11, _c12);
    _v0065 = vec4(_fp.x*_fp.x*_fp.x, _fp.x*_fp.x, _fp.x, 1.00000000E+00);
    _r0065.x = dot(vec4( -5.00000000E-01, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00), _v0065);
    _r0065.y = dot(vec4( 1.50000000E+00, -2.50000000E+00, 0.00000000E+00, 1.00000000E+00), _v0065);
    _r0065.z = dot(vec4( -1.50000000E+00, 2.00000000E+00, 5.00000000E-01, 0.00000000E+00), _v0065);
    _r0065.w = dot(vec4( 5.00000000E-01, -5.00000000E-01, 0.00000000E+00, 0.00000000E+00), _v0065);
    _r0075 = _r0065.x*_c10;
    _r0075 = _r0075 + _r0065.y*_c11;
    _r0075 = _r0075 + _r0065.z*_c12;
    _r0075 = _r0075 + _r0065.w*_c13;
    _TMP8 = min(_max_sample, _r0075);
    _TMP76 = max(_min_sample, _TMP8);
    _color = _r0075 + 8.00000012E-01*(_TMP76 - _r0075);
    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
