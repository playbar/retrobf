// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = 1.00000000E+00/TextureSize;
    _OUT._t1 = TexCoord.xxxy + vec4(-_ps.x, -2.00000000E+00*_ps.x, -3.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t2 = TexCoord.xxxy + vec4(_ps.x, 2.00000000E+00*_ps.x, 3.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t3 = TexCoord.xyyy + vec4(0.00000000E+00, -_ps.y, -2.00000000E+00*_ps.y, -3.00000000E+00*_ps.y);
    _OUT._t4 = TexCoord.xyyy + vec4(0.00000000E+00, _ps.y, 2.00000000E+00*_ps.y, 3.00000000E+00*_ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
int _TMP17;
bool _TMP19;
bool _TMP18;
int _TMP14;
bool _TMP16;
bool _TMP15;
int _TMP11;
bool _TMP13;
bool _TMP12;
int _TMP8;
bool _TMP10;
bool _TMP9;
int _TMP6;
int _TMP7;
int _TMP4;
int _TMP5;
int _TMP2;
int _TMP3;
int _TMP0;
int _TMP1;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP30;
vec4 _TMP29;
vec4 _TMP28;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP27;
vec4 _TMP26;
uniform sampler2D Texture;
vec4 _a0063;
vec4 _c0063;
vec4 _a0065;
vec4 _a0075;
vec4 _c0075;
vec4 _a0077;
vec4 _a0087;
vec4 _c0087;
vec4 _a0089;
vec4 _a0099;
vec4 _c0099;
vec4 _a0101;
vec4 _a0111;
vec4 _c0111;
vec4 _a0113;
vec4 _a0123;
vec4 _c0123;
vec4 _a0125;
vec4 _a0135;
vec4 _c0135;
vec4 _a0137;
vec4 _a0147;
vec4 _c0147;
vec4 _a0149;
vec4 _a0159;
vec4 _c0159;
vec4 _a0161;
vec4 _a0171;
vec4 _c0171;
vec4 _a0173;
vec4 _a0183;
vec4 _c0183;
vec4 _a0185;
vec4 _a0195;
vec4 _c0195;
vec4 _a0197;
vec4 _a0207;
vec4 _c0207;
vec4 _a0209;
vec4 _a0219;
vec4 _c0219;
vec4 _a0221;
vec4 _a0231;
vec4 _c0231;
vec4 _a0233;
vec4 _a0243;
vec4 _c0243;
vec4 _a0245;
vec4 _a0255;
vec4 _c0255;
vec4 _a0257;
vec4 _a0267;
vec4 _c0267;
vec4 _a0269;
vec4 _a0279;
vec4 _c0279;
vec4 _a0281;
vec4 _a0291;
vec4 _c0291;
vec4 _a0293;
vec4 _a0303;
vec4 _c0303;
vec4 _a0305;
vec4 _a0315;
vec4 _c0315;
vec4 _a0317;
vec4 _a0327;
vec4 _c0327;
vec4 _a0329;
vec4 _a0339;
vec4 _c0339;
vec4 _a0341;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _E;
    vec4 _D;
    vec4 _D0;
    vec4 _D1;
    vec4 _F;
    vec4 _F0;
    vec4 _F1;
    vec4 _B;
    vec4 _B0;
    vec4 _B1;
    vec4 _H;
    vec4 _H0;
    vec4 _H1;
    bvec4 _Ec;
    bvec4 _Eh;
    bvec4 _Ev;
    bvec4 _Eo;
    bvec4 _Dc;
    bvec4 _Dh;
    bvec4 _D0c;
    bvec4 _D0h;
    bvec4 _D1h;
    bvec4 _Fc;
    bvec4 _Fh;
    bvec4 _F0c;
    bvec4 _F0h;
    bvec4 _F1h;
    bvec4 _Bc;
    bvec4 _Bv;
    bvec4 _B0c;
    bvec4 _B0v;
    bvec4 _B1v;
    bvec4 _Hc;
    bvec4 _Hv;
    bvec4 _H0c;
    bvec4 _H0v;
    bvec4 _H1v;
    bvec2 _lvl2x;
    bvec2 _lvl2y;
    bvec2 _lvl2z;
    bvec2 _lvl2w;
    bvec2 _lvl3x;
    bvec2 _lvl3y;
    bvec2 _lvl3z;
    bvec2 _lvl3w;
    bvec2 _lvl4x;
    bvec2 _lvl4y;
    bvec2 _lvl4z;
    bvec2 _lvl4w;
    bvec2 _lvl5x;
    bvec2 _lvl5y;
    bvec2 _lvl5z;
    bvec2 _lvl5w;
    bvec2 _lvl6x;
    bvec2 _lvl6y;
    bvec2 _lvl6z;
    bvec2 _lvl6w;
    vec4 _crn;
    vec4 _mid;
    _E = COMPAT_TEXTURE(Texture, TEX0.xy);
    _D = COMPAT_TEXTURE(Texture, TEX1.xw);
    _D0 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _D1 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _F = COMPAT_TEXTURE(Texture, TEX2.xw);
    _F0 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _F1 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _B = COMPAT_TEXTURE(Texture, TEX3.xy);
    _B0 = COMPAT_TEXTURE(Texture, TEX3.xz);
    _B1 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _H = COMPAT_TEXTURE(Texture, TEX4.xy);
    _H0 = COMPAT_TEXTURE(Texture, TEX4.xz);
    _H1 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _a0063 = _E*1.50000000E+01 + 5.00000000E-01;
    _a0065 = _a0063/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0065);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0063 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0063.x < 0.00000000E+00 ? (-_c0063).x : _c0063.x, _a0063.y < 0.00000000E+00 ? (-_c0063).y : _c0063.y, _a0063.z < 0.00000000E+00 ? (-_c0063).z : _c0063.z, _a0063.w < 0.00000000E+00 ? (-_c0063).w : _c0063.w);
    _TMP21 = floor(_TMP20);
    _Ec = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0075 = _E*7.50000000E+00 + 2.50000000E-01;
    _a0077 = _a0075/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0077);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0075 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0075.x < 0.00000000E+00 ? (-_c0075).x : _c0075.x, _a0075.y < 0.00000000E+00 ? (-_c0075).y : _c0075.y, _a0075.z < 0.00000000E+00 ? (-_c0075).z : _c0075.z, _a0075.w < 0.00000000E+00 ? (-_c0075).w : _c0075.w);
    _TMP23 = floor(_TMP22);
    _Eh = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0087 = _E*3.75000000E+00 + 1.25000000E-01;
    _a0089 = _a0087/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0089);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0087 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0087.x < 0.00000000E+00 ? (-_c0087).x : _c0087.x, _a0087.y < 0.00000000E+00 ? (-_c0087).y : _c0087.y, _a0087.z < 0.00000000E+00 ? (-_c0087).z : _c0087.z, _a0087.w < 0.00000000E+00 ? (-_c0087).w : _c0087.w);
    _TMP25 = floor(_TMP24);
    _Ev = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _a0099 = _E*1.87500000E+00 + 6.25000000E-02;
    _a0101 = _a0099/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0101);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0099 = _TMP29*_TMP30;
    _TMP26 = vec4(_a0099.x < 0.00000000E+00 ? (-_c0099).x : _c0099.x, _a0099.y < 0.00000000E+00 ? (-_c0099).y : _c0099.y, _a0099.z < 0.00000000E+00 ? (-_c0099).z : _c0099.z, _a0099.w < 0.00000000E+00 ? (-_c0099).w : _c0099.w);
    _TMP27 = floor(_TMP26);
    _Eo = bvec4(bool(_TMP27.x), bool(_TMP27.y), bool(_TMP27.z), bool(_TMP27.w));
    _a0111 = _D*1.50000000E+01 + 5.00000000E-01;
    _a0113 = _a0111/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0113);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0111 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0111.x < 0.00000000E+00 ? (-_c0111).x : _c0111.x, _a0111.y < 0.00000000E+00 ? (-_c0111).y : _c0111.y, _a0111.z < 0.00000000E+00 ? (-_c0111).z : _c0111.z, _a0111.w < 0.00000000E+00 ? (-_c0111).w : _c0111.w);
    _TMP21 = floor(_TMP20);
    _Dc = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0123 = _D*7.50000000E+00 + 2.50000000E-01;
    _a0125 = _a0123/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0125);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0123 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0123.x < 0.00000000E+00 ? (-_c0123).x : _c0123.x, _a0123.y < 0.00000000E+00 ? (-_c0123).y : _c0123.y, _a0123.z < 0.00000000E+00 ? (-_c0123).z : _c0123.z, _a0123.w < 0.00000000E+00 ? (-_c0123).w : _c0123.w);
    _TMP23 = floor(_TMP22);
    _Dh = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0135 = _D0*1.50000000E+01 + 5.00000000E-01;
    _a0137 = _a0135/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0137);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0135 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0135.x < 0.00000000E+00 ? (-_c0135).x : _c0135.x, _a0135.y < 0.00000000E+00 ? (-_c0135).y : _c0135.y, _a0135.z < 0.00000000E+00 ? (-_c0135).z : _c0135.z, _a0135.w < 0.00000000E+00 ? (-_c0135).w : _c0135.w);
    _TMP21 = floor(_TMP20);
    _D0c = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0147 = _D0*7.50000000E+00 + 2.50000000E-01;
    _a0149 = _a0147/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0149);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0147 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0147.x < 0.00000000E+00 ? (-_c0147).x : _c0147.x, _a0147.y < 0.00000000E+00 ? (-_c0147).y : _c0147.y, _a0147.z < 0.00000000E+00 ? (-_c0147).z : _c0147.z, _a0147.w < 0.00000000E+00 ? (-_c0147).w : _c0147.w);
    _TMP23 = floor(_TMP22);
    _D0h = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0159 = _D1*7.50000000E+00 + 2.50000000E-01;
    _a0161 = _a0159/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0161);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0159 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0159.x < 0.00000000E+00 ? (-_c0159).x : _c0159.x, _a0159.y < 0.00000000E+00 ? (-_c0159).y : _c0159.y, _a0159.z < 0.00000000E+00 ? (-_c0159).z : _c0159.z, _a0159.w < 0.00000000E+00 ? (-_c0159).w : _c0159.w);
    _TMP23 = floor(_TMP22);
    _D1h = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0171 = _F*1.50000000E+01 + 5.00000000E-01;
    _a0173 = _a0171/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0173);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0171 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0171.x < 0.00000000E+00 ? (-_c0171).x : _c0171.x, _a0171.y < 0.00000000E+00 ? (-_c0171).y : _c0171.y, _a0171.z < 0.00000000E+00 ? (-_c0171).z : _c0171.z, _a0171.w < 0.00000000E+00 ? (-_c0171).w : _c0171.w);
    _TMP21 = floor(_TMP20);
    _Fc = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0183 = _F*7.50000000E+00 + 2.50000000E-01;
    _a0185 = _a0183/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0185);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0183 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0183.x < 0.00000000E+00 ? (-_c0183).x : _c0183.x, _a0183.y < 0.00000000E+00 ? (-_c0183).y : _c0183.y, _a0183.z < 0.00000000E+00 ? (-_c0183).z : _c0183.z, _a0183.w < 0.00000000E+00 ? (-_c0183).w : _c0183.w);
    _TMP23 = floor(_TMP22);
    _Fh = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0195 = _F0*1.50000000E+01 + 5.00000000E-01;
    _a0197 = _a0195/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0197);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0195 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0195.x < 0.00000000E+00 ? (-_c0195).x : _c0195.x, _a0195.y < 0.00000000E+00 ? (-_c0195).y : _c0195.y, _a0195.z < 0.00000000E+00 ? (-_c0195).z : _c0195.z, _a0195.w < 0.00000000E+00 ? (-_c0195).w : _c0195.w);
    _TMP21 = floor(_TMP20);
    _F0c = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0207 = _F0*7.50000000E+00 + 2.50000000E-01;
    _a0209 = _a0207/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0209);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0207 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0207.x < 0.00000000E+00 ? (-_c0207).x : _c0207.x, _a0207.y < 0.00000000E+00 ? (-_c0207).y : _c0207.y, _a0207.z < 0.00000000E+00 ? (-_c0207).z : _c0207.z, _a0207.w < 0.00000000E+00 ? (-_c0207).w : _c0207.w);
    _TMP23 = floor(_TMP22);
    _F0h = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0219 = _F1*7.50000000E+00 + 2.50000000E-01;
    _a0221 = _a0219/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0221);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0219 = _TMP29*_TMP30;
    _TMP22 = vec4(_a0219.x < 0.00000000E+00 ? (-_c0219).x : _c0219.x, _a0219.y < 0.00000000E+00 ? (-_c0219).y : _c0219.y, _a0219.z < 0.00000000E+00 ? (-_c0219).z : _c0219.z, _a0219.w < 0.00000000E+00 ? (-_c0219).w : _c0219.w);
    _TMP23 = floor(_TMP22);
    _F1h = bvec4(bool(_TMP23.x), bool(_TMP23.y), bool(_TMP23.z), bool(_TMP23.w));
    _a0231 = _B*1.50000000E+01 + 5.00000000E-01;
    _a0233 = _a0231/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0233);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0231 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0231.x < 0.00000000E+00 ? (-_c0231).x : _c0231.x, _a0231.y < 0.00000000E+00 ? (-_c0231).y : _c0231.y, _a0231.z < 0.00000000E+00 ? (-_c0231).z : _c0231.z, _a0231.w < 0.00000000E+00 ? (-_c0231).w : _c0231.w);
    _TMP21 = floor(_TMP20);
    _Bc = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0243 = _B*3.75000000E+00 + 1.25000000E-01;
    _a0245 = _a0243/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0245);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0243 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0243.x < 0.00000000E+00 ? (-_c0243).x : _c0243.x, _a0243.y < 0.00000000E+00 ? (-_c0243).y : _c0243.y, _a0243.z < 0.00000000E+00 ? (-_c0243).z : _c0243.z, _a0243.w < 0.00000000E+00 ? (-_c0243).w : _c0243.w);
    _TMP25 = floor(_TMP24);
    _Bv = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _a0255 = _B0*1.50000000E+01 + 5.00000000E-01;
    _a0257 = _a0255/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0257);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0255 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0255.x < 0.00000000E+00 ? (-_c0255).x : _c0255.x, _a0255.y < 0.00000000E+00 ? (-_c0255).y : _c0255.y, _a0255.z < 0.00000000E+00 ? (-_c0255).z : _c0255.z, _a0255.w < 0.00000000E+00 ? (-_c0255).w : _c0255.w);
    _TMP21 = floor(_TMP20);
    _B0c = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0267 = _B0*3.75000000E+00 + 1.25000000E-01;
    _a0269 = _a0267/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0269);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0267 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0267.x < 0.00000000E+00 ? (-_c0267).x : _c0267.x, _a0267.y < 0.00000000E+00 ? (-_c0267).y : _c0267.y, _a0267.z < 0.00000000E+00 ? (-_c0267).z : _c0267.z, _a0267.w < 0.00000000E+00 ? (-_c0267).w : _c0267.w);
    _TMP25 = floor(_TMP24);
    _B0v = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _a0279 = _B1*3.75000000E+00 + 1.25000000E-01;
    _a0281 = _a0279/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0281);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0279 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0279.x < 0.00000000E+00 ? (-_c0279).x : _c0279.x, _a0279.y < 0.00000000E+00 ? (-_c0279).y : _c0279.y, _a0279.z < 0.00000000E+00 ? (-_c0279).z : _c0279.z, _a0279.w < 0.00000000E+00 ? (-_c0279).w : _c0279.w);
    _TMP25 = floor(_TMP24);
    _B1v = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _a0291 = _H*1.50000000E+01 + 5.00000000E-01;
    _a0293 = _a0291/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0293);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0291 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0291.x < 0.00000000E+00 ? (-_c0291).x : _c0291.x, _a0291.y < 0.00000000E+00 ? (-_c0291).y : _c0291.y, _a0291.z < 0.00000000E+00 ? (-_c0291).z : _c0291.z, _a0291.w < 0.00000000E+00 ? (-_c0291).w : _c0291.w);
    _TMP21 = floor(_TMP20);
    _Hc = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0303 = _H*3.75000000E+00 + 1.25000000E-01;
    _a0305 = _a0303/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0305);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0303 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0303.x < 0.00000000E+00 ? (-_c0303).x : _c0303.x, _a0303.y < 0.00000000E+00 ? (-_c0303).y : _c0303.y, _a0303.z < 0.00000000E+00 ? (-_c0303).z : _c0303.z, _a0303.w < 0.00000000E+00 ? (-_c0303).w : _c0303.w);
    _TMP25 = floor(_TMP24);
    _Hv = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _a0315 = _H0*1.50000000E+01 + 5.00000000E-01;
    _a0317 = _a0315/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0317);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0315 = _TMP29*_TMP30;
    _TMP20 = vec4(_a0315.x < 0.00000000E+00 ? (-_c0315).x : _c0315.x, _a0315.y < 0.00000000E+00 ? (-_c0315).y : _c0315.y, _a0315.z < 0.00000000E+00 ? (-_c0315).z : _c0315.z, _a0315.w < 0.00000000E+00 ? (-_c0315).w : _c0315.w);
    _TMP21 = floor(_TMP20);
    _H0c = bvec4(bool(_TMP21.x), bool(_TMP21.y), bool(_TMP21.z), bool(_TMP21.w));
    _a0327 = _H0*3.75000000E+00 + 1.25000000E-01;
    _a0329 = _a0327/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0329);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0327 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0327.x < 0.00000000E+00 ? (-_c0327).x : _c0327.x, _a0327.y < 0.00000000E+00 ? (-_c0327).y : _c0327.y, _a0327.z < 0.00000000E+00 ? (-_c0327).z : _c0327.z, _a0327.w < 0.00000000E+00 ? (-_c0327).w : _c0327.w);
    _TMP25 = floor(_TMP24);
    _H0v = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _a0339 = _H1*3.75000000E+00 + 1.25000000E-01;
    _a0341 = _a0339/vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00);
    _TMP28 = abs(_a0341);
    _TMP29 = fract(_TMP28);
    _TMP30 = abs(vec4( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00, 2.00000000E+00));
    _c0339 = _TMP29*_TMP30;
    _TMP24 = vec4(_a0339.x < 0.00000000E+00 ? (-_c0339).x : _c0339.x, _a0339.y < 0.00000000E+00 ? (-_c0339).y : _c0339.y, _a0339.z < 0.00000000E+00 ? (-_c0339).z : _c0339.z, _a0339.w < 0.00000000E+00 ? (-_c0339).w : _c0339.w);
    _TMP25 = floor(_TMP24);
    _H1v = bvec4(bool(_TMP25.x), bool(_TMP25.y), bool(_TMP25.z), bool(_TMP25.w));
    _lvl2x = bvec2(_Ec.x && _Eh.y && _Dc.z, _Ec.y && _Eh.x && _Fc.w);
    _lvl2y = bvec2(_Ec.y && _Ev.z && _Bc.w, _Ec.z && _Ev.y && _Hc.x);
    _lvl2z = bvec2(_Ec.w && _Eh.z && _Dc.y, _Ec.z && _Eh.w && _Fc.x);
    _lvl2w = bvec2(_Ec.x && _Ev.w && _Bc.z, _Ec.w && _Ev.x && _Hc.y);
    _lvl3x = bvec2(_lvl2x.y && _Dh.y && _Dh.x && _Fh.z, _lvl2w.y && _Bv.w && _Bv.x && _Hv.z);
    _lvl3y = bvec2(_lvl2x.x && _Fh.x && _Fh.y && _Dh.w, _lvl2y.y && _Bv.z && _Bv.y && _Hv.w);
    _lvl3z = bvec2(_lvl2z.x && _Fh.w && _Fh.z && _Dh.x, _lvl2y.x && _Hv.y && _Hv.z && _Bv.x);
    _lvl3w = bvec2(_lvl2z.y && _Dh.z && _Dh.w && _Fh.y, _lvl2w.x && _Hv.x && _Hv.w && _Bv.y);
    _lvl4x = bvec2(_Dc.x && _Dh.y && _Eh.x && _Eh.y && _Fh.x && _Fh.y && _D0c.z && _D0h.w, _Bc.x && _Bv.w && _Ev.x && _Ev.w && _Hv.x && _Hv.w && _B0c.z && _B0v.y);
    _lvl4y = bvec2(_Fc.y && _Fh.x && _Eh.y && _Eh.x && _Dh.y && _Dh.x && _F0c.w && _F0h.z, _Bc.y && _Bv.z && _Ev.y && _Ev.z && _Hv.y && _Hv.z && _B0c.w && _B0v.x);
    _lvl4z = bvec2(_Fc.z && _Fh.w && _Eh.z && _Eh.w && _Dh.z && _Dh.w && _F0c.x && _F0h.y, _Hc.z && _Hv.y && _Ev.z && _Ev.y && _Bv.z && _Bv.y && _H0c.x && _H0v.w);
    _lvl4w = bvec2(_Dc.w && _Dh.z && _Eh.w && _Eh.z && _Fh.w && _Fh.z && _D0c.y && _D0h.x, _Hc.w && _Hv.x && _Ev.w && _Ev.x && _Bv.w && _Bv.x && _H0c.y && _H0v.z);
    _lvl5x = bvec2(_lvl4x.x && _F0h.x && _F0h.y && _D1h.z && _D1h.w, _lvl4y.x && _D0h.y && _D0h.x && _F1h.w && _F1h.z);
    _lvl5y = bvec2(_lvl4y.y && _H0v.y && _H0v.z && _B1v.w && _B1v.x, _lvl4z.y && _B0v.z && _B0v.y && _H1v.x && _H1v.w);
    _lvl5z = bvec2(_lvl4w.x && _F0h.w && _F0h.z && _D1h.y && _D1h.x, _lvl4z.x && _D0h.z && _D0h.w && _F1h.x && _F1h.y);
    _lvl5w = bvec2(_lvl4x.y && _H0v.x && _H0v.w && _B1v.z && _B1v.y, _lvl4w.y && _B0v.w && _B0v.x && _H1v.y && _H1v.z);
    _lvl6x = bvec2(_lvl5x.y && _D1h.y && _D1h.x, _lvl5w.y && _B1v.w && _B1v.x);
    _lvl6y = bvec2(_lvl5x.x && _F1h.x && _F1h.y, _lvl5y.y && _B1v.z && _B1v.y);
    _lvl6z = bvec2(_lvl5z.x && _F1h.w && _F1h.z, _lvl5y.x && _H1v.y && _H1v.z);
    _lvl6w = bvec2(_lvl5z.y && _D1h.z && _D1h.w, _lvl5w.x && _H1v.x && _H1v.w);
    if (_Ec.x && _Eo.x || _lvl3x.x || _lvl4x.x || _lvl6x.x) { 
        _TMP0 = 3;
    } else {
        if (_Ec.x || _lvl3x.y || _lvl4x.y || _lvl6x.y) { 
            _TMP1 = 1;
        } else {
            _TMP1 = 0;
        } 
        _TMP0 = _TMP1;
    } 
    _crn.x = float(_TMP0);
    if (_Ec.y && _Eo.y || _lvl3y.x || _lvl4y.x || _lvl6y.x) { 
        _TMP2 = 3;
    } else {
        if (_Ec.y || _lvl3y.y || _lvl4y.y || _lvl6y.y) { 
            _TMP3 = 2;
        } else {
            _TMP3 = 0;
        } 
        _TMP2 = _TMP3;
    } 
    _crn.y = float(_TMP2);
    if (_Ec.z && _Eo.z || _lvl3z.x || _lvl4z.x || _lvl6z.x) { 
        _TMP4 = 4;
    } else {
        if (_Ec.z || _lvl3z.y || _lvl4z.y || _lvl6z.y) { 
            _TMP5 = 2;
        } else {
            _TMP5 = 0;
        } 
        _TMP4 = _TMP5;
    } 
    _crn.z = float(_TMP4);
    if (_Ec.w && _Eo.w || _lvl3w.x || _lvl4w.x || _lvl6w.x) { 
        _TMP6 = 4;
    } else {
        if (_Ec.w || _lvl3w.y || _lvl4w.y || _lvl6w.y) { 
            _TMP7 = 1;
        } else {
            _TMP7 = 0;
        } 
        _TMP6 = _TMP7;
    } 
    _crn.w = float(_TMP6);
    _TMP9 = _lvl2x.x || _lvl2x.y;
    _TMP10 = _lvl5x.x || _lvl5x.y;
    if (_TMP9 || _TMP10 || _Ec.x && _Dc.z && _Ec.y && _Fc.w) { 
        _TMP8 = 3;
    } else {
        _TMP8 = 0;
    } 
    _mid.x = float(_TMP8);
    _TMP12 = _lvl2y.x || _lvl2y.y;
    _TMP13 = _lvl5y.x || _lvl5y.y;
    if (_TMP12 || _TMP13 || _Ec.y && _Bc.w && _Ec.z && _Hc.x) { 
        _TMP11 = 2;
    } else {
        _TMP11 = 0;
    } 
    _mid.y = float(_TMP11);
    _TMP15 = _lvl2z.x || _lvl2z.y;
    _TMP16 = _lvl5z.x || _lvl5z.y;
    if (_TMP15 || _TMP16 || _Ec.z && _Fc.x && _Ec.w && _Dc.y) { 
        _TMP14 = 4;
    } else {
        _TMP14 = 0;
    } 
    _mid.z = float(_TMP14);
    _TMP18 = _lvl2w.x || _lvl2w.y;
    _TMP19 = _lvl5w.x || _lvl5w.y;
    if (_TMP18 || _TMP19 || _Ec.w && _Hc.y && _Ec.x && _Bc.z) { 
        _TMP17 = 1;
    } else {
        _TMP17 = 0;
    } 
    _mid.w = float(_TMP17);
    _ret_0 = (_crn + 5.00000000E+00*_mid)/2.40000000E+01;
    FragColor = _ret_0;
    return;
} 
#endif
