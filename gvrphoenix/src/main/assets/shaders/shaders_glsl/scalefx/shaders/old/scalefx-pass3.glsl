// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     vec2 _tex_coord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct prev {
    vec2 _texture_size1;
    vec2 _tex_coord;
float _placeholder37;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
prev _PASSPREV41;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform COMPAT_PRECISION vec2 PassPrev4TextureSize;
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 PassPrev4TexCoord;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ps = 1.00000000E+00/PassPrev4TextureSize;
    _OUT._t1 = PassPrev4TexCoord.xxxy + vec4(0.00000000E+00, -_ps.x, -2.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t2 = PassPrev4TexCoord.xyxy + vec4(_ps.x, 0.00000000E+00, 2.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t3 = PassPrev4TexCoord.xyxy + vec4(0.00000000E+00, -_ps.y, 0.00000000E+00, -2.00000000E+00*_ps.y);
    _OUT._t4 = PassPrev4TexCoord.xyxy + vec4(0.00000000E+00, _ps.y, 0.00000000E+00, 2.00000000E+00*_ps.y);
    _ret_0._position1 = _r0007;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    gl_Position = _r0007;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec2 _tex_coord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct prev {
    vec2 _texture_size1;
    vec2 _tex_coord;
float _placeholder38;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _TMP17;
vec2 _TMP9;
vec2 _TMP10;
vec2 _TMP11;
vec2 _TMP12;
vec2 _TMP13;
vec2 _TMP14;
vec2 _TMP15;
vec2 _TMP16;
float _TMP1;
float _TMP4;
float _TMP7;
float _TMP8;
float _TMP5;
float _TMP6;
float _TMP2;
float _TMP3;
vec2 _TMP0;
vec4 _TMP19;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP18;
uniform sampler2D Texture;
input_dummy _IN1;
prev _PASSPREV41;
vec4 _TMP29;
vec4 _a0032;
vec4 _c0032;
vec4 _a0034;
vec4 _TMP41;
vec4 _a0044;
vec4 _c0044;
vec4 _a0046;
vec2 _x0054;
vec2 _x0056;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform sampler2D PassPrev4Texture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _E;
    vec2 _fp;
    _E = COMPAT_TEXTURE(Texture, TEX0.xy);
    _a0032 = _E*8.00000000E+01 + 5.00000000E-01;
    _a0034 = _a0032/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP20 = abs(_a0034);
    _TMP21 = fract(_TMP20);
    _TMP22 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0032 = _TMP21*_TMP22;
    _TMP18 = vec4(_a0032.x < 0.00000000E+00 ? (-_c0032).x : _c0032.x, _a0032.y < 0.00000000E+00 ? (-_c0032).y : _c0032.y, _a0032.z < 0.00000000E+00 ? (-_c0032).z : _c0032.z, _a0032.w < 0.00000000E+00 ? (-_c0032).w : _c0032.w);
    _TMP29 = floor(_TMP18);
    _a0044 = _E*8.88888836E+00 + 5.55550009E-02;
    _a0046 = _a0044/vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00);
    _TMP20 = abs(_a0046);
    _TMP21 = fract(_TMP20);
    _TMP22 = abs(vec4( 9.00000000E+00, 9.00000000E+00, 9.00000000E+00, 9.00000000E+00));
    _c0044 = _TMP21*_TMP22;
    _TMP19 = vec4(_a0044.x < 0.00000000E+00 ? (-_c0044).x : _c0044.x, _a0044.y < 0.00000000E+00 ? (-_c0044).y : _c0044.y, _a0044.z < 0.00000000E+00 ? (-_c0044).z : _c0044.z, _a0044.w < 0.00000000E+00 ? (-_c0044).w : _c0044.w);
    _TMP41 = floor(_TMP19);
    _x0054 = TEX0.xy*TextureSize;
    _TMP0 = fract(_x0054);
    _x0056 = 3.00000000E+00*_TMP0;
    _fp = floor(_x0056);
    if (_fp.y == 0.00000000E+00) { 
        if (_fp.x == 0.00000000E+00) { 
            _TMP2 = _TMP29.x;
        } else {
            if (_fp.x == 1.00000000E+00) { 
                _TMP3 = _TMP41.x;
            } else {
                _TMP3 = _TMP29.y;
            } 
            _TMP2 = _TMP3;
        } 
        _TMP1 = _TMP2;
    } else {
        if (_fp.y == 1.00000000E+00) { 
            if (_fp.x == 0.00000000E+00) { 
                _TMP5 = _TMP41.w;
            } else {
                if (_fp.x == 1.00000000E+00) { 
                    _TMP6 = 0.00000000E+00;
                } else {
                    _TMP6 = _TMP41.y;
                } 
                _TMP5 = _TMP6;
            } 
            _TMP4 = _TMP5;
        } else {
            if (_fp.x == 0.00000000E+00) { 
                _TMP7 = _TMP29.w;
            } else {
                if (_fp.x == 1.00000000E+00) { 
                    _TMP8 = _TMP41.z;
                } else {
                    _TMP8 = _TMP29.z;
                } 
                _TMP7 = _TMP8;
            } 
            _TMP4 = _TMP7;
        } 
        _TMP1 = _TMP4;
    } 
    if (_TMP1 == 0.00000000E+00) { 
        _TMP9 = TEX1.xw;
    } else {
        if (_TMP1 == 1.00000000E+00) { 
            _TMP10 = TEX1.yw;
        } else {
            if (_TMP1 == 2.00000000E+00) { 
                _TMP11 = TEX1.zw;
            } else {
                if (_TMP1 == 3.00000000E+00) { 
                    _TMP12 = TEX2.xy;
                } else {
                    if (_TMP1 == 4.00000000E+00) { 
                        _TMP13 = TEX2.zw;
                    } else {
                        if (_TMP1 == 5.00000000E+00) { 
                            _TMP14 = TEX3.xy;
                        } else {
                            if (_TMP1 == 6.00000000E+00) { 
                                _TMP15 = TEX3.zw;
                            } else {
                                if (_TMP1 == 7.00000000E+00) { 
                                    _TMP16 = TEX4.xy;
                                } else {
                                    _TMP16 = TEX4.zw;
                                } 
                                _TMP15 = _TMP16;
                            } 
                            _TMP14 = _TMP15;
                        } 
                        _TMP13 = _TMP14;
                    } 
                    _TMP12 = _TMP13;
                } 
                _TMP11 = _TMP12;
            } 
            _TMP10 = _TMP11;
        } 
        _TMP9 = _TMP10;
    } 
    _TMP17 = COMPAT_TEXTURE(PassPrev4Texture, _TMP9);
    FragColor.xyz = _TMP17.xyz;
    return;
} 
#endif
