// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
};
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
};
vec4 _ret_0;
vec3 _TMP51;
vec3 _TMP59;
float _TMP50;
vec3 _TMP58;
vec3 _TMP57;
vec3 _TMP56;
vec3 _TMP55;
bool _TMP45;
bool _TMP44;
vec4 _TMP43;
vec4 _TMP42;
vec4 _TMP41;
vec4 _TMP40;
vec4 _TMP39;
vec4 _TMP38;
vec4 _TMP37;
vec4 _TMP36;
vec4 _TMP34;
vec4 _TMP33;
vec4 _TMP32;
vec4 _TMP31;
vec4 _TMP30;
vec4 _TMP29;
vec4 _TMP28;
vec4 _TMP27;
vec4 _TMP26;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP54;
vec4 _TMP53;
float _TMP64;
float _TMP63;
float _TMP62;
float _TMP61;
float _TMP52;
float _TMP60;
vec2 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0077;
float _TMP78;
vec2 _v0079;
vec2 _pt20079;
float _TMP86;
vec2 _v0087;
vec2 _pt20087;
float _TMP94;
vec2 _v0095;
vec2 _pt20095;
float _TMP102;
vec2 _v0103;
vec2 _pt20103;
vec4 _x0111;
vec4 _res0111;
vec4 _x0113;
vec4 _x0123;
float _TMP132;
vec2 _v0133;
vec2 _pt20133;
float _TMP140;
vec2 _v0141;
float _TMP148;
vec2 _v0149;
vec2 _pt20149;
float _TMP156;
vec2 _v0157;
vec2 _pt20157;
vec4 _x0165;
vec4 _res0165;
vec4 _x0167;
vec4 _x0177;
float _TMP186;
vec2 _v0187;
vec2 _pt20187;
float _TMP194;
vec2 _v0195;
vec2 _pt20195;
float _TMP202;
vec2 _v0203;
vec2 _pt20203;
float _TMP210;
vec2 _v0211;
vec2 _pt20211;
vec4 _x0219;
vec4 _res0219;
vec4 _x0221;
vec4 _x0231;
float _TMP240;
vec2 _v0241;
vec2 _pt20241;
float _TMP248;
vec2 _v0249;
vec2 _pt20249;
float _TMP256;
vec2 _v0257;
vec2 _pt20257;
float _TMP264;
vec2 _v0265;
vec2 _pt20265;
vec4 _x0273;
vec4 _res0273;
vec4 _x0275;
vec4 _x0285;
vec2 _c0295;
vec2 _c0297;
vec2 _c0299;
vec2 _c0301;
vec2 _c0303;
vec2 _c0307;
vec2 _c0309;
vec2 _c0311;
vec2 _c0313;
vec2 _c0315;
vec2 _c0317;
vec2 _c0319;
vec2 _c0321;
vec2 _c0323;
vec2 _c0325;
vec2 _c0329;
vec2 _c0331;
vec2 _c0333;
vec2 _c0335;
vec2 _c0337;
vec2 _c0339;
vec2 _c0341;
vec2 _c0343;
vec4 _r0347;
vec4 _r0359;
bvec3 _a0369;
bvec3 _a0371;
vec3 _TMP372;
vec3 _TMP380;
vec3 _r0389;
vec3 _r0391;
vec3 _r0393;
vec3 _r0395;
vec4 _r0397;
vec3 _TMP408;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _color;
    vec2 _dx;
    vec2 _dy;
    vec2 _pc;
    vec2 _tex;
    vec2 _tc;
    bool _block_3d;
    _pc = (TEX0.xy*TextureSize)/2.00000000E+00;
    _TMP0 = floor(_pc);
    _tex = ((_TMP0 + vec2( 5.00000000E-01, 5.00000000E-01))*2.00000000E+00)/TextureSize;
    _x0077 = _pc - vec2( 5.00000000E-01, 5.00000000E-01);
    _TMP1 = floor(_x0077);
    _tc = _TMP1 + vec2( 5.00000000E-01, 5.00000000E-01);
    _pt20079 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0079 = _pt20079 - _pc;
    _TMP52 = dot(_v0079, _v0079);
    _TMP60 = inversesqrt(_TMP52);
    _TMP78 = 1.00000000E+00/_TMP60;
    _pt20087 = _tc - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0087 = _pt20087 - _pc;
    _TMP52 = dot(_v0087, _v0087);
    _TMP60 = inversesqrt(_TMP52);
    _TMP86 = 1.00000000E+00/_TMP60;
    _pt20095 = (_tc + vec2( 1.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0095 = _pt20095 - _pc;
    _TMP52 = dot(_v0095, _v0095);
    _TMP60 = inversesqrt(_TMP52);
    _TMP94 = 1.00000000E+00/_TMP60;
    _pt20103 = (_tc + vec2( 2.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0103 = _pt20103 - _pc;
    _TMP52 = dot(_v0103, _v0103);
    _TMP60 = inversesqrt(_TMP52);
    _TMP102 = 1.00000000E+00/_TMP60;
    _x0111 = vec4(_TMP78, _TMP86, _TMP94, _TMP102);
    _x0113 = _x0111*1.31946886E+00;
    _TMP61 = sin(_x0113.x);
    _TMP62 = sin(_x0113.y);
    _TMP63 = sin(_x0113.z);
    _TMP64 = sin(_x0113.w);
    _TMP53 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _x0123 = _x0111*2.89026546E+00;
    _TMP61 = sin(_x0123.x);
    _TMP62 = sin(_x0123.y);
    _TMP63 = sin(_x0123.z);
    _TMP64 = sin(_x0123.w);
    _TMP54 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _res0111 = vec4(_x0111.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0111*_x0111)).x, _x0111.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0111*_x0111)).y, _x0111.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0111*_x0111)).z, _x0111.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0111*_x0111)).w);
    _pt20133 = _tc - vec2( 1.00000000E+00, 0.00000000E+00);
    _v0133 = _pt20133 - _pc;
    _TMP52 = dot(_v0133, _v0133);
    _TMP60 = inversesqrt(_TMP52);
    _TMP132 = 1.00000000E+00/_TMP60;
    _v0141 = _tc - _pc;
    _TMP52 = dot(_v0141, _v0141);
    _TMP60 = inversesqrt(_TMP52);
    _TMP140 = 1.00000000E+00/_TMP60;
    _pt20149 = _tc + vec2( 1.00000000E+00, 0.00000000E+00);
    _v0149 = _pt20149 - _pc;
    _TMP52 = dot(_v0149, _v0149);
    _TMP60 = inversesqrt(_TMP52);
    _TMP148 = 1.00000000E+00/_TMP60;
    _pt20157 = _tc + vec2( 2.00000000E+00, 0.00000000E+00);
    _v0157 = _pt20157 - _pc;
    _TMP52 = dot(_v0157, _v0157);
    _TMP60 = inversesqrt(_TMP52);
    _TMP156 = 1.00000000E+00/_TMP60;
    _x0165 = vec4(_TMP132, _TMP140, _TMP148, _TMP156);
    _x0167 = _x0165*1.31946886E+00;
    _TMP61 = sin(_x0167.x);
    _TMP62 = sin(_x0167.y);
    _TMP63 = sin(_x0167.z);
    _TMP64 = sin(_x0167.w);
    _TMP53 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _x0177 = _x0165*2.89026546E+00;
    _TMP61 = sin(_x0177.x);
    _TMP62 = sin(_x0177.y);
    _TMP63 = sin(_x0177.z);
    _TMP64 = sin(_x0177.w);
    _TMP54 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _res0165 = vec4(_x0165.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0165*_x0165)).x, _x0165.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0165*_x0165)).y, _x0165.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0165*_x0165)).z, _x0165.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0165*_x0165)).w);
    _pt20187 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0187 = _pt20187 - _pc;
    _TMP52 = dot(_v0187, _v0187);
    _TMP60 = inversesqrt(_TMP52);
    _TMP186 = 1.00000000E+00/_TMP60;
    _pt20195 = _tc + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0195 = _pt20195 - _pc;
    _TMP52 = dot(_v0195, _v0195);
    _TMP60 = inversesqrt(_TMP52);
    _TMP194 = 1.00000000E+00/_TMP60;
    _pt20203 = _tc + vec2( 1.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0203 = _pt20203 - _pc;
    _TMP52 = dot(_v0203, _v0203);
    _TMP60 = inversesqrt(_TMP52);
    _TMP202 = 1.00000000E+00/_TMP60;
    _pt20211 = _tc + vec2( 2.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0211 = _pt20211 - _pc;
    _TMP52 = dot(_v0211, _v0211);
    _TMP60 = inversesqrt(_TMP52);
    _TMP210 = 1.00000000E+00/_TMP60;
    _x0219 = vec4(_TMP186, _TMP194, _TMP202, _TMP210);
    _x0221 = _x0219*1.31946886E+00;
    _TMP61 = sin(_x0221.x);
    _TMP62 = sin(_x0221.y);
    _TMP63 = sin(_x0221.z);
    _TMP64 = sin(_x0221.w);
    _TMP53 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _x0231 = _x0219*2.89026546E+00;
    _TMP61 = sin(_x0231.x);
    _TMP62 = sin(_x0231.y);
    _TMP63 = sin(_x0231.z);
    _TMP64 = sin(_x0231.w);
    _TMP54 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _res0219 = vec4(_x0219.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0219*_x0219)).x, _x0219.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0219*_x0219)).y, _x0219.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0219*_x0219)).z, _x0219.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0219*_x0219)).w);
    _pt20241 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0241 = _pt20241 - _pc;
    _TMP52 = dot(_v0241, _v0241);
    _TMP60 = inversesqrt(_TMP52);
    _TMP240 = 1.00000000E+00/_TMP60;
    _pt20249 = _tc + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0249 = _pt20249 - _pc;
    _TMP52 = dot(_v0249, _v0249);
    _TMP60 = inversesqrt(_TMP52);
    _TMP248 = 1.00000000E+00/_TMP60;
    _pt20257 = _tc + vec2( 1.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0257 = _pt20257 - _pc;
    _TMP52 = dot(_v0257, _v0257);
    _TMP60 = inversesqrt(_TMP52);
    _TMP256 = 1.00000000E+00/_TMP60;
    _pt20265 = _tc + vec2( 2.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0265 = _pt20265 - _pc;
    _TMP52 = dot(_v0265, _v0265);
    _TMP60 = inversesqrt(_TMP52);
    _TMP264 = 1.00000000E+00/_TMP60;
    _x0273 = vec4(_TMP240, _TMP248, _TMP256, _TMP264);
    _x0275 = _x0273*1.31946886E+00;
    _TMP61 = sin(_x0275.x);
    _TMP62 = sin(_x0275.y);
    _TMP63 = sin(_x0275.z);
    _TMP64 = sin(_x0275.w);
    _TMP53 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _x0285 = _x0273*2.89026546E+00;
    _TMP61 = sin(_x0285.x);
    _TMP62 = sin(_x0285.y);
    _TMP63 = sin(_x0285.z);
    _TMP64 = sin(_x0285.w);
    _TMP54 = vec4(_TMP61, _TMP62, _TMP63, _TMP64);
    _res0273 = vec4(_x0273.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0273*_x0273)).x, _x0273.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0273*_x0273)).y, _x0273.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0273*_x0273)).z, _x0273.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP53*_TMP54)/(_x0273*_x0273)).w);
    _dx = vec2( 2.00000000E+00, 0.00000000E+00)/TextureSize;
    _dy = vec2( 0.00000000E+00, 2.00000000E+00)/TextureSize;
    _tc = (_tc*2.00000000E+00)/TextureSize;
    _c0295 = (_tc - _dx) - _dy;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0295);
    _c0297 = _tc - _dy;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0297);
    _c0299 = (_tc + _dx) - _dy;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0299);
    _c0301 = (_tc + 2.00000000E+00*_dx) - _dy;
    _TMP21 = COMPAT_TEXTURE(Texture, _c0301);
    _c0303 = _tc - _dx;
    _TMP22 = COMPAT_TEXTURE(Texture, _c0303);
    _TMP23 = COMPAT_TEXTURE(Texture, _tc);
    _c0307 = _tc + _dx;
    _TMP24 = COMPAT_TEXTURE(Texture, _c0307);
    _c0309 = _tc + 2.00000000E+00*_dx;
    _TMP25 = COMPAT_TEXTURE(Texture, _c0309);
    _c0311 = (_tc - _dx) + _dy;
    _TMP26 = COMPAT_TEXTURE(Texture, _c0311);
    _c0313 = _tc + _dy;
    _TMP27 = COMPAT_TEXTURE(Texture, _c0313);
    _c0315 = _tc + _dx + _dy;
    _TMP28 = COMPAT_TEXTURE(Texture, _c0315);
    _c0317 = _tc + 2.00000000E+00*_dx + _dy;
    _TMP29 = COMPAT_TEXTURE(Texture, _c0317);
    _c0319 = (_tc - _dx) + 2.00000000E+00*_dy;
    _TMP30 = COMPAT_TEXTURE(Texture, _c0319);
    _c0321 = _tc + 2.00000000E+00*_dy;
    _TMP31 = COMPAT_TEXTURE(Texture, _c0321);
    _c0323 = _tc + _dx + 2.00000000E+00*_dy;
    _TMP32 = COMPAT_TEXTURE(Texture, _c0323);
    _c0325 = _tc + 2.00000000E+00*_dx + 2.00000000E+00*_dy;
    _TMP33 = COMPAT_TEXTURE(Texture, _c0325);
    _TMP34 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0329 = _tex + _dx + 2.50000000E-01*_dx + 2.50000000E-01*_dy;
    _TMP36 = COMPAT_TEXTURE(Texture, _c0329);
    _c0331 = (_tex + _dx + 2.50000000E-01*_dx) - 2.50000000E-01*_dy;
    _TMP37 = COMPAT_TEXTURE(Texture, _c0331);
    _c0333 = ((_tex + _dx) - 2.50000000E-01*_dx) - 2.50000000E-01*_dy;
    _TMP38 = COMPAT_TEXTURE(Texture, _c0333);
    _c0335 = ((_tex + _dx) - 2.50000000E-01*_dx) + 2.50000000E-01*_dy;
    _TMP39 = COMPAT_TEXTURE(Texture, _c0335);
    _c0337 = _tex + 2.50000000E-01*_dx + 2.50000000E-01*_dy + _dy;
    _TMP40 = COMPAT_TEXTURE(Texture, _c0337);
    _c0339 = ((_tex + 2.50000000E-01*_dx) - 2.50000000E-01*_dy) + _dy;
    _TMP41 = COMPAT_TEXTURE(Texture, _c0339);
    _c0341 = ((_tex - 2.50000000E-01*_dx) - 2.50000000E-01*_dy) + _dy;
    _TMP42 = COMPAT_TEXTURE(Texture, _c0341);
    _c0343 = (_tex - 2.50000000E-01*_dx) + 2.50000000E-01*_dy + _dy;
    _TMP43 = COMPAT_TEXTURE(Texture, _c0343);
    _r0347.x = dot(_TMP36.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0347.y = dot(_TMP37.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0347.z = dot(_TMP38.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0347.w = dot(_TMP39.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0359.x = dot(_TMP40.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0359.y = dot(_TMP41.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0359.z = dot(_TMP42.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0359.w = dot(_TMP43.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _a0369 = bvec3(_r0347.x == _r0347.y, _r0347.y == _r0347.z, _r0347.z == _r0347.w);
    _TMP44 = _a0369.x && _a0369.y && _a0369.z;
    _a0371 = bvec3(_r0359.x == _r0359.y, _r0359.y == _r0359.z, _r0359.z == _r0359.w);
    _TMP45 = _a0371.x && _a0371.y && _a0371.z;
    _block_3d = _TMP44 && _TMP45;
    _TMP55 = min(_TMP27.xyz, _TMP28.xyz);
    _TMP56 = min(_TMP24.xyz, _TMP55);
    _TMP372 = min(_TMP23.xyz, _TMP56);
    _TMP57 = max(_TMP27.xyz, _TMP28.xyz);
    _TMP58 = max(_TMP24.xyz, _TMP57);
    _TMP380 = max(_TMP23.xyz, _TMP58);
    _r0389 = _res0111.x*_TMP18.xyz;
    _r0389 = _r0389 + _res0111.y*_TMP19.xyz;
    _r0389 = _r0389 + _res0111.z*_TMP20.xyz;
    _r0389 = _r0389 + _res0111.w*_TMP21.xyz;
    _r0391 = _res0165.x*_TMP22.xyz;
    _r0391 = _r0391 + _res0165.y*_TMP23.xyz;
    _r0391 = _r0391 + _res0165.z*_TMP24.xyz;
    _r0391 = _r0391 + _res0165.w*_TMP25.xyz;
    _color = _r0389 + _r0391;
    _r0393 = _res0219.x*_TMP26.xyz;
    _r0393 = _r0393 + _res0219.y*_TMP27.xyz;
    _r0393 = _r0393 + _res0219.z*_TMP28.xyz;
    _r0393 = _r0393 + _res0219.w*_TMP29.xyz;
    _color = _color + _r0393;
    _r0395 = _res0273.x*_TMP30.xyz;
    _r0395 = _r0395 + _res0273.y*_TMP31.xyz;
    _r0395 = _r0395 + _res0273.z*_TMP32.xyz;
    _r0395 = _r0395 + _res0273.w*_TMP33.xyz;
    _color = _color + _r0395;
    _r0397.x = dot(_res0111, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _r0397.y = dot(_res0165, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _r0397.z = dot(_res0219, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _r0397.w = dot(_res0273, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP50 = dot(_r0397, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _color = _color/_TMP50;
    _TMP59 = min(_TMP380, _color);
    _TMP408 = max(_TMP372, _TMP59);
    _color = _color + 8.00000012E-01*(_TMP408 - _color);
    if (_block_3d) { 
        _TMP51 = _color;
    } else {
        _TMP51 = _TMP34.xyz;
    } 
    _ret_0 = vec4(_TMP51.x, _TMP51.y, _TMP51.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
