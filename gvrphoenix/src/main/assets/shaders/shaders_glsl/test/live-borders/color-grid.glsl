// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _oColor = COLOR;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0005;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec2 _TMP5;
vec2 _TMP11;
float _TMP10;
float _TMP9;
vec3 _TMP4;
float _TMP8;
float _TMP7;
float _TMP6;
float _TMP3;
float _TMP2;
float _TMP1;
vec2 _TMP0;
input_dummy _IN1;
vec2 _x0016;
float _a0022;
vec3 _x0024;
vec2 _x0032;
vec2 _x0038;
vec2 _x0040;
vec2 _TMP41;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _px;
    float _id;
    vec3 _co;
    vec2 _pa;
    vec3 _TMP14;
    _px = (1.00000000E+03*(-TextureSize.xy + 8.00000000E+00*(TEX0.xy*(TextureSize.xy/InputSize.xy)).xy))/TextureSize.y;
    _x0016 = _px + 5.00000000E-01;
    _TMP0 = floor(_x0016);
    _TMP1 = dot(_TMP0, vec2( 1.13099998E+02, 1.78099995E+01));
    _TMP2 = sin(_TMP1);
    _a0022 = float(FrameCount)*9.99999978E-03*4.00000000E+00 + _TMP2*4.37585469E+04;
    _TMP3 = cos(_a0022);
    _id = 5.00000000E-01 + 5.00000000E-01*_TMP3;
    _x0024 = (float(FrameCount)*9.99999978E-03 + 3.50000000E+00*_id) + vec3( 0.00000000E+00, 1.57000005E+00, 3.14000010E+00);
    _TMP6 = cos(_x0024.x);
    _TMP7 = cos(_x0024.y);
    _TMP8 = cos(_x0024.z);
    _TMP4 = vec3(_TMP6, _TMP7, _TMP8);
    _co = 5.00000000E-01 + 5.00000000E-01*_TMP4;
    _x0032 = 6.28310013E+00*_px;
    _TMP9 = cos(_x0032.x);
    _TMP10 = cos(_x0032.y);
    _TMP5 = vec2(_TMP9, _TMP10);
    _x0038 = _id*(5.00000000E-01 + 5.00000000E-01*_TMP5);
    _x0040 = _x0038/vec2( 2.00000003E-01, 2.00000003E-01);
    _TMP11 = min(vec2( 1.00000000E+00, 1.00000000E+00), _x0040);
    _TMP41 = max(vec2( 0.00000000E+00, 0.00000000E+00), _TMP11);
    _pa = _TMP41*_TMP41*(vec2( 3.00000000E+00, 3.00000000E+00) - 2.00000000E+00*_TMP41);
    _TMP14 = _co*_pa.x*_pa.y;
    _ret_0 = vec4(_TMP14.x, _TMP14.y, _TMP14.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
