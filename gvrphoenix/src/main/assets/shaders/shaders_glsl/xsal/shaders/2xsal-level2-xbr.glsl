// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
};
out_vertex _ret_0;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _OUT._texCoord1 = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _ret_0._position1 = _r0006;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = _OUT._texCoord1;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _OUT._texCoord1;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
};
vec4 _ret_0;
float _TMP38;
vec3 _TMP37;
float _TMP36;
vec3 _TMP35;
float _TMP34;
vec3 _TMP33;
float _TMP32;
vec3 _TMP31;
float _TMP30;
vec3 _TMP29;
float _TMP28;
vec3 _TMP27;
float _TMP26;
vec3 _TMP25;
float _TMP24;
vec3 _TMP23;
float _TMP22;
vec3 _TMP21;
float _TMP20;
vec3 _TMP19;
float _TMP18;
vec3 _TMP17;
float _TMP16;
vec3 _TMP15;
float _TMP14;
vec3 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _c0046;
vec2 _c0048;
vec2 _c0050;
vec2 _c0052;
vec2 _c0054;
vec2 _c0056;
vec2 _c0058;
vec2 _c0060;
vec2 _c0062;
vec2 _c0064;
vec2 _c0066;
vec2 _c0068;
vec3 _a0070;
vec3 _a0074;
vec3 _a0078;
vec3 _a0082;
vec3 _a0086;
vec3 _a0090;
vec3 _a0094;
vec3 _a0098;
vec3 _a0102;
vec3 _a0106;
vec3 _a0110;
vec3 _a0114;
vec3 _a0118;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _dx;
    float _dy;
    vec4 _yx;
    vec4 _xh;
    vec4 _yv;
    float _m1;
    float _m2;
    float _h1;
    float _h2;
    float _h3;
    float _h4;
    float _v1;
    float _v2;
    float _v3;
    float _v4;
    vec3 _t1;
    vec3 _t2;
    vec3 _t3;
    float _k1;
    float _k2;
    float _k3;
    vec3 _TMP42;
    _dx = 1.00000000E+00/TextureSize.x;
    _dy = 1.00000000E+00/TextureSize.y;
    _yx = vec4(_dx, _dy, -_dx, -_dy);
    _xh = _yx*vec4( 3.00000000E+00, 1.00000000E+00, 3.00000000E+00, 1.00000000E+00);
    _yv = _yx*vec4( 1.00000000E+00, 3.00000000E+00, 1.00000000E+00, 3.00000000E+00);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0046 = TEX0.xy + _yx.zw;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0046);
    _c0048 = TEX0.xy + _yx.xw;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0048);
    _c0050 = TEX0.xy + _yx.xy;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0050);
    _c0052 = TEX0.xy + _yx.zy;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0052);
    _c0054 = TEX0.xy + _xh.zw;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0054);
    _c0056 = TEX0.xy + _xh.xw;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0056);
    _c0058 = TEX0.xy + _xh.xy;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0058);
    _c0060 = TEX0.xy + _xh.zy;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0060);
    _c0062 = TEX0.xy + _yv.zw;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0062);
    _c0064 = TEX0.xy + _yv.xw;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0064);
    _c0066 = TEX0.xy + _yv.xy;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0066);
    _c0068 = TEX0.xy + _yv.zy;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0068);
    _a0070 = _TMP1.xyz - _TMP3.xyz;
    _TMP13 = abs(_a0070);
    _TMP14 = dot(_TMP13, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _m1 = 1.00000000E+00/(_TMP14 + 9.99999975E-06);
    _a0074 = _TMP4.xyz - _TMP2.xyz;
    _TMP15 = abs(_a0074);
    _TMP16 = dot(_TMP15, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _m2 = 1.00000000E+00/(_TMP16 + 9.99999975E-06);
    _a0078 = _TMP1.xyz - _TMP7.xyz;
    _TMP17 = abs(_a0078);
    _TMP18 = dot(_TMP17, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h1 = 1.00000000E+00/(_TMP18 + 9.99999975E-06);
    _a0082 = _TMP4.xyz - _TMP6.xyz;
    _TMP19 = abs(_a0082);
    _TMP20 = dot(_TMP19, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h2 = 1.00000000E+00/(_TMP20 + 9.99999975E-06);
    _a0086 = _TMP5.xyz - _TMP3.xyz;
    _TMP21 = abs(_a0086);
    _TMP22 = dot(_TMP21, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h3 = 1.00000000E+00/(_TMP22 + 9.99999975E-06);
    _a0090 = _TMP8.xyz - _TMP2.xyz;
    _TMP23 = abs(_a0090);
    _TMP24 = dot(_TMP23, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _h4 = 1.00000000E+00/(_TMP24 + 9.99999975E-06);
    _a0094 = _TMP1.xyz - _TMP11.xyz;
    _TMP25 = abs(_a0094);
    _TMP26 = dot(_TMP25, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v1 = 1.00000000E+00/(_TMP26 + 9.99999975E-06);
    _a0098 = _TMP4.xyz - _TMP10.xyz;
    _TMP27 = abs(_a0098);
    _TMP28 = dot(_TMP27, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v2 = 1.00000000E+00/(_TMP28 + 9.99999975E-06);
    _a0102 = _TMP9.xyz - _TMP3.xyz;
    _TMP29 = abs(_a0102);
    _TMP30 = dot(_TMP29, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v3 = 1.00000000E+00/(_TMP30 + 9.99999975E-06);
    _a0106 = _TMP12.xyz - _TMP2.xyz;
    _TMP31 = abs(_a0106);
    _TMP32 = dot(_TMP31, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _v4 = 1.00000000E+00/(_TMP32 + 9.99999975E-06);
    _t1 = (5.00000000E-01*(_m1*(_TMP1.xyz + _TMP3.xyz) + _m2*(_TMP4.xyz + _TMP2.xyz)))/(_m1 + _m2);
    _t2 = (5.00000000E-01*(_h1*(_TMP1.xyz + _TMP7.xyz) + _h2*(_TMP4.xyz + _TMP6.xyz) + _h3*(_TMP5.xyz + _TMP3.xyz) + _h4*(_TMP8.xyz + _TMP2.xyz)))/(_h1 + _h2 + _h3 + _h4);
    _t3 = (5.00000000E-01*(_v1*(_TMP1.xyz + _TMP11.xyz) + _v2*(_TMP4.xyz + _TMP10.xyz) + _v3*(_TMP9.xyz + _TMP3.xyz) + _v4*(_TMP12.xyz + _TMP2.xyz)))/(_v1 + _v2 + _v3 + _v4);
    _a0110 = _t1 - _TMP0.xyz;
    _TMP33 = abs(_a0110);
    _TMP34 = dot(_TMP33, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k1 = 1.00000000E+00/(_TMP34 + 9.99999975E-06);
    _a0114 = _t2 - _TMP0.xyz;
    _TMP35 = abs(_a0114);
    _TMP36 = dot(_TMP35, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k2 = 1.00000000E+00/(_TMP36 + 9.99999975E-06);
    _a0118 = _t3 - _TMP0.xyz;
    _TMP37 = abs(_a0118);
    _TMP38 = dot(_TMP37, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _k3 = 1.00000000E+00/(_TMP38 + 9.99999975E-06);
    _TMP42 = (_k1*_t1 + _k2*_t2 + _k3*_t3)/(_k1 + _k2 + _k3);
    _ret_0 = vec4(_TMP42.x, _TMP42.y, _TMP42.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
