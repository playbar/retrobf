// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _texture_size1;
float _placeholder22;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord;
};
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord = TexCoord.xy;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color2;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _texture_size;
float _placeholder32;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size1;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color2;
    vec2 _texCoord;
};
vec4 _ret_0;
vec3 _TMP55;
vec3 _TMP84;
vec3 _TMP54;
float _TMP53;
vec3 _TMP83;
vec3 _TMP82;
vec3 _TMP51;
float _TMP50;
vec3 _TMP81;
vec3 _TMP80;
vec3 _TMP48;
vec3 _TMP46;
float _TMP47;
float _TMP45;
float _TMP33;
float _TMP85;
float _TMP32;
float _TMP31;
float _TMP30;
float _TMP29;
bool _TMP28;
bool _TMP27;
vec4 _TMP26;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec2 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
orig _ORIG1;
input_dummy _IN1;
vec2 _x0097;
vec2 _x0101;
vec2 _c0103;
vec2 _c0105;
vec2 _c0107;
vec2 _c0109;
vec2 _c0111;
vec2 _c0113;
vec2 _c0115;
vec2 _c0117;
vec2 _c0119;
vec2 _c0121;
vec2 _c0123;
vec2 _c0125;
vec2 _c0127;
vec2 _c0129;
vec2 _c0131;
vec2 _c0133;
vec2 _c0137;
vec2 _c0139;
vec2 _c0141;
vec2 _c0143;
vec2 _c0145;
vec2 _c0147;
vec2 _c0149;
vec2 _c0151;
vec4 _r0155;
vec4 _r0167;
bvec3 _a0177;
bvec3 _a0179;
float _TMP180;
float _TMP184;
float _TMP188;
float _TMP192;
float _TMP196;
float _TMP200;
float _TMP204;
float _TMP208;
float _TMP212;
float _TMP220;
float _TMP228;
float _TMP236;
float _TMP246;
float _a0249;
float _TMP250;
float _a0253;
float _TMP254;
float _a0257;
float _TMP258;
float _a0261;
float _TMP278;
float _a0281;
float _TMP300;
float _a0303;
float _TMP304;
float _a0307;
float _TMP308;
float _a0311;
float _TMP312;
float _a0315;
float _TMP332;
float _a0335;
float _TMP354;
float _a0357;
float _TMP358;
float _a0361;
float _TMP362;
float _a0365;
float _TMP366;
float _a0369;
float _TMP370;
float _a0373;
float _TMP374;
float _a0377;
float _TMP396;
float _a0399;
float _TMP400;
float _a0403;
float _TMP404;
float _a0407;
float _TMP408;
float _a0411;
float _TMP412;
float _a0415;
float _TMP416;
float _a0419;
float _x0441;
float _TMP442;
vec3 _r0449;
vec3 _r0451;
vec3 _r0453;
vec3 _r0455;
float _t0531;
vec3 _TMP532;
vec3 _a0543;
vec3 _b0543;
vec3 _TMP544;
vec3 _a0555;
vec3 _b0555;
vec3 _TMP556;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _dir;
    vec2 _tex;
    vec2 _g1;
    vec2 _g2;
    bool _block_3d;
    float _d_edge;
    float _hv_edge;
    float _edge_strength;
    vec3 _color1;
    vec3 _min_sample;
    vec3 _max_sample;
    vec3 _TMP91[4];
    vec3 _TMP92[4];
    _x0097 = (TEX0.xy*TextureSize)/4.00000000E+00;
    _TMP0 = fract(_x0097);
    _dir = _TMP0 - vec2( 5.00000000E-01, 5.00000000E-01);
    if (_dir.x*_dir.y > 0.00000000E+00) { 
        _ret_0 = COMPAT_TEXTURE(Texture, TEX0.xy);
        FragColor = _ret_0;
        return;
    } 
    _x0101 = (TEX0.xy*TextureSize)/4.00000000E+00;
    _TMP1 = floor(_x0101);
    _tex = ((_TMP1 + vec2( 5.00000000E-01, 5.00000000E-01))*4.00000000E+00)/TextureSize;
    _g1 = vec2(2.00000000E+00/TextureSize.x, 0.00000000E+00);
    _g2 = vec2(0.00000000E+00, 2.00000000E+00/TextureSize.y);
    _c0103 = TEX0.xy - 3.00000000E+00*_g1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0103);
    _c0105 = TEX0.xy - 3.00000000E+00*_g2;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0105);
    _c0107 = TEX0.xy + 3.00000000E+00*_g2;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0107);
    _c0109 = TEX0.xy + 3.00000000E+00*_g1;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0109);
    _c0111 = (TEX0.xy - 2.00000000E+00*_g1) - _g2;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0111);
    _c0113 = (TEX0.xy - _g1) - 2.00000000E+00*_g2;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0113);
    _c0115 = (TEX0.xy - 2.00000000E+00*_g1) + _g2;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0115);
    _c0117 = TEX0.xy - _g1;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0117);
    _c0119 = TEX0.xy - _g2;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0119);
    _c0121 = (TEX0.xy - _g1) + 2.00000000E+00*_g2;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0121);
    _c0123 = TEX0.xy + _g2;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0123);
    _c0125 = TEX0.xy + _g1;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0125);
    _c0127 = (TEX0.xy + _g1) - 2.00000000E+00*_g2;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0127);
    _c0129 = (TEX0.xy + 2.00000000E+00*_g1) - _g2;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0129);
    _c0131 = TEX0.xy + _g1 + 2.00000000E+00*_g2;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0131);
    _c0133 = TEX0.xy + 2.00000000E+00*_g1 + _g2;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0133);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _g1 = _g1*2.00000000E+00;
    _g2 = _g2*2.00000000E+00;
    _c0137 = _tex + _g1 + 2.50000000E-01*_g1 + 2.50000000E-01*_g2;
    _TMP19 = COMPAT_TEXTURE(OrigTexture, _c0137);
    _c0139 = (_tex + _g1 + 2.50000000E-01*_g1) - 2.50000000E-01*_g2;
    _TMP20 = COMPAT_TEXTURE(OrigTexture, _c0139);
    _c0141 = ((_tex + _g1) - 2.50000000E-01*_g1) - 2.50000000E-01*_g2;
    _TMP21 = COMPAT_TEXTURE(OrigTexture, _c0141);
    _c0143 = ((_tex + _g1) - 2.50000000E-01*_g1) + 2.50000000E-01*_g2;
    _TMP22 = COMPAT_TEXTURE(OrigTexture, _c0143);
    _c0145 = _tex + 2.50000000E-01*_g1 + 2.50000000E-01*_g2 + _g2;
    _TMP23 = COMPAT_TEXTURE(OrigTexture, _c0145);
    _c0147 = ((_tex + 2.50000000E-01*_g1) - 2.50000000E-01*_g2) + _g2;
    _TMP24 = COMPAT_TEXTURE(OrigTexture, _c0147);
    _c0149 = ((_tex - 2.50000000E-01*_g1) - 2.50000000E-01*_g2) + _g2;
    _TMP25 = COMPAT_TEXTURE(OrigTexture, _c0149);
    _c0151 = (_tex - 2.50000000E-01*_g1) + 2.50000000E-01*_g2 + _g2;
    _TMP26 = COMPAT_TEXTURE(OrigTexture, _c0151);
    _r0155.x = dot(_TMP19.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0155.y = dot(_TMP20.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0155.z = dot(_TMP21.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0155.w = dot(_TMP22.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0167.x = dot(_TMP23.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0167.y = dot(_TMP24.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0167.z = dot(_TMP25.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _r0167.w = dot(_TMP26.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _a0177 = bvec3(_r0155.x == _r0155.y, _r0155.y == _r0155.z, _r0155.z == _r0155.w);
    _TMP27 = _a0177.x && _a0177.y && _a0177.z;
    _a0179 = bvec3(_r0167.x == _r0167.y, _r0167.y == _r0167.z, _r0167.z == _r0167.w);
    _TMP28 = _a0179.x && _a0179.y && _a0179.z;
    _block_3d = _TMP27 && _TMP28;
    _TMP180 = dot(_TMP6.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP184 = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP188 = dot(_TMP8.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP192 = dot(_TMP9.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP196 = dot(_TMP10.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP200 = dot(_TMP11.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP204 = dot(_TMP12.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP208 = dot(_TMP13.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP212 = dot(_TMP15.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP220 = dot(_TMP17.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP228 = dot(_TMP16.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP236 = dot(_TMP14.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _a0249 = _TMP192 - _TMP184;
    _TMP246 = abs(_a0249);
    _a0253 = _TMP192 - _TMP200;
    _TMP250 = abs(_a0253);
    _a0257 = _TMP208 - _TMP228;
    _TMP254 = abs(_a0257);
    _a0261 = _TMP208 - _TMP236;
    _TMP258 = abs(_a0261);
    _a0281 = _TMP204 - _TMP196;
    _TMP278 = abs(_a0281);
    _TMP29 = _TMP246 + _TMP250 + _TMP254 + _TMP258 + 4.00000000E+00*_TMP278;
    _a0303 = _TMP196 - _TMP212;
    _TMP300 = abs(_a0303);
    _a0307 = _TMP196 - _TMP180;
    _TMP304 = abs(_a0307);
    _a0311 = _TMP204 - _TMP188;
    _TMP308 = abs(_a0311);
    _a0315 = _TMP204 - _TMP220;
    _TMP312 = abs(_a0315);
    _a0335 = _TMP192 - _TMP208;
    _TMP332 = abs(_a0335);
    _TMP30 = _TMP300 + _TMP304 + _TMP308 + _TMP312 + 4.00000000E+00*_TMP332;
    _d_edge = _TMP29 - _TMP30;
    _a0357 = _TMP196 - _TMP208;
    _TMP354 = abs(_a0357);
    _a0361 = _TMP192 - _TMP204;
    _TMP358 = abs(_a0361);
    _a0365 = _TMP196 - _TMP184;
    _TMP362 = abs(_a0365);
    _a0369 = _TMP208 - _TMP220;
    _TMP366 = abs(_a0369);
    _a0373 = _TMP192 - _TMP180;
    _TMP370 = abs(_a0373);
    _a0377 = _TMP204 - _TMP228;
    _TMP374 = abs(_a0377);
    _TMP31 = 4.00000000E+00*(_TMP354 + _TMP358) + _TMP362 + _TMP366 + _TMP370 + _TMP374;
    _a0399 = _TMP192 - _TMP196;
    _TMP396 = abs(_a0399);
    _a0403 = _TMP204 - _TMP208;
    _TMP400 = abs(_a0403);
    _a0407 = _TMP192 - _TMP188;
    _TMP404 = abs(_a0407);
    _a0411 = _TMP196 - _TMP236;
    _TMP408 = abs(_a0411);
    _a0415 = _TMP204 - _TMP200;
    _TMP412 = abs(_a0415);
    _a0419 = _TMP208 - _TMP212;
    _TMP416 = abs(_a0419);
    _TMP32 = 4.00000000E+00*(_TMP396 + _TMP400) + _TMP404 + _TMP408 + _TMP412 + _TMP416;
    _hv_edge = _TMP31 - _TMP32;
    _TMP33 = abs(_d_edge);
    _x0441 = _TMP33/9.99999997E-07;
    _TMP85 = min(1.00000000E+00, _x0441);
    _TMP442 = max(0.00000000E+00, _TMP85);
    _edge_strength = _TMP442*_TMP442*(3.00000000E+00 - 2.00000000E+00*_TMP442);
    _r0449 = 5.00000000E-01*_TMP12.xyz;
    _r0449 = _r0449 + 5.00000000E-01*_TMP10.xyz;
    _r0451 = 5.00000000E-01*_TMP9.xyz;
    _r0451 = _r0451 + 5.00000000E-01*_TMP13.xyz;
    _TMP92[1] = _TMP9.xyz + _TMP12.xyz;
    _TMP92[2] = _TMP10.xyz + _TMP13.xyz;
    _r0453 = 2.50000000E-01*_TMP92[1];
    _r0453 = _r0453 + 2.50000000E-01*_TMP92[2];
    _TMP91[1] = _TMP10.xyz + _TMP9.xyz;
    _TMP91[2] = _TMP13.xyz + _TMP12.xyz;
    _r0455 = 2.50000000E-01*_TMP91[1];
    _r0455 = _r0455 + 2.50000000E-01*_TMP91[2];
    _TMP45 = float((_d_edge >= 0.00000000E+00));
    _TMP46 = _r0449 + _TMP45*(_r0451 - _r0449);
    _TMP47 = float((_hv_edge >= 0.00000000E+00));
    _TMP48 = _r0453 + _TMP47*(_r0455 - _r0453);
    _t0531 = 1.00000000E+00 - _edge_strength;
    _color1 = _TMP46 + _t0531*(_TMP48 - _TMP46);
    _TMP80 = min(_TMP12.xyz, _TMP13.xyz);
    _TMP81 = min(_TMP10.xyz, _TMP80);
    _TMP532 = min(_TMP9.xyz, _TMP81);
    _TMP50 = float((_d_edge >= 0.00000000E+00));
    _a0543 = (_TMP4.xyz - _TMP12.xyz)*(_TMP10.xyz - _TMP3.xyz);
    _b0543 = (_TMP2.xyz - _TMP9.xyz)*(_TMP13.xyz - _TMP5.xyz);
    _TMP51 = _a0543 + _TMP50*(_b0543 - _a0543);
    _min_sample = _TMP532 + _TMP51;
    _TMP82 = max(_TMP12.xyz, _TMP13.xyz);
    _TMP83 = max(_TMP10.xyz, _TMP82);
    _TMP544 = max(_TMP9.xyz, _TMP83);
    _TMP53 = float((_d_edge >= 0.00000000E+00));
    _a0555 = (_TMP4.xyz - _TMP12.xyz)*(_TMP10.xyz - _TMP3.xyz);
    _b0555 = (_TMP2.xyz - _TMP9.xyz)*(_TMP13.xyz - _TMP5.xyz);
    _TMP54 = _a0555 + _TMP53*(_b0555 - _a0555);
    _max_sample = _TMP544 - _TMP54;
    _TMP84 = min(_max_sample, _color1);
    _TMP556 = max(_min_sample, _TMP84);
    if (_block_3d) { 
        _TMP55 = _TMP556;
    } else {
        _TMP55 = _TMP18.xyz;
    } 
    _ret_0 = vec4(_TMP55.x, _TMP55.y, _TMP55.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
